<html>
<head><link rel=stylesheet href="../jdoc.css" type="text/css"><title>;: Words  -  Sequential Machine</title>
<link href="../jdoc.css" rel=stylesheet></head>
<body><!--top jump start--><a href="d400.htm">&gt;&gt;</a>&nbsp;
<a href="d331.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Dictionary<hr><!--top jump end-->

<br>
<table width=100%><tr>
<td align=left   width=33%><b><font size=+2>Words</font></b></td>
<td align=center width=34%><font face="Courier New" size=+3>;: &nbsp;1 _ _</font></td>
<td align=right  width=33%><b><font size=+2>Sequential Machine</font></b>
</tr></table>
<br>

<table width=100% border=0><tr>
<td valign=top width=49% bgcolor=#eeeeee>
<p><tt>;:y </tt>is the list of boxed words in the list<tt> y </tt>
according to the rhematic rules of <a href="dict1.htm">Part I</a>
and the rules regarding<tt> NB.</tt> .<tt> </tt>
The function also applies reasonably well to ordinary text.</p>
<p>For a suitable left argument<tt> x</tt> ,<tt> </tt>
the result of<tt> x;:y </tt>is equivalent to<tt> ;:y</tt> .<tt> </tt>
Thus:</p>

<pre>
mj=: 256$0                     NB. X other
mj=: 1 (9,a.i.' ')}mj          NB. S space and tab
mj=: 2 ((a.i.'Aa')+/i.26)}mj   NB. A A-Z a-z excluding N B
mj=: 3 (a.i.'N')}mj            NB. N the letter N
mj=: 4 (a.i.'B')}mj            NB. B the letter B
mj=: 5 (a.i.'0123456789_')}mj  NB. 9 digits and _
mj=: 6 (a.i.'.')}mj            NB. D .
mj=: 7 (a.i.':')}mj            NB. C :
mj=: 8 (a.i.'''')}mj           NB. Q quote

sj=: _2]\&quot;1 }.&quot;.;._2 (0 : 0) 
' X    S    A    N    B    9    D    C    Q ']0
 1 1  0 0  2 1  3 1  2 1  6 1  1 1  1 1  7 1  NB. 0 space
 1 2  0 3  2 2  3 2  2 2  6 2  1 0  1 0  7 2  NB. 1 other
 1 2  0 3  2 0  2 0  2 0  2 0  1 0  1 0  7 2  NB. 2 alp/num
 1 2  0 3  2 0  2 0  4 0  2 0  1 0  1 0  7 2  NB. 3 N
 1 2  0 3  2 0  2 0  2 0  2 0  5 0  1 0  7 2  NB. 4 NB
 9 0  9 0  9 0  9 0  9 0  9 0  1 0  1 0  9 0  NB. 5 NB.
 1 4  0 5  6 0  6 0  6 0  6 0  6 0  1 0  7 4  NB. 6 num
 7 0  7 0  7 0  7 0  7 0  7 0  7 0  7 0  8 0  NB. 7 '
 1 2  0 3  2 2  3 2  2 2  6 2  1 2  1 2  7 0  NB. 8 ''
 9 0  9 0  9 0  9 0  9 0  9 0  9 0  9 0  9 0  NB. 9 comment
)

   x=: 0;sj;mj
   y=: 'sum=. (i.3 4)+/ .*0j4+pru 4'

   x ;: y
+---+--+-+--+---+-+-+-+-+-+---+-+---+-+
|sum|=.|(|i.|3 4|)|+|/|.|*|0j4|+|pru|4|
+---+--+-+--+---+-+-+-+-+-+---+-+---+-+
   (x ;: y) -: ;: y
1

   (5;sj;mj) ;: y
 0 _1 0 2 2 1
 1  0 2 2 2 0
 2  0 2 2 2 0
 3  0 2 0 1 2
 4  3 1 6 1 0
 5  3 1 1 0 3
 6 _1 0 0 1 1
 7  6 1 2 2 2
 8  7 2 6 1 0
 9  7 1 5 6 2
10  9 6 1 0 5
11 _1 0 5 6 1
12 11 6 0 1 4
13 12 1 0 1 2
14 13 1 0 1 2
15 14 1 1 0 3
16 _1 0 6 1 1
17 16 1 0 1 2
18 17 1 5 6 2
19 18 6 2 6 0
20 18 6 5 6 0
21 18 6 0 1 4
22 21 1 2 2 2
23 22 2 2 2 0
24 22 2 2 2 0
25 22 2 1 0 3
26 _1 0 5 6 1
   
</pre>
<br>&nbsp;</td>

<td width=2%>&nbsp;</td>

<td valign=top width=49% bgcolor=#eeeeee>
<p><tt>x;:y </tt>implements a sequential machine
(finite state machine, finite state 
automaton).<tt> x </tt>is the specification
of a machine, including the state transition table, 
and<tt> y </tt>is the input.  
A sequential machine solves the problem 
of recognizing the &ldquo;words&rdquo; in the input.
The machine starts in some initial state
and processes the input one item at a time;
given the current state and input item,
the new state and output are determined
by the state transition table.  The machine 
then proceeds to process the next input item.
In detail:</p>

<p><tt>y </tt>is any array and<tt> x=.f;s;m;ijrd </tt>is a boxed list
from which<tt> ijrd </tt>or both<tt> m </tt>and<tt> ijrd </tt>
may be elided.</p>

<p><tt>f </tt>is a function code, an integer between 0 and 5.  (Explained below.)</p>

<p><tt>m </tt>is a list of the input mapping; each box of<tt> m </tt>
contains the items of<tt> y </tt>that are mapped to the same index.  
That is, the mapped input 
is<tt> my=.&nbsp;(y&nbsp;i.~;m)&nbsp;{&nbsp;(#m),~(#&amp;&gt;m)#i.#m</tt> .<tt> </tt>
If<tt> y </tt> is a string (a list of literals),<tt> m </tt>may also be
a list of non-negative integers corresponding to each atom of the 
alphabet<tt> a.</tt> ,<tt> </tt>and the mapped input 
is<tt> my=.(a.i.y){m</tt> .<tt> </tt>
Finally, if<tt> m </tt>is the empty list or is elided (and<tt> y </tt>is a 
numeric list), then the mapped input<tt> my </tt>
is just<tt> y </tt> itself.</p>

<p><tt> s </tt>is a 3-dimensional, 2-column array of non-negative integers 
of the state transition and output table. It has shape<tt> p,q,2 </tt>
where<tt> p </tt>bounds the states and<tt> q </tt>bounds the mapped inputs.
That is,<tt> p&gt;0{&quot;1&nbsp;s</tt> ,<tt> </tt>and<tt> q&gt;#m </tt>if<tt> m </tt>is
a list of boxes or<tt> q&gt;m </tt>if<tt> m </tt>is a list of integers.</p>

<p><tt>ijrd </tt>is an integer parameter list with up to 4 
elements.<tt> i </tt>is the initial iteration counter and index 
into the input<tt> y</tt> ,<tt> r </tt>is the initial state,<tt> j </tt>
is the initial index of the current word, and<tt> d </tt>is 
an end-of-input action parameter (see below).
It is required that<tt> (0&lt;:i)*.i&lt;#y </tt>
and<tt> (_1=j)+.(0&lt;:j)*.j&lt;i</tt> .<tt> </tt>
If<tt> ijrd </tt>is elided, then the defaults 
are<tt> 0&nbsp;_1&nbsp;0&nbsp;_1</tt> .</p>

<p><tt>x;:y </tt>iterates over the atoms of<tt> my</tt>,<tt> </tt>
the mapped input.<tt> r </tt>is the current state and<tt> j </tt>
is the beginning index of a word; initially,<tt> r </tt>is<tt> 0 </tt>
and<tt> j </tt>is<tt> _1 </tt>(or as specified by<tt> ijr</tt>).
At iteration<tt> i</tt> ,<tt> </tt>the current mapped input 
is<tt> c=.i{my </tt>and the relevant state
table entry is<tt> e=.s{~&lt;r,c </tt>(a 2-element integer list).  The new state is<tt> 0{e</tt> ,<tt> </tt>and the
output code<tt> 1{e </tt>signifies one of the following:<br>
&nbsp; 0 &nbsp;&nbsp;  no output<br>
&nbsp; 1 &nbsp;&nbsp; <tt> j=.i            </tt><br>
&nbsp; 2 &nbsp;&nbsp; <tt> j=.i&nbsp; [ ew(i,j,r,c) </tt><br>
&nbsp; 3 &nbsp;&nbsp; <tt> j=._1 [ ew(i,j,r,c) </tt><br>
&nbsp; 4 &nbsp;&nbsp; <tt> j=.i&nbsp; [ ev(i,j,r,c) </tt><br>
&nbsp; 5 &nbsp;&nbsp; <tt> j=._1 [ ev(i,j,r,c) </tt><br>
&nbsp; 6 &nbsp;&nbsp; stop<br>

</p>

<p><tt>ew(i,j,r,c)</tt> (&ldquo;emit word&rdquo;) signals index error if<tt> j </tt>
is<tt> _1</tt> ,<tt> </tt>and accumulates to the result information on 
the current word according to the function code<tt> f</tt> :</p>
<table>
<tr><td>&nbsp;</td><td>0</td><td>&nbsp;&nbsp;</td>
<td><tt>&lt;y{~j+i.i-j </tt></td><td>&nbsp;&nbsp;</td><td>the word boxed</td></tr>
<tr><td>&nbsp;</td><td>1</td><td>&nbsp;&nbsp;</td>
<td><tt>y{~j+i.i-j </tt></td><td>&nbsp;&nbsp;</td><td>the word</td></tr>
<tr><td>&nbsp;</td><td>2</td><td>&nbsp;&nbsp;</td>
<td><tt>j,i-j </tt></td><td>&nbsp;&nbsp;</td><td>word index and length</td></tr>
<tr><td>&nbsp;</td><td>3</td><td>&nbsp;&nbsp;</td>
<td><tt>c+q*r</tt></td><td>&nbsp;&nbsp;</td><td>state table index</td></tr>
<tr><td>&nbsp;</td><td>4</td><td>&nbsp;&nbsp;</td>
<td><tt>j,(i-j),c+q*r</tt></td><td>&nbsp;&nbsp;</td><td>both 2 and 3 above</td></tr>
<tr><td>&nbsp;</td><td>5</td><td>&nbsp;&nbsp;</td>
<td><tt>i,j,r,c,s{~&lt;r,c</tt></td><td>&nbsp;&nbsp;</td><td>trace</td></tr>
</table>

<p><tt>ev(i,j,r,c)</tt> (&ldquo;emit vector&rdquo;) is similiar, but the
current word and any intervening items are catenated  to the previous word
if the previous emit was<tt> ev </tt>and the state at that
time was<tt> r</tt>.</p>

<p>After the last atom of<tt> my </tt>has been processed,<tt> i </tt>
is<tt> #y </tt>, and the end-of-input action, if any, is performed:
If<tt> d=.3{ijrd </tt>is non-negative, the action is a single iteration
with<tt> c=.d</tt> ;<tt> </tt>if<tt> d </tt>is negative and<tt> j </tt>
is not<tt> _1</tt> ,<tt> </tt>then<br><tt> ev(j,i,r,c) </tt>is evaluated.</p>

<p>Function code<tt> f=5 </tt>specifies <i>trace</i>;
the result of<tt> x;:y </tt>is a 6-column integer matrix,
and for each iteration there is a row<tt> i,j,r,c,s{~&lt;r,c</tt> .<tt> </tt>
This matrix usually has<tt> #y </tt>rows, but can have fewer
if output code 6 was encountered or if any of output codes 2 to 5
were encountered and<tt> j </tt>was<tt> _1</tt> . </p>

<p>Thus <tt>(0;s;m);:y </tt>is a list of boxed items of<tt> y </tt>
and <tt>(2;s;m);:y </tt>is a 2-column integer table of indices
and lengths, and:</p>

<p><tt>((0;s;m);:y) -: (2;s;m) (,&quot;0@;: &lt;;.0 ]) y</tt></p>
<br>
</td>
</tr></table><br>

<pre>
   s=: '*: @ -: @ i. 2 3'
   do=: &quot;.
   do s
   0 0.25    1
2.25    4 6.25

   ;: s
+--+-+--+-+--+---+
|*:|@|-:|@|i.|2 3|
+--+-+--+-+--+---+

   ; ;: s
*:@-:@i.2 3

   p=: 'When eras die, their legacies/'
   q=: 'are left to strange police'
   r=: 'Professors in New England guard'
   s=: 'the glory that was Greece'

   ;: p
+----+----+---+-+-----+--------+-+
|When|eras|die|,|their|legacies|/|
+----+----+---+-+-----+--------+-+

   &gt; ;: p,q
When    
eras    
die     
,       
their   
legacies
/       
are     
left    
to      
strange 
police 

   |.&amp;.;: p
/ legacies their , die eras When
</pre>

<p>The following examples of the dyad<tt> ;: </tt>
separate quotes from non-quotes.  The quote character 
is mapped to 1 and other characters
are mapped to 0; column 0 of the state table is for
&ldquo;other&rdquo; (non-quotes) and column 1 is for the quote.
</p>
<pre>
   sq=: 4 2 2$ 1 1 2 1  1 0 2 2  2 0 3 0  1 2 2 0
   &lt;&quot;1 sq
+---+---+
|1 1|2 1|
+---+---+
|1 0|2 2|
+---+---+
|2 0|3 0|
+---+---+
|1 2|2 0|
+---+---+
   ] y=: '''The Power of the Powerless'' by Havel and ''1984'' by Orwell'
'The Power of the Powerless' by Havel and '1984' by Orwell
   (0;sq;''''=a.) ;: y
+----------------------------+--------------+------+----------+
|'The Power of the Powerless'| by Havel and |'1984'| by Orwell|
+----------------------------+--------------+------+----------+
   (2;sq;''''=a.) ;: y
 0 28
28 14
42  6
48 10
   (3;sq;''''=a.) ;: y
6 3 6 2
   (4;sq;''''=a.) ;: y
 0 28 6
28 14 3
42  6 6
48 10 2

   sqx=: 4 2 2 $ 1 1 2 0  1 0 2 3  2 0 3 0  1 1 2 0
   &lt;&quot;1 sqx
+---+---+
|1 1|2 0|
+---+---+
|1 0|2 3|
+---+---+
|2 0|3 0|
+---+---+
|1 1|2 0|
+---+---+
   (1;sqx;''''=a.) ;: y
 by Havel and  by Orwell

   f=: (1;sqx;''''=a.)&amp;;:
   g=: (+: ~:/\)@(''''&amp;=) # ]
   (f -: g) y
1
</pre>
<p>A similar machine can be used to extract only the quoted strings.  
To prevent an unmatched quote from being recognized as the start of a quoted string,
the<tt> ijrd </tt>field can be used to treat the end-of-string as
a non-quote character:</p>

<pre>
   ] y=: '''Preposterous!''  He couldn''t go on.'
'Preposterous!'  He couldn't go on.
   sq=: 4 2 2$ 1 1 2 1  1 0 2 1  2 0 3 0  1 3 2 0
   (0;sq;''''=a.) ;: y
+---------------+---------+
|'Preposterous!'|'t go on.|
+---------------+---------+
   (0;sq;(''''=a.);0 _1 0 0) ;: y
+---------------+
|'Preposterous!'|
+---------------+
</pre>

<p>The labs &ldquo;Sequential Machines&rdquo; and &ldquo;Huffman Coding&rdquo; contain further examples
on the use of sequential machines.</p>
<br>

<!--bottom jump start--><hr><a href="d400.htm">&gt;&gt;</a>&nbsp;
<a href="d331.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Dictionary<!--bottom jump end--></body>
</html>
