<html>
<head><link rel=stylesheet href="../jdoc.css" type="text/css"><title>s: Symbol</title>
<link href="../jdoc.css" rel=stylesheet></head>
<body><!--top jump start--><a href="dscapco.htm">&gt;&gt;</a>&nbsp;
<a href="drdot.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Dictionary<hr><!--top jump end-->

<br>
<table width=100%><tr>
<td align=left   width=33%><b><font size=+2>Symbol</font></b></td>
<td align=center width=34%><font face="Courier New" size=+3>s: &nbsp;_ _ _</font></td>
<td align=right  width=33%><b><font size=+2>Symbol</font></b></td>
</tr></table>
<br>

<i>Symbols</i> are a data type and are  
created by the verb<tt> s:</tt>.<tt> </tt>
Symbols provide a mechanism for searching, sorting, and comparisons 
more efficient than alternative mechanisms such as boxed strings.  
Structural, selection, and relational verbs work on symbols.
Arithmetic verbs do not work on symbols.<br><br>

<table width=100% border=0><tr><td valign=top bgcolor=#eeeeee>

The monad<tt> s: </tt>produces an array of symbols. 
Several types of arguments are acceptable:
<ul>
<li>string with the leading character as the separator
<li>literal array where each row, excluding trailing blanks, 
    is the name of a symbol
<li>array of boxed strings
</ul>

<tt>s:^:_1</tt>,<tt> </tt>the inverse of<tt> s:</tt>,<tt> </tt>is<tt> 5&amp;s:</tt> .
<br><br>

The dyad<tt> s: </tt>takes a scalar integer left argument
and computes a variety of functions:<br><br>

<table>
<tr>
<td valign=top><b>Left</b>&nbsp;&nbsp;</td>
<td valign=top><b>Right</b></td>
<td>&nbsp;</td>
<td valign=top><b> &nbsp; Function</b></td>
</tr>

<tr valign=top>
<td><tt>&nbsp;0</tt></td>
<td><tt>0</tt></td>
<td> </td>
<td>the cardinality of the set of symbols</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;0</tt></td>
<td><tt>1</tt></td>
<td> </td>
<td>the string length (the number of characters used in the string table)</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;0</tt></td>
<td><tt>2</tt></td>
<td> </td>
<td>the table of symbols; the columns are:<br>
<table>
<tr><td>&nbsp;</td><td>0</td><td>index in the string table</td></tr>
<tr><td>&nbsp;</td><td>1</td><td>length in bytes </td>
<tr><td>&nbsp;</td><td>2</td><td>hash value</td>               
<tr><td>&nbsp;</td><td>3</td><td>color</td>
<tr><td>&nbsp;</td><td>4</td><td>parent</td>
<tr><td>&nbsp;</td><td>5</td><td>left</td></tr>
<tr><td>&nbsp;</td><td>6</td><td>right</td></tr>
<tr><td>&nbsp;</td><td>7</td><td>order #</td></tr>
<tr><td>&nbsp;</td><td>8</td><td>predecessor</td></tr>
<tr><td>&nbsp;</td><td>9</td><td>successor</td></tr>
<tr><td>&nbsp;</td><td>10&nbsp;</td><td>bit flags</td></tr>
</table>

The details of this data may change from one version of J to the next.
</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;0</tt></td>
<td><tt>3</tt></td>
<td> </td>
<td>the string table</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;0</tt></td>
<td><tt>4</tt></td>
<td> </td>
<td>the hash table.<tt> _1 </tt>indicates free entries;
non-negative values are indices into the table of symbols.</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;0</tt></td>
<td><tt>5</tt></td>
<td> </td>
<td>the binary tree root</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;0</tt></td>
<td><tt>6</tt></td>
<td> </td>
<td>the binary tree fill factor</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;0</tt></td>
<td><tt>7</tt></td>
<td> </td>
<td>the binary tree gap</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;0</tt></td>
<td><tt>10</tt></td>
<td> </td>
<td>get the global symbols data, equivalent to<tt> 0 s:&amp;.&gt;i.8</tt>.<tt> </tt>
The details of this data may change from one version of J to the next.
</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;0</tt></td>
<td><tt>11</tt></td>
<td> </td>
<td>perform an integrity check on the global symbols data
</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;0</tt></td>
<td><tt>12</tt></td>
<td> </td>
<td>the number of queries required for each symbol
</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;1</tt></td>
<td>array of symbols</td>
<td> </td>
<td>a string of the symbol names each prefaced by a leading<tt> '`'</tt></td>
</tr>

<tr valign=top>
<td><tt>_1</tt></td>
<td>string</td>
<td> </td>
<td>the symbols list for a string containing symbol names 
each prefaced by the leading character</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;2</tt></td>
<td>array of symbols</td>
<td> </td>
<td>a string of the symbol names each suffixed by a trailing zero character</td>
</tr>

<tr valign=top>
<td><tt>_2</tt></td>
<td>string</td>
<td> </td>
<td>the symbols list for a string containing symbol names 
each suffixed by the trailing character</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;3</tt></td>
<td>array of symbols</td>
<td> </td>
<td>a literal array of the symbol names padded with zero characters</td>
</tr>

<tr valign=top>
<td><tt>_3</tt></td>
<td>literal array</td>
<td> </td>
<td>the symbols array for the literal array wherein each row, 
excluding trailing zero characters, is the name of a symbol</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;4</tt></td>
<td>array of symbols</td>
<td> </td>
<td>a literal array of the symbol names padded with blanks</td>
</tr>

<tr valign=top>
<td><tt>_4</tt></td>
<td>literal array</td>
<td> </td>
<td>the symbols array for the literal array wherein each row, 
excluding trailing blanks, is the name of a symbol</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;5</tt></td>
<td>array of symbols</td>
<td> </td>
<td>an array of boxed strings of the symbol names</td>
</tr>

<tr valign=top>
<td><tt>_5</tt></td>
<td>boxed strings</td>
<td> </td>
<td>the symbols array for the boxed array wherein each box 
is a string of a symbol name</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;6</tt></td>
<td>array of symbols</td>
<td> </td>
<td>an integer array of the symbol indices (indices into the table of
symbols)</td>
</tr>

<tr valign=top>
<td><tt>_6</tt></td>
<td>indices</td>
<td> </td>
<td>the symbols for the indices</td>
</tr>

<tr valign=top>
<td><tt>&nbsp;7</tt></td>
<td>array of symbols</td>
<td> </td>
<td>an integer array of the order numbers for the symbols</td>
</tr>

<tr valign=top>
<td><tt>10</tt></td>
<td>global&nbsp;symbols&nbsp;data</td>
<td> </td>
<td>set the global symbols data (as previously returned 
by<tt> 0 s: 10</tt>)<tt> </tt>after performing 
an integrity check on it.
Incorrect global symbols data may cause misinterpretation of symbol arrays,
or data corruption, or a system crash, or the end of civilization
as we know it.
</td></tr></table>
<br>
The inverse of<tt> k&amp;s: </tt>is<tt> (-k)&amp;s:</tt>,<tt> </tt>for non-zero 
integer<tt> k </tt>between<tt> _6 </tt>and<tt> 6</tt> .
<br>&nbsp;</td></tr></table>

<br>

The remainder of this text is divided into the following sections: 
<a href="#display">Display</a>,
<a href="#examples">Annotated Examples</a>,
<a href="#spacetime">Space and Time</a>, and
<a href="#persistence">Persistence</a>.<br><br>

<a name="display"></a><font size=+1><b>Display</b></font>
<br><br>

The display of a symbol is the character<tt> ` </tt>(<tt>96{a.</tt>)<tt> </tt>
prefaced to the symbol name; the display of a symbol array is similar
to that display of numeric arrays, except that columns are aligned
on the <i>left</i>.  See <a href="#examples">Annotated Examples</a> below.<br><br>

<a name="examples"></a><font size=+1><b>Annotated Examples</b></font>
<br>
<pre>
   ] t=: s: ' zero one two three four five'
`zero `one `two `three `four `five

   $ t                              NB. a list of 6 symbols
6
   3 5 $ t                          NB. a matrix of symbols
`zero `one  `two  `three `four 
`five `zero `one  `two   `three
`four `five `zero `one   `two  

   1 3 5 3 1 { t
`one `three `five `three `one
   |. t
`five `four `three `two `one `zero
   _2 |. t
`four `five `zero `one `two `three
   1 0 2 0 4 0 # t
`zero `two `two `four `four `four `four

   &lt;&quot;0 t                            NB. symbols can be boxed
+-----+----+----+------+-----+-----+
|`zero|`one|`two|`three|`four|`five|
+-----+----+----+------+-----+-----+
   (2|i.#t) &lt;/. t
+----------------+-----------------+
|`zero `two `four|`one `three `five|
+----------------+-----------------+

   &lt;:/~ t                           NB. relations work on symbols
1 0 0 0 0 0
1 1 1 1 0 0
1 0 1 0 0 0
1 0 1 1 0 0
1 1 1 1 1 0
1 1 1 1 1 1

   t + t                            NB. arithmetic functions don't work on symbols
|domain error
|   t    +t

   /: t                             NB. symbols can be graded/sorted
5 4 1 3 2 0

   5 s: t                           NB. convert symbols to boxed strings
+----+---+---+-----+----+----+
|zero|one|two|three|four|five|
+----+---+---+-----+----+----+
   (/: t) -: /: 5 s: t
1

   /:~ t
`five `four `one `three `two `zero

   &lt;:/~ /:~ t
1 1 1 1 1 1
0 1 1 1 1 1
0 0 1 1 1 1
0 0 0 1 1 1
0 0 0 0 1 1
0 0 0 0 0 1

   t i.  s: ' three one four one five nine'
3 1 4 1 5 6
   t e.~ s: ' three one four one five nine'
1 1 1 1 1 0

   10{. t                           NB. the fill for symbols is the 0-length symbol
`zero `one `two `three `four `five ` ` ` `

   _10{.t
` ` ` ` `zero `one `two `three `four `five

   0 s: 0                           NB. cardinality (current # of unique symbols)
8

   a=:   ;:'A AAPL AMAT AMD AMZN ATT BA CRA CSCO DELL F GE GM HWP IBM INTC'
   a=: a,;:'JDSU LLY LU MOT MSFT NOK NT PFE PG QCOM RMBS T XRX YHOO'
   b=: ;:'NY SF LDN TOK HK FF TOR'
   c=: ;:'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'
   d=: &lt;;._1 ' 00 01 02 03 04 05 06 07 08 09'
   e=: ;:'open high low close'

   t=: }.@;&amp;.&gt;{' ',&amp;.&gt;&amp;.&gt;a;b;c;d;&lt;e
   $t
30 7 12 10 4
   */ $t
100800
   2 4 ($,) t
+----------------+----------------+---------------+-----------------+
|A NY Jan 00 open|A NY Jan 00 high|A NY Jan 00 low|A NY Jan 00 close|
+----------------+----------------+---------------+-----------------+
|A NY Jan 01 open|A NY Jan 01 high|A NY Jan 01 low|A NY Jan 01 close|
+----------------+----------------+---------------+-----------------+
   y=: s: t                         NB. create a whole lot of symbols
   $y
30 7 12 10 4
   2 4 ($,) y
`A NY Jan 00 open `A NY Jan 00 high `A NY Jan 00 low `A NY Jan 00 close
`A NY Jan 01 open `A NY Jan 01 high `A NY Jan 01 low `A NY Jan 01 close

   0 s: 11                          NB. system integrity check
1
   0 s: 0                           NB. cardinality
100808

   (+/ % #) 0 s: 12                 NB. mean # of queries per symbol
1.31213

   h=: 100808 {. 2 {&quot;1 ] 0 s: 2     NB. hash values

   (+/ ~: h) % #h                   NB. fraction of distinct hash values
0.999821
   (+/ ~: h |~ #0 s: 4) % #h        NB. fraction with respect to hash table
0.831005
</pre>

<a name="spacetime"></a><font size=+1><b>Space and Time</b></font>
<br><br>

In the current implementation, a symbol<tt> y </tt>requires 
4 bytes for an index, 
8 or more bytes in the hash table, 
44 bytes in the table of symbols, 
and<tt> len y </tt>bytes (times 2 or 4 if literal2 or literal4) in the string table, 
where<tt> len=: #&amp;&gt;@(5&amp;s:) </tt>, the length of the symbol name.
(A symbol requires a single 4-byte entry
in the hash table, but for efficient hashing the system maintains
at least<tt> 2*n </tt>entries for<tt> n </tt>symbols.)
Multiple occurrences of a symbol require just multiple indices;
entries in the hash table, the table of symbols, and the string table
are not duplicated.<br><br>


Computations on symbols generally require linear time.  Specifically:<br>

<table>
<tr><td>&nbsp; </td><td>query (new) &nbsp; &nbsp; &nbsp; &nbsp;</td><td><tt>O((len y) * ^. 0 s: 0)</tt></td></tr>
<tr><td></td><td>query (old)</td> <td><tt>O(len y)</tt></td></tr>
<tr><td></td><td><tt>/:y</tt></td><td><tt>O(*/$y)</tt></td></tr>
<tr><td></td><td><tt>i{y</tt></td><td><tt>O((*/$i) * */}.$y)</tt></td></tr>
<tr><td></td><td><tt>x &lt; y </tt>etc.</td><td><tt>O(x &gt;.&amp;(*/@$) y)</tt></td></tr>
<tr><td></td><td><tt>x i. y</tt></td><td><tt>O(x + &amp;(*/@$) y)</tt></td></tr>
</table>
<br>

<a name="persistence"></a><font size=+1><b>Persistence</b></font>
<br><br>

The interpretation of symbols depend on the global 
symbols data<tt> 0 s: 10</tt>.<tt> </tt>For this interpretation
to persist across J sessions the global symbols data must be
restored at the beginning of a session.  Thus:<br><br>

<table>
<tr>
<td><tt>((3!:1) 0 s: 10) 1!:2 &lt;'symb.dat'</tt> &nbsp; &nbsp; &nbsp; &nbsp; </td>
<td>to &nbsp;&nbsp; store the global symbols data</td>
</tr>
<tr>
<td><tt>10 s: (3!:2) 1!:1 &lt;'symb.dat'</tt></td>
<td>to restore the global symbols data</td>
</tr>
</table>
<br>
See the cautionary statements under<tt> 10 s: x</tt>.
<br><br>

<br><br>

<!--bottom jump start--><hr><a href="dscapco.htm">&gt;&gt;</a>&nbsp;
<a href="drdot.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Dictionary<!--bottom jump end--></body>
</html>
