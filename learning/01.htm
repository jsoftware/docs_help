<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
    
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=ISO-8859-1"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)"> 
  <META NAME="CREATED" CONTENT="20051014;16001218"> 
	<META NAME="CHANGED" CONTENT="20051014;16020434"> 
  <title>   Ch 1: Basics</title> 
  <STYLE TYPE="text/css"> 
   <!-- 
    TT  {font-size: 11pt; COLOR: BLUE} 
    PRE {font-size: 11pt; COLOR: BLUE} 
   --> 
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="02.htm">&gt;&gt;</a>&nbsp;
<a href="contents.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <H1>Chapter 1: Basics</H1>
<H2>1.1  Interactive Use</H2>
<A NAME="01"></A>
The user types a line at the keyboard. This input line may be an expression, such as 
<TT>2+2</TT>.  When the line is entered (by pressing the "enter" or "carriage return" key), the 
value of the expression is computed and displayed on the next line.
<PRE>
   2+2
4
</PRE>
The user is then prompted for another line of input.   
The prompt is seen by the cursor being positioned a few spaces from the left margin. 
Thus in this book, a line indented by a few spaces represents input typed by a user, 
and a following line, not indented, represents the corresponding output. 
<H2>1.2  Arithmetic</H2>
The symbol for multiplication is <TT>*</TT> (asterisk).
<PRE>
   2*3
6
</PRE>
If we try this again, this time typing <TT>2 space * space 3</TT>  
<PRE>
   2 * 3
6
</PRE>
the result is the same as before, showing that the spaces here are optional. 
Spaces can make an expression more readable.
<p>
The symbol for division is <TT>%</TT> (percent).
<PRE>
   3 % 4
0.75
</PRE>
For subtraction, we have the familiar <TT>-</TT> symbol:
<PRE>
   3 - 2
1
</PRE>
The next example shows how a negative number is represented. The negative sign is a leading _ (underscore) symbol, with no space between the sign and the digits of the number.  This sign is not an arithmetic function: it 
is part of the notation for writing numbers, in the same way that a decimal point is part of the notation.
<PRE>
   2 - 3
_1
</PRE>
The symbol for negation is <TT>-</TT>, the same symbol as for subtraction: 
<PRE>
   - 3
_3
</PRE>
The symbol for the power function is <TT>^</TT> (caret). 2 cubed is 8:
<PRE>
   2 ^ 3
8
</PRE>
The arithmetic function to compute the square of a number has the symbol <TT>*:</TT> (asterisk colon).
<PRE>
   *: 4
16
</PRE>
<H2>1.3  Some Terminology: Function, Argument, Application, Value</H2>
<A NAME="02"></A>
<A NAME="03"></A>
<A NAME="04"></A>
<A NAME="05"></A>
Consider an expression such as <TT>2 * 3</TT>. 
We say that the multiplication function <TT>*</TT> is applied to its arguments. 
The left argument is <TT>2</TT> and the right argument is <TT>3</TT>. Also, 
<TT>2</TT> and <TT>3</TT> are said to be the values of the arguments.
<A NAME="06"></A>
<H2>1.4  List Values</H2>
Sometimes we may wish to repeat the same computation several times 
for several different numbers.
A list of numbers can be given as <TT>1 2 3 4</TT>, for example, written with a space between 
each number and the next.  
To find the square of each number in this list we could say:
<PRE>
   *: 1 2 3 4
1 4 9 16
</PRE>
Here we see that the "Square" function (<TT>*:</TT>) applies separately to each item in the list. 
If a function such as <TT>+</TT> is given two list arguments, the function applies separately to 
pairs of corresponding items:
<PRE>
   1 2 3 + 10 20 30
11 22 33
</PRE>
If one argument is a list and the other a single item, the single item is replicated as needed: 
<PRE>
   1 + 10 20 30
11 21 31
      
   1 2 3 + 10
11 12 13
</PRE>
Sometimes it is helpful, when we are looking at a new function, to see how a pattern
in a list of arguments gives rise to a pattern in the list of results.
<p>
For example, when <TT>7</TT> is divided by <TT>2</TT> we can say that the quotient is <TT>3</TT> 
and the remainder is <TT>1</TT>.  A built-in J function to compute remainders is <TT>|</TT> (vertical bar),
called the "Residue" function. Patterns in arguments and results are shown by:
<PRE>
   2 | 0 1 2 3 4 5 6 7
0 1 0 1 0 1 0 1
      
   3 | 0 1 2 3 4 5 6 7
0 1 2 0 1 2 0 1
</PRE>
The Residue function is like the familiar "mod" or "modulo" function, except that we 
write <TT>(2 | 7)</TT> rather than <TT>(7 mod 2)</TT>
<A NAME="07"></A>
<A NAME="08"></A>
<H2>1.5  Parentheses</H2>
An expression can contain parentheses, with the usual meaning; what is inside
parentheses is, in effect, a separate little computation. 
<PRE>
   (2+1)*(2+2)
12
</PRE>
Parentheses are not always needed, however. 
Consider the J expression: <TT>3*2+1</TT>. Does it mean <TT>(3*2)+1</TT>, that is, 
<TT>7</TT>, or does it mean <TT>3*(2+1)</TT> that is, <TT>9</TT> ? 
<PRE>
   3 * 2 + 1
9
</PRE>
In school mathematics we learn a convention, or rule, for writing expressions: 
multiplication is to be done before addition. The point
of this rule is that it reduces the number of parentheses we need to write.
<p>
There is in J no rule such as multiplication before addition.  We can always write 
parentheses if we need to. However, there is in J a parenthesis-saving rule, 
as the example
of <TT>3*2+1</TT> above shows.  The rule, is that, in the absence of parentheses,
the right argument of an arithmetic function is everything to the right. 
Thus in the case of <TT>3*2+1</TT>, the right argument of <TT>*</TT> is <TT>2+1</TT>.
Here is another example:
<PRE>
   1 + 3 % 4 
1.75
</PRE>
We can see that <TT>%</TT> is applied before <TT>+</TT>, that is, the rightmost function 
is applied first.
<p>
This "rightmost first" rule is different from, but plays the same role as, 
the common convention of 
"multiplication before addition".  It is merely a convenience: 
 you can ignore it and write parentheses instead. 
Its advantage is that there are, in J, many (something like 100) 
functions for computation with numbers and it would be out of the question
to try to remember which function should be applied before which.  
<p>
In this book, I will on occasion show you an expression having some parentheses 
which, by the 
"rightmost first" rule, would not be needed.  
The aim in doing this is to emphasize the structure
of the expression, by setting off parts of it, so as to make it more readable.
<H2>1.6  Variables and Assignments</H2>
<A NAME="09"></A>
The English-language expression:
<p>
       let x be 100
can be rendered in J as:
<PRE>
   x =: 100
</PRE>
This expression, called an assignment, causes the value <TT>100</TT> to be assigned to the name <TT>x</TT>. 
We say that a variable called <TT>x</TT> is created and takes on the value <TT>100</TT>. 
When a line of input containing only an assignment is entered at the computer, then
nothing is displayed in response.
<p>
A name with an assigned value can be used wherever the value is wanted in 
following computations. 
<PRE>
   x - 1
99
</PRE>
The value in an assignment can itself be computed by an expression:
<PRE>
      y =: x - 1
</PRE>
Thus the variable <TT>y</TT> is used to remember the results of the computation <TT> x-1</TT> . 
To see what value has been assigned to a variable, enter just the name of the 
variable.  
This is an expression like any other, of a particularly simple form: 
<PRE>
   y
99
</PRE>
Assignments can be made repeatedly to the same variable; the new value supersedes the current value:
<PRE>
   z =: 6
   z =: 8
   z
8
</PRE>
The value of a variable can be used in computing a new value for the same variable:
<PRE>
   z =: z + 1
   z
9
</PRE>
It was said above that a value is not displayed when a line consisting of an 
assignment is entered. 
Nevertheless, an assignment is an expression: it does have a value which can take part in a larger
 expression.
<PRE>
   1 + (u =: 99)
100
   u
99
</PRE>
<A NAME="10"></A>
Here are some examples of assignments to show 
how we may choose names for variables:
<PRE>
   x                       =: 0
   X                       =: 1
   K9                      =: 2
   finaltotal              =: 3
   FinalTotal              =: 4
   average_annual_rainfall =: 5
</PRE>
Each name must begin with a letter. It may 
contain only letters (upper-case or lower-case),
numeric digits (<TT>0-9</TT>) or the underscore character
(<TT>_</TT>).  Note that upper-case and lower-case letters
are distinct;
<TT>x</TT> and <TT>X</TT> are the names of distinct variables:
<PRE>
   x
0
   X
1
</PRE>
<A NAME="11"></A>
<H2>1.7  Terminology: Monads and Dyads</H2>
A function taking a single argument on the right is called a monadic function, or a monad for short. 
An example is "Square", <TT>(*:)</TT>.  A function taking two arguments, one on the left and one on the right, 
is called a dyadic function or dyad. An example is <TT>+</TT> .  
<p>
Subtraction and negation provide an example of the same symbol (<TT>-</TT>) denoting two different functions. 
In other words, we can say that <TT>-</TT> has a monadic case (negation)
 and a dyadic case (subtraction). 
 Nearly all the built-in functions of J have both a monadic and a dyadic case.  
For another example, recall that the division function is <TT>%</TT>, or as we now say, the dyadic
 case of <TT>%</TT> .  The monadic case of <TT>%</TT> is the reciprocal function.
<PRE>
   % 4
0.25
</PRE>
<H2>1.8  More Built-In Functions</H2>
<A NAME="12"></A>
The aim in this section is convey a little of the flavour of 
programming in J by looking at a small further selection of 
the many built-in functions which J offers.
<p>
Consider the English-language expression:  
add together the numbers 2, 3, and 4, or more briefly: 
<p>
          add together 2 3 4
<p>
We expect a result of 9. This expression is rendered in J as:
<PRE>
   + / 2 3 4
9
</PRE>
Comparing the English and the J, "add" is conveyed by the <TT>+</TT> and "together" is
conveyed by the <TT>/</TT> . Similarly, the expression:
<p>
          multiply together 2 3 4
<p>
should give a result of 24.  This expression is rendered in J as
<PRE>
   * / 2 3 4
24
</PRE>
We see that <TT>+/2 3 4</TT> means  <TT>2+3+4</TT>  and <TT>*/2 3 4</TT>  means <TT>2*3*4</TT>. 
The symbol  <TT>/</TT>  is called "Insert", 
because in effect it inserts whatever function is on its left 
between each item of the list on its right.
The general scheme is that if <TT>F</TT> is any dyadic function
and <TT>L</TT> is a list of numbers <TT>a, b, c, .... y, z</TT> 
then:
<PRE>
         F / L     means    a F b F .... F y F z 
</PRE>
Moving on to further functions, consider these three propositions:
<p>
<table ALIGN=CENTER BORDER=0>
<tr><td> 2 is larger than 1</td><td>  (which is clearly true)</td></tr>
<tr><td> 2 is equal to 1   </td><td>  (which is false)</td></tr>
<tr><td> 2 is less than 1  </td><td>  (which is false)</td></tr>
</table>
<p>
In J, "true" is represented by the number <TT>1</TT> and and "false" by the number <TT>0</TT>. 
The three propositions are rendered in J as:
<PRE>
   2 > 1
1
   
   2 = 1
0
   
   2 < 1
0
</PRE>
If <TT>x</TT> is a list of numbers, for example:
<PRE>
   x =: 5 4 1 9
</PRE>
we can ask: which numbers in <TT>x</TT> are greater than <TT>2</TT>? 
<PRE>
   x > 2
1 1 0 1
</PRE>
Evidently, the first, second and last, as reported by the 1's in the result
of <TT>x > 2</TT>. 
Is it the case that all numbers in <TT>x</TT> are greater than 2?
<PRE>
   * / x > 2
0
</PRE>
No, because we saw that <TT>x>2</TT> is <TT>1 1 0 1</TT>. 
The presence of any zero ("false") means the the multiplication
(here <TT>1*1*0*1</TT>) cannot produce 1.  
<p>
How many items of <TT>x</TT> are greater than 2?  We add together the 1's in <TT>x>2</TT>:
<PRE>
   + / x > 2
3
</PRE>
How many numbers are there altogether in <TT>x</TT>? We could add together the 1's in <TT>x=x</TT>.
<PRE>
   x
5 4 1 9
   
   x = x
1 1 1 1
   
   +/ x = x
4
</PRE>
<A NAME="13"></A>
but there is a built-in function <TT>#</TT> (called "Tally") 
which gives the length of a list:
<PRE>
   # x
4
</PRE>
<H2>1.9  Side By Side Displays</H2>
When we are typing J expressions into the computer, expressions and results follow each other 
down the screen.
Let me show you the last few lines again:
<PRE>
   x
5 4 1 9
   x = x
1 1 1 1
   +/ x = x
4
   # x
4
</PRE>
Now, sometimes in this book I would like to show you a few lines such as these, 
not one below the other but side by side across the page, like this:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT> x </TT></TD>
<TD><TT>x = x</TT></TD>
<TD><TT>+/ x = x</TT></TD>
<TD><TT># x</TT></TD>
<TR VALIGN=TOP>
<TD><TT>5 4 1 9</TT></TD>
<TD><TT>1 1 1 1</TT></TD>
<TD><TT>4</TT></TD>
<TD><TT>4</TT></TD>
</TABLE>
<p>
This means: at this stage of the proceedings, 
if you type in the expression <TT>x</TT> you 
should see the response <TT>5 4 1 9</TT>. If you now type in <TT>x = x</TT> you should see <TT>1 1 1 1</TT>, and so on.
Side-by-side displays
are not a feature of the J system, but merely figures, or illustrations, in this book. They show
expressions in the first row, and corresponding values below them in the second row.
<p>
When you type in an assignment (<TT>x=:something</TT>), the J system does not show
the value.  Nevertheless, an assignment is an expression and has a value. 
Now and again it might be helpful to see, or to be reminded of, 
the values of our assignments, so
I will often show them in these side-by-side displays.  To illustrate:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>x =: 1 + 2 3 4</TT></TD>
<TD><TT>x = x</TT></TD>
<TD><TT>+/ x = x</TT></TD>
<TD><TT># x</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3 4 5</TT></TD>
<TD><TT>1 1 1</TT></TD>
<TD><TT>3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
Returning now to the built-in functions, suppose we have a list. 
Then we can choose items
from it by taking them in turn and saying 
"yes, yes, no, yes, no" for example.
Our sequence of choices can be represented as
<TT>1 1 0 1 0</TT>. 
Such a list of 0's and 1's is called a bit-string 
(or sometimes bit-list or bit-vector).
<A NAME="14"></A>
There is a function, dyadic <TT>#</TT>, which can take a bit-string (a sequences of choices)
as left argument to select chosen items from the right argument.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>y =: 6 7 8 9 10</TT></TD>
<TD><TT>1 1 0 1 0 # y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>6 7 8 9 10</TT></TD>
<TD><TT>6 7 9</TT></TD>
</TABLE>
<p>
We can select from <TT>y</TT> just those items which
satisfy some condition, such as: those which are
greater than <TT>7</TT>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT> y </TT></TD>
<TD><TT>y > 7</TT></TD>
<TD><TT>(y > 7) # y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>6 7 8 9 10</TT></TD>
<TD><TT>0 0 1 1 1</TT></TD>
<TD><TT>8 9 10</TT></TD>
</TABLE>
<p>
<A NAME="15"></A>
<H2>1.10  Comments</H2>
In a line of J, the symbol <TT>NB.</TT> (capital N, capital B dot) introduces a comment.
Anything following <TT>NB.</TT> to the end of the line is not evaluated. 
For example
<PRE>
   NB.   this is a whole line of annotation
   
   6 + 6   NB. ought to produce 12
12
</PRE>
<A NAME="16"></A>
<A NAME="17"></A>
<H2>1.11  Naming Scheme for Built-In Functions</H2>
Each built-in function of J has an informal and a formal name.
For example, the function with the formal name <TT>+</TT> has the informal name
of "Plus".  Further, we have seen that there may be monadic and dyadic cases
, so that the formal name <TT>-</TT> corresponds to the informal names
"Negate" and "Minus".
<p>
The informal names are, in effect, short descriptions, usually
one word.  They are not recognised by the J software, that is, 
expressions in J use always the formal names.   In this book, the informal
names will be quoted, thus: "Minus".
<p>
Nearly all the built-in functions of J have formal names with one character or 
two characters. 
Examples are the <TT>*</TT> and <TT>*:</TT> functions.  
The second character is always either <TT>:</TT> (colon) or <TT>.</TT> 
(dot, full stop, or period).  
<p>
A two-character name is meant to suggest some relationship to a basic one-character 
function. 
Thus "Square" (<TT>*:</TT>) is related to "Times" (<TT>*</TT>).
<p>
Hence the built-in J functions tend to come in families of up to 6 related 
functions. 
There are the monadic and dyadic cases, and for each case there are the basic, 
the colon and dot variants. 
This will be illustrated for the <TT>></TT> family.
<p>
Dyadic <TT>></TT> we have already met as "Larger Than".
<p>
Monadic <TT>></TT> we will come back to later.
<p>
Monadic <TT>>.</TT> rounds its argument up to an integer. 
Note that rounding is always upwards as opposed to rounding to the nearest integer. 
Hence the name: "Ceiling"
<PRE>
   >. _1.7 1 1.7
_1 1 2
</PRE>
Dyadic <TT>>.</TT> selects the larger of its two arguments
<PRE>
   3 >. 1 3 5 
3 3 5
</PRE>
We can find the largest number in a list by inserting "Larger Of" between 
the items, using <TT>/</TT>.
For example, the largest number in the list <TT>1 6 5</TT> is found
by evaluating <TT>(>. / 1 6 5)</TT>.  The next few lines are meant to convince you
that this should give <TT>6</TT>. The comments show why each line should give
the same result as the previous.
<PRE>
   >. / 1 6 5
6
   1 >. 6 >. 5      NB. by the meaning of /
6
   1 >. (6 >. 5)    NB. by rightmost-first rule
6
   1 >. (6)         NB. by the meaning of >.
6
   1 >. 6           NB. by the meaning of ()
6
   6                NB. by the meaning of >.
6
   
</PRE>
Monadic <TT>>:</TT> is informally called "Increment". It adds 1 to its argument:
<PRE>
   >: _2 3 5 6.3
_1 4 6 7.3
</PRE>
Dyadic <TT>>:</TT> is "Larger or Equal"
<PRE>
   3 >: 1 3 5 
1 1 0
</PRE>
This is the end of Chapter 1.
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="02.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version  j701/beta/2010-11-24/22:45. 
 This chapter last updated 22 Dec 2010<BR> 
Copyright &copy; Roger Stokes 2010. 
 This material may be freely reproduced, 
provided that this copyright notice is also reproduced. 
</FONT> 
 <!--bottom jump start--><hr><a href="02.htm">&gt;&gt;</a>&nbsp;
<a href="contents.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
