<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
       
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=UTF-8"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)">   
  <TITLE>   Ch 7: Ranks</TITLE> 
  <STYLE TYPE="text/css"> 
    TT  {font-size: 12pt; COLOR: BLUE} 
    PRE {font-size: 12pt; COLOR: BLUE} 
                                    
    table.jtable {                  
         border-width: thin;        
         border-spacing: 2px;       
         border-style: solid;       
         border-color: gray;        
         border-collapse: collapse; 
         background-color: white;   
     }                              
     table.jtable td {              
         border-width: 1px;         
         padding: 10px;             
         border-style: solid;       
         border-color: gray;        
         background-color: white;   
     }                              
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="08.htm">&gt;&gt;</a>&nbsp;
<a href="06.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <H1>Chapter 7: Ranks</H1>
Recall that the rank of an array is its number of dimensions. A scalar is of rank 0, 
a list of numbers is of rank 1, a table of rank 2, and so on.
<p>
The subject of this chapter is how the ranks of arguments are taken into account 
when verbs are applied. 
<A NAME="01"></A>
<A NAME="02"></A>
<H2>7.1  The Rank Conjunction</H2>
First, some terminology. An array can be regarded as being divided into "cells" in 
several different ways. Thus, a table such as 
<PRE>
<TT>   M =: 2 3 $ 'abcdef'</TT>
<TT>   M</TT>
<TT>abc</TT>
<TT>def</TT>
</PRE>
may be regarded as being divided into 6 cells each of rank 0, or divided into 2 cells each of rank 1,
or as being a single cell of rank 2.  A cell of rank <TT>k</TT> will be called a <TT>k</TT>-cell.
<H3>7.1.1  Monadic Verbs</H3>
The box verb (monadic <TT>&lt;</TT>) applies just once to the whole of the argument, to yield a single box,
whatever the rank of the argument.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>L =: 2 3 4 </TT></TD>
<TD><TT>< L </TT></TD>
<TD><TT>M </TT></TD>
<TD><TT> < M</TT></TD>
<TR VALIGN=TOP>
<TD><TT>2 3 4</TT></TD>
<TD><TT>+-----+<BR>
|2 3 4|<BR>
+-----+</TT></TD>
<TD><TT>abc<BR>
def</TT></TD>
<TD><TT>+---+<BR>
|abc|<BR>
|def|<BR>
+---+</TT></TD>
</TABLE>
<p>
However, we may choose to box each cell separately.  There is a conjunction <TT>"</TT> (double-quote, called "Rank"),
we write <TT>(&lt; " 0)</TT> to box each scalar, that is, each 0-cell.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>M </TT></TD>
<TD><TT>< " 0 M </TT></TD>
<TD><TT>< " 1 M </TT></TD>
<TD><TT>< " 2 M</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abc<BR>
def</TT></TD>
<TD><TT>+-+-+-+<BR>
|a|b|c|<BR>
+-+-+-+<BR>
|d|e|f|<BR>
+-+-+-+</TT></TD>
<TD><TT>+---+---+<BR>
|abc|def|<BR>
+---+---+</TT></TD>
<TD><TT>+---+<BR>
|abc|<BR>
|def|<BR>
+---+</TT></TD>
</TABLE>
<p>
The general scheme is that in the expression <TT>(u " k y)</TT>, the monadic verb <TT>u</TT> is applied
separately to each <TT>k</TT>-cell of <TT>y</TT>.
<p>
We can define a verb to exhibit the k-cells of an array, each cell in its own box::
<PRE>
<TT>   cells  =: 4 : '< " x y'</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>M   </TT></TD>
<TD><TT>0 cells M</TT></TD>
<TD><TT>1 cells M</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abc<BR>
def</TT></TD>
<TD><TT>+-+-+-+<BR>
|a|b|c|<BR>
+-+-+-+<BR>
|d|e|f|<BR>
+-+-+-+</TT></TD>
<TD><TT>+---+---+<BR>
|abc|def|<BR>
+---+---+</TT></TD>
</TABLE>
<p>
<H3>7.1.2  Dyadic Verbs</H3>
Given a table, how do we multiply each row by a separate number?
We multiply with the verb <TT>(* " 1 0)</TT> which can be understood as "multiply 1-cells by 0-cells",
For example,
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>X =: 2 2 $ 0 1 2 3</TT></TD>
<TD><TT>Y =: 2 3</TT></TD>
<TD><TT>X (* " 1 0) Y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0 1<BR>
2 3</TT></TD>
<TD><TT>2 3</TT></TD>
<TD><TT>0 2<BR>
6 9</TT></TD>
</TABLE>
<p>
The general scheme is that the expression 
<PRE>
<TT>                X (u " (L,R)) Y </TT>
</PRE>
means: apply dyad <TT>u</TT> separately to each pair consisting 
of an L-cell from <TT>X</TT> and the corresponding
R-cell from <TT>Y</TT>.
To multiply each column by a separate number, we combine each 1-cell of <TT>x</TT> with the solitary 1-cell of <TT>y</TT>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>X</TT></TD>
<TD><TT>Y</TT></TD>
<TD><TT>X (* " 1 1) Y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0 1<BR>
2 3</TT></TD>
<TD><TT>2 3</TT></TD>
<TD><TT>0 3<BR>
4 9</TT></TD>
</TABLE>
<p>
<A NAME="03"></A>
<H2>7.2  Intrinsic Ranks</H2>
In J, every verb has what might be called a natural, or intrinsic, rank for its argument(s). 
Here are some examples to illustrate. For the first example, consider:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>  *: 2 </TT></TD>
<TD><TT>  *: 2 3 4 </TT></TD>
<TR VALIGN=TOP>
<TD><TT>4</TT></TD>
<TD><TT>4 9 16</TT></TD>
</TABLE>
<p>
Here, the arithmetic function "square" naturally 
applies to a single number(a 0-cell).
When a rank-1 array (a list) is supplied as argument, 
the function is applied separately
to each 0-cell of the argument. 
In other words, the natural rank of (monadic) <TT>*:</TT> is 0.
<A NAME="04"></A>
For another example, there is a built-in verb <TT>#.</TT> (hash dot called
"Base Two"). Its argument is a bit-string (a list) representing
a number in binary notation, and it computes the value
of that number. For example, <TT>1 0 1</TT> in binary is <TT>5</TT>
<PRE>
<TT>   #. 1 0 1</TT>
<TT>5</TT>
</PRE>
The verb <TT>#.</TT> applies naturally to a list of bits, 
that is, to a 1-cell. When a rank-2 array (a table)
is supplied as argument, the verb is applied separately
to each 1-cell, that is, to each row of the table.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>t =: 3 3 $ 1 0 1 0 0 1  0 1 1</TT></TD>
<TD><TT>#. t</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 0 1<BR>
0 0 1<BR>
0 1 1</TT></TD>
<TD><TT>5 1 3</TT></TD>
</TABLE>
<p>
Thus the natural rank of monadic <TT>#.</TT> is <TT>1</TT>.
<p>
For a third example, as we have already seen, the monadic case of <TT>&lt;</TT> applies just once to the whole of its argument, whatever the rank
of its argument.  The natural rank of <TT>&lt;</TT> is thus an indefinitely large number, that is, infinity, 
denoted by _  . 
These examples showed monadic verbs. In the same way every dyadic verb will have
two natural ranks, one for each argument. For example, the natural ranks of dyadic <TT>+</TT> are <TT>0 0</TT>
since <TT>+</TT> takes a number (rank-0) on left and right. 
<A NAME="05"></A>
In general, a verb has both a monadic and a dyadic case, 
and hence altogether 3 ranks,
called its "intrinsic ranks". 
<p>
The intrinsic ranks of a verb are shown with the aid of a built-in adverb <TT>b.</TT> (lowercase b dot, called "Basic Characteristics").
For any verb <TT>u</TT>, the expression <TT>u b. 0</TT>
gives the ranks in the order  monadic, left, right. 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> *: b. 0</TT></TD>
<TD><TT>#. b. 0</TT></TD>
<TD><TT> < b. 0</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0 0 0</TT></TD>
<TD><TT>1 1 1</TT></TD>
<TD><TT>_ 0 0</TT></TD>
</TABLE>
<p>
For convenience, the rank conjunction <TT>"</TT> can accept a right argument 
consisting of a single rank (for a monad) or two ranks
(for a dyad) or three ranks (for an ambivalent verb).
<p>
One rank or two are automatically expanded to three as shown by:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>(<"1) b. 0</TT></TD>
<TD><TT>(<"1 2) b. 0</TT></TD>
<TD><TT>(<"1 2 3) b. 0</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 1 1</TT></TD>
<TD><TT>2 1 2</TT></TD>
<TD><TT>1 2 3</TT></TD>
</TABLE>
<p>
<A NAME="06"></A>
<H2>7.3  Frames</H2>
Suppose <TT>u</TT> is to be a verb which sums all the numbers in a table,
by summing the columns and then summing the column-sums.
We specify that <TT>u</TT> is to have monadic rank 2.
<PRE>
<TT>   u =: (+/) @: (+/) " 2</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>w =: 4 5 $ 1</TT></TD>
<TD><TT>u w</TT></TD>
<TD><TT>u b. 0</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 1 1 1 1<BR>
1 1 1 1 1<BR>
1 1 1 1 1<BR>
1 1 1 1 1</TT></TD>
<TD><TT>20</TT></TD>
<TD><TT>2 2 2</TT></TD>
</TABLE>
<p>
Suppose a four-dimensional array <TT>A</TT> has shape <TT>2 3 4 5</TT>.  
<PRE>
<TT>   A =: 2 3 4 5 $  1  </TT>
</PRE>
We can regard <TT>A</TT> as a 2-by-3 array of 2-cells, 
each cell being 4-by-5. Now consider computing <TT>(u A)</TT>. The verb <TT>u</TT>, being of rank 2, applies separately
to each 2-cell, giving us a 2-by-3 array of results.
<p>
Each result is a scalar (because <TT>u</TT> produces scalars), and hence the overall result will 
be 2 by 3 scalars.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>u A</TT></TD>
<TD><TT>$ u A</TT></TD>
<TR VALIGN=TOP>
<TD><TT>20 20 20<BR>
20 20 20</TT></TD>
<TD><TT>2 3</TT></TD>
</TABLE>
<p>
The shape <TT>2 3</TT> is called the "frame" of <TT>A</TT> with respect to its 2-cells, 
or its 2-frame for short. 
The k-frame of <TT>A</TT> is given by dropping the last <TT>k</TT> dimensions from the shape of <TT>A</TT>, 
or equivalently, as the shape of the array of k-cells of <TT>A</TT>.
<PRE>
<TT>   frame =: 4 : '$ x cells y'</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> $ A</TT></TD>
<TD><TT> 2 frame A</TT></TD>
<TR VALIGN=TOP>
<TD><TT>2 3 4 5</TT></TD>
<TD><TT>2 3</TT></TD>
</TABLE>
<p>
In general, suppose that verb <TT>u</TT> has rank <TT>k</TT>, and from each k-cell it computes a cell
of shape <TT>s</TT>. (The same <TT>s</TT>, we are supposing, for each cell). 
Then the shape of the overall result <TT>(u A)</TT>is:  
the k-frame of <TT>A</TT> followed by the shape <TT>s</TT>.
<p>
To demonstrate that this is the case, we can 
find <TT>k</TT> from <TT>u</TT>, as the first (monadic) rank of <TT>u</TT>:
<PRE>
<TT>   k =: 0 { u b. 0</TT>
</PRE>
We can find the shape <TT>s</TT> by applying <TT>u</TT> to a typical k-cell of <TT>A</TT>, say the first.
<PRE>
<TT>   s =: $ u  0 { > (, k cells A)</TT>
</PRE>
In this example, the shape <TT>s</TT> is an empty list, because
<TT>u</TT> produces scalars.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>k</TT></TD>
<TD><TT>s</TT></TD>
<TD><TT>kfr =: k frame A</TT></TD>
<TD><TT>kfr, s</TT></TD>
<TD><TT> $ u A</TT></TD>
<TR VALIGN=TOP>
<TD><TT>2</TT></TD>
<TD><TT>&nbsp;</TT></TD>
<TD><TT>2 3</TT></TD>
<TD><TT>2 3</TT></TD>
<TD><TT>2 3</TT></TD>
</TABLE>
<p>
Here we supposed that verb <TT>u</TT> gives the same-shaped result for each cell
in its argument.  
This is not necessarily the case - 
see the section on "Reassembly of Results" below.
<A NAME="07"></A>
<H3>7.3.1  Agreement</H3>
A dyad has two intrinsic ranks, one for the left argument, one for the right. 
Suppose these ranks are <TT>L</TT> and <TT>R</TT> for a verb <TT>u</TT>.
<p>
When <TT>u</TT> is applied to arguments <TT>X</TT> and <TT>Y</TT>, 
<TT>u</TT> is applied separately to each pair consisting of an L-cell from <TT>x</TT> and the corresponding
R-cell from <TT>Y</TT>.
For example, suppose dyad <TT>u</TT> has ranks <TT>(0 1)</TT>. It combines a 0-cell from <TT>X</TT> and a 
1-cell from <TT>Y</TT>. 
<PRE>
<TT>   u =: < @ ,  " 0 1</TT>
<TT>   X =: 2  $ 'ab'</TT>
<TT>   Y =: 2 3 $ 'ABCDEF'</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>X </TT></TD>
<TD><TT>Y</TT></TD>
<TD><TT>X u Y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>ab</TT></TD>
<TD><TT>ABC<BR>
DEF</TT></TD>
<TD><TT>+----+----+<BR>
|aABC|bDEF|<BR>
+----+----+</TT></TD>
</TABLE>
<p>
Notice that here the 0-frame of <TT>X</TT> is the same as the 1-frame of <TT>Y</TT>. 
These two frames are said to agree.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>X</TT></TD>
<TD><TT>Y</TT></TD>
<TD><TT>$X</TT></TD>
<TD><TT>$Y</TT></TD>
<TD><TT>0 frame X</TT></TD>
<TD><TT>1 frame Y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>ab</TT></TD>
<TD><TT>ABC<BR>
DEF</TT></TD>
<TD><TT>2</TT></TD>
<TD><TT>2 3</TT></TD>
<TD><TT>2</TT></TD>
<TD><TT>2</TT></TD>
</TABLE>
<p>
What if these two frames are not the same? They can still agree if one is 
a prefix of the other. That is, if one frame is the vector <TT>f</TT>, 
and the other frame can be written as <TT>(f,g)</TT> for some vector <TT>g</TT>.
Here is an example. With
<PRE>
<TT>   X =: 2 3 2 $ i. 12</TT>
<TT>   Y =: 2     $ 0 1</TT>
</PRE>
and a dyad such as <TT>+</TT>, with ranks <TT>(0 0)</TT>,  we are interested in the 0-frame of <TT>X</TT>
and the 0-frame of <TT>Y</TT>.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>X</TT></TD>
<TD><TT>Y</TT></TD>
<TD><TT>0 frame X</TT></TD>
<TD><TT>0 frame Y</TT></TD>
<TD><TT>X+Y</TT></TD>
<TR VALIGN=TOP>
<TD><TT> 0&nbsp;&nbsp;1<BR>
 2&nbsp;&nbsp;3<BR>
 4&nbsp;&nbsp;5<BR>
<BR>
 6&nbsp;&nbsp;7<BR>
 8&nbsp;&nbsp;9<BR>
10 11</TT></TD>
<TD><TT>0 1</TT></TD>
<TD><TT>2 3 2</TT></TD>
<TD><TT>2</TT></TD>
<TD><TT> 0&nbsp;&nbsp;1<BR>
 2&nbsp;&nbsp;3<BR>
 4&nbsp;&nbsp;5<BR>
<BR>
 7&nbsp;&nbsp;8<BR>
 9 10<BR>
11 12</TT></TD>
</TABLE>
<p>
We see that the two frames are <TT>2</TT> and <TT>2 3 2</TT> and their difference <TT>g</TT> is therefore <TT>3 2</TT>.
<p>
Here <TT>Y</TT> has the shorter frame.  Then each cell of <TT>Y</TT> corresponds to, 
not just a single cell of <TT>X</TT>, but rather a <TT>3 2</TT>-shaped array of cells.
<p>
In such a case, a cell of <TT>Y</TT> is automatically replicated to form a <TT>3 2</TT>-shaped array of identical 
cells. In effect the shorter frame is made up to length,  so as to agree with the longer. 
Here is an example. 
The expression <TT>(3 2 &amp; $) " 0 Y</TT> means " a 3 by 2 replication of each 0-cell of <TT>Y</TT>". 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>X</TT></TD>
<TD><TT>Y</TT></TD>
<TD><TT>YYY =: (3 2&amp;$)"0 Y</TT></TD>
<TD><TT>X + YYY </TT></TD>
<TD><TT>X + Y </TT></TD>
<TR VALIGN=TOP>
<TD><TT> 0&nbsp;&nbsp;1<BR>
 2&nbsp;&nbsp;3<BR>
 4&nbsp;&nbsp;5<BR>
<BR>
 6&nbsp;&nbsp;7<BR>
 8&nbsp;&nbsp;9<BR>
10 11</TT></TD>
<TD><TT>0 1</TT></TD>
<TD><TT>0 0<BR>
0 0<BR>
0 0<BR>
<BR>
1 1<BR>
1 1<BR>
1 1</TT></TD>
<TD><TT> 0&nbsp;&nbsp;1<BR>
 2&nbsp;&nbsp;3<BR>
 4&nbsp;&nbsp;5<BR>
<BR>
 7&nbsp;&nbsp;8<BR>
 9 10<BR>
11 12</TT></TD>
<TD><TT> 0&nbsp;&nbsp;1<BR>
 2&nbsp;&nbsp;3<BR>
 4&nbsp;&nbsp;5<BR>
<BR>
 7&nbsp;&nbsp;8<BR>
 9 10<BR>
11 12</TT></TD>
</TABLE>
<p>
What we have seen is the way in which a low-rank argument is automatically
replicated to agree with a high-rank argument, which is possible
provided one frame is a prefix of the other. Otherwise
there will be a length error. 
The frames in question are determined by the intrinsic dyadic ranks of the verb.
<p>
The general scheme for automatically replicating one argument is: for arguments <TT>x</TT> and <TT>y</TT>,  
if <TT>u</TT> is a dyad with ranks <TT>L</TT> and <TT>R</TT>, and 
the L-frame of x is <TT>f,g</TT> and the R-frame of <TT>y</TT> is <TT>f</TT> (supposing <TT>y</TT> to have the shorter frame)
<p>
then <TT>(x u y)</TT> is computed as <TT>(x u (g&amp; $)"R y)</TT>
<H2>7.4  Reassembly of Results</H2>
We now look briefly at how the results of the computations on the separate cells are reassembled into 
the overall result. 
<p>
Suppose that the frame of application of a verb to its argument(s) is <TT>f</TT>, say. 
Then we can visualise each individual result as being stuffed into its place in 
the <TT>f</TT>-shaped framework
 of results. 
If each individual result-cell has the same shape, <TT>s</TT> say, then the shape of the 
overall result will be <TT>(f,s)</TT>. 
However, it is not necessarily the case that all the individual results are the same shape. For example,
consider the following verb <TT>R</TT>, which takes a scalar <TT>y</TT> and produces a rank-<TT>y</TT> result.
<PRE>
<TT>   R =: (3 : '(y $ y) $ y') " 0</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> R 1 </TT></TD>
<TD><TT> R 2 </TT></TD>
<TR VALIGN=TOP>
<TD><TT>1</TT></TD>
<TD><TT>2 2<BR>
2 2</TT></TD>
</TABLE>
<p>
When <TT>R</TT> is applied to an array, the overall result may be explained by envisaging each separate result
 being stufffed into 
its appropriate box in an <TT>f</TT>-shaped array of boxes.  Then everything is unboxed all together.
Note that it is the unboxing which supplies padding and extra dimensions if necessary to bring
all cells to the same shape.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> (R 1); (R 2)</TT></TD>
<TD><TT> > (R 1) ; (R 2) </TT></TD>
<TD><TT> R 1 2</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+---+<BR>
|1|2 2|<BR>
| |2 2|<BR>
+-+---+</TT></TD>
<TD><TT>1 0<BR>
0 0<BR>
<BR>
2 2<BR>
2 2</TT></TD>
<TD><TT>1 0<BR>
0 0<BR>
<BR>
2 2<BR>
2 2</TT></TD>
</TABLE>
<p>
Consequently the shape of the overall result is given by <TT>(f, m</TT>) where <TT>m</TT> is the shape of the largest
of the individual results.
<H2>7.5  More on the Rank Conjunction</H2>
<H3>7.5.1  Relative Cell Rank</H3>
The rank conjunction will accept a negative number for a rank.  Thus the expression <TT>(u " _1 y)</TT> means that
u is to be applied to cells of rank 1 less than the rank of <TT>y</TT>, that is, to the items of <TT>y</TT>.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> X </TT></TD>
<TD><TT> $ X</TT></TD>
<TD><TT> < " _1 X</TT></TD>
<TD><TT> < " _2 X</TT></TD>
<TR VALIGN=TOP>
<TD><TT> 0&nbsp;&nbsp;1<BR>
 2&nbsp;&nbsp;3<BR>
 4&nbsp;&nbsp;5<BR>
<BR>
 6&nbsp;&nbsp;7<BR>
 8&nbsp;&nbsp;9<BR>
10 11</TT></TD>
<TD><TT>2 3 2</TT></TD>
<TD><TT>+---+-----+<BR>
|0 1| 6&nbsp;&nbsp;7|<BR>
|2 3| 8&nbsp;&nbsp;9|<BR>
|4 5|10 11|<BR>
+---+-----+</TT></TD>
<TD><TT>+---+---+-----+<BR>
|0 1|2 3|4 5&nbsp;&nbsp;|<BR>
+---+---+-----+<BR>
|6 7|8 9|10 11|<BR>
+---+---+-----+</TT></TD>
</TABLE>
<p>
<H3>7.5.2  User-Defined Verbs</H3>
The rank conjunction <TT>"</TT> has a special significance for user-defined verbs.  The significance is that 
it allows us to define a verb considering only its "natural" rank: we ignore the possibility that
it may be applied to higher-rank arguments. In other words, we can write a definition assuming the verb
will be applied only to arguments of the natural rank. Afterwards, we can then put the finishing touch to 
our definition with the rank conjunction.  Here are two examples.
<p>
The factorial of a number <TT>n</TT> is the product of the numbers from <TT>1</TT> to <TT>n</TT>. Hence (disregarding for the
 moment J's built-in verb <TT>!</TT>) we could define factorial straightforwardly as
<PRE>
<TT>      f =: */ @: >: @: i.</TT>
</PRE>
because <TT>i. n</TT> gives the numbers <TT>0 1 ... (n-1)</TT>, and <TT>>: i. n</TT> gives <TT>1 2 ... n</TT>. We see:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>f 2 </TT></TD>
<TD><TT>f 3 </TT></TD>
<TD><TT>f 4</TT></TD>
<TD><TT>f 5</TT></TD>
<TR VALIGN=TOP>
<TD><TT>2</TT></TD>
<TD><TT>6</TT></TD>
<TD><TT>24</TT></TD>
<TD><TT>120</TT></TD>
</TABLE>
<p>
Will <TT>f</TT> work as expected with a vector argument? 
<PRE>
<TT>   f 2 3</TT>
<TT>4 10 18</TT>
</PRE>
Evidently not. The reason is that <TT>(f 2 3)</TT> begins by computing <TT>(i. 2 3)</TT>, and <TT>(i. 2 3)</TT> does 
NOT mean <TT>(i. 2)</TT> followed by <TT>(i. 3)</TT>. 
The remedy is to specify that <TT>f</TT> applies separately to each scalar (rank-0 cell) in its argument: 
<PRE>
<TT>   f  =: (*/ @: (>: @: i.)) " 0</TT>
<TT>   </TT>
<TT>   f 2 3 4 5</TT>
<TT>2 6 24 120</TT>
</PRE>
For a second example of the significance of the rank-conjunction we look at explicitly defined verbs.
The point being made here is, to repeat,  that it is useful to be able to write a definition on the 
assumption that the argument is a certain rank say, a scalar, and only later deal with extending to arguments of any
rank.
<p>
<p>
Note that for any explicit verb, its intrinsic ranks are always assumed to be 
infinite.  This is because the 
J system does not look at the definition until the verb is executed.  
Since the rank is infinite, the whole argument of an explicit verb is always 
treated as a single
cell (or pair of cells for a dyad) and there is no automatic extension to deal 
with multiple cells.
<p>
For example, the absolute value of a number can be computed by the verb:
<PRE>
<TT>   abs =: 3 : 'if. y < 0 do. - y else. y end.'</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>abs 3</TT></TD>
<TD><TT>abs _3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
Since <TT>abs</TT> is explicitly defined, we see that its monadic (first) rank
is infinite:
<PRE>
<TT>   abs b. 0</TT>
<TT>_ _ _</TT>
</PRE>
This means that if <TT>abs</TT> is applied to an array <TT>y</TT>, of any rank, 
it will be applied just once, and we can see
from the definition that the result will be <TT>y</TT> or <TT>-y</TT>.  
There are no other possibilities.  
<p>
It is indeed the case that if <TT>y</TT> is a vector then  <TT>(y &lt; 0)</TT> 
yields a vector result, 
but the expression <TT>(if. y &lt; 0)</TT> makes ONE decision. 
(This decision will in fact be based, not on the whole of <TT>y &lt; 0</TT> 
but only on its first element. 
See <A HREF="12.htm#aaa"> Chapter 12 </A>for more details). 
Hence if the argument contains both positives and negatives, 
this decision must be wrong for some parts of the argument.
<PRE>
<TT>   abs 3 _3</TT>
<TT>3 _3</TT>
</PRE>
Hence with <TT>abs</TT> defined as above, it is important to say that it applies
separately to each scalar in its argument.
Thus a  better definition for <TT>abs</TT> would be:
<PRE>
<TT>   abs =:(3 : 'if. y < 0 do. -y else. y end.') " 0</TT>
<TT>   </TT>
<TT>   abs 3 _3</TT>
<TT>3 3</TT>
<TT>   </TT>
</PRE>
This brings us to the end of Chapter 7.
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="08.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version 701. 
 This chapter last updated 29 Jul 2012<BR> 
Copyright &copy; Roger Stokes 2012. 
 This material may be freely reproduced, 
provided that this copyright notice is also reproduced. 
</FONT> 
 <!--bottom jump start--><hr><a href="08.htm">&gt;&gt;</a>&nbsp;
<a href="06.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
