<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
       
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=UTF-8"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)">   
  <TITLE>   Ch 9: Trains of Verbs</TITLE> 
  <STYLE TYPE="text/css"> 
    TT  {font-size: 12pt; COLOR: BLUE} 
    PRE {font-size: 12pt; COLOR: BLUE} 
                                    
    table.jtable {                  
         border-width: thin;        
         border-spacing: 2px;       
         border-style: solid;       
         border-color: gray;        
         border-collapse: collapse; 
         background-color: white;   
     }                              
     table.jtable td {              
         border-width: 1px;         
         padding: 10px;             
         border-style: solid;       
         border-color: gray;        
         background-color: white;   
     }                              
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="10.htm">&gt;&gt;</a>&nbsp;
<a href="08.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <A NAME="01"></A>
<H1>Chapter 9: Trains of Verbs</H1>
In this chapter we continue the topic of trains of verbs begun in <A HREF="03.htm">Chapter 03</A>. 
Recall that a train is an isolated sequence of functions, written one after the 
other, such as <TT>(+ * -)</TT>. 
<A NAME="02"></A>
<A NAME="03"></A>
<H2>9.1  Review: Monadic Hooks and Forks</H2>
Recall from <A HREF="03.htm">Chapter 03</A> the monadic hook, with the scheme:
<PRE>
<TT>               (f g) y   means    y f (g y)</TT>
</PRE>
Here is an example, as a brief reminder: a whole number
is equal to its floor:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y =: 2.1 3</TT></TD>
<TD><TT><. y</TT></TD>
<TD><TT>y = <. y</TT></TD>
<TD><TT>(= <.) y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>2.1 3</TT></TD>
<TD><TT>2 3</TT></TD>
<TD><TT>0 1</TT></TD>
<TD><TT>0 1</TT></TD>
</TABLE>
<p>
Recall also the monadic fork, with the scheme:
<PRE>
<TT>               (f g h) y   means    (f y) g (h y)</TT>
</PRE>
For example: the mean of a list of numbers is the sum divided by the number-of-items:
<PRE>
<TT>   sum  =: +/</TT>
<TT>   mean =: sum % #</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y =: 1 2 3 4</TT></TD>
<TD><TT>sum y</TT></TD>
<TD><TT># y</TT></TD>
<TD><TT>(sum y) % (# y)</TT></TD>
<TD><TT>mean y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 2 3 4</TT></TD>
<TD><TT>10</TT></TD>
<TD><TT>4</TT></TD>
<TD><TT>2.5</TT></TD>
<TD><TT>2.5</TT></TD>
</TABLE>
<p>
Now we look at some further variations.
<A NAME="04"></A>
<H2>9.2  Dyadic Hooks</H2>
3 hours and 15 minutes is 3.25 hours. A verb <TT>hr</TT>, such that <TT>(3 hr 15)</TT> is <TT>3.25</TT>,  
can be written as
a hook. We want <TT>x hr y</TT> to be <TT>x + (y%60)</TT> and so the hook is:
<PRE>
<TT>   hr =: + (%&amp;60)</TT>
<TT>   3 hr 15</TT>
<TT>3.25</TT>
</PRE>
The scheme for dyadic hook is:
<PRE>
<TT>           x (f g) y   means   x f (g y)</TT>
</PRE>
with the diagram:
<p>
<IMG SRC="diag07.gif" ALT="diagram 07" WIDTH=246 HEIGHT=225>
<A NAME="05"></A>
<H2>9.3  Dyadic Forks</H2>
Suppose we say that the expression "10 plus or minus 2" is to mean the list <TT>12 8</TT>.
A verb to compute <TT>x</TT> plus-or-minus <TT>y</TT> can be written as the fork <TT>(+,-)</TT>:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> (10+2) , (10-2)</TT></TD>
<TD><TT> 10 (+,-) 2</TT></TD>
<TR VALIGN=TOP>
<TD><TT>12 8</TT></TD>
<TD><TT>12 8</TT></TD>
</TABLE>
<p>
The scheme for a dyadic fork is:
<PRE>
<TT>              x (f g h) y   means    (x f y) g (x h y)</TT>
</PRE>
Here is a diagram for this scheme:
<p>
<IMG SRC="diag09.gif" ALT="diagram 09" WIDTH=363 HEIGHT=242>
<H2>9.4  Review</H2>
There are four basic schemes for trains of verbs. 
<PRE>
<TT>           (f g h) y    =    (f y) g (h y)       monadic fork </TT>
</PRE>
<PRE>
<TT>         x (f g h) y    =  (x f y) g (x h y)     dyadic  fork</TT>
</PRE>
<PRE>
<TT>           (f g)   y    =       y  f (g y)       monadic hook </TT>
</PRE>
<PRE>
<TT>         x (f g)   y    =       x  f (g y)       dyadic  hook</TT>
</PRE>
<H2>9.5  Longer Trains</H2>
Now we begin to look at ways to broaden the class of 
functions which can be defined as trains.
In general a train of any length can be analysed into hooks and forks.  
For a train of 4 verbs, <TT>e f g h</TT>,  the scheme is that
<PRE>
<TT>                    e f g h    means   e (f g h)</TT>
</PRE>
that is, a 4-train <TT>(e f g h)</TT> is a hook, where the first verb is <TT>e</TT> and the 
second is the fork <TT>(f g h)</TT>.  
For example, Suppose that <TT>y</TT> is a list of numbers: 
<PRE>
<TT>   y =: 2 3 4</TT>
</PRE>
Then the "norm" of <TT>y</TT> is defined as <TT>(y - mean y)</TT>, where <TT>mean</TT> is defined above as 
<TT>(sum % #)</TT>. 
We see that the following expressions for the norm of <TT>y</TT> are all equivalent:
<PRE>
<TT>   y - mean y</TT>
<TT>_1 0 1</TT>
<TT>   </TT>
<TT>   (- mean) y       NB. as a hook</TT>
<TT>_1 0 1</TT>
<TT>   </TT>
<TT>   (- (sum % #)) y  NB. by definition of mean</TT>
<TT>_1 0 1</TT>
<TT>   </TT>
<TT>   (- sum % #) y    NB. as 4-train</TT>
<TT>_1 0 1</TT>
</PRE>
A certain amount of artistic judgement is called for with long trains. This last
formulation as the 4-train <TT>(- sum % #)</TT> does not bring out as clearly as it might 
that the key idea is subtracting the mean.  The formulation <TT>( - mean)</TT> is clearer. 
<p>
For a train of 5 verbs <TT>d e f g h</TT> the scheme is:
<PRE>
<TT>                 d e f g h   means  d e (f g h)</TT>
</PRE>
That is, a 5-train <TT>(d e f g h)</TT> is a fork with first verb <TT>d</TT>, second verb <TT>e</TT> and 
third verb the fork <TT>(f g h)</TT>
For example, if we write a calendar date in the form day month year:
<PRE>
<TT>   date =: 28 2 1999</TT>
</PRE>
and define verbs to extract the day month and year separately:
<PRE>
<TT>   Da =: 0 &amp; {</TT>
<TT>   Mo =: 1 &amp; {</TT>
<TT>   Yr =: 2 &amp; {</TT>
</PRE>
the date can be presented in different ways by  5-trains:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>(Da , Mo , Yr) date </TT></TD>
<TD><TT>(Mo ; Da ; Yr) date</TT></TD>
<TR VALIGN=TOP>
<TD><TT>28 2 1999</TT></TD>
<TD><TT>+-+--+----+<BR>
|2|28|1999|<BR>
+-+--+----+</TT></TD>
</TABLE>
<p>
The general scheme for a train of verbs <TT>(a b c ...)</TT> depends upon whether
the number of verbs is even or odd:
<PRE>
<TT>            even:  (a b c ...)    means   hook (a (b c ...))  </TT>
</PRE>
<PRE>
<TT>            odd :  (a b c ...)    means   fork (a b (c ...))</TT>
</PRE>
<A NAME="06"></A>
<A NAME="07"></A>
<A NAME="08"></A>
<A NAME="09"></A>
<A NAME="10"></A>
<H2>9.6  Identity Functions</H2>
There is a built-in verb, monadic <TT>[</TT> (left bracket, called "Same"). 
It gives a result identical to its argument.  
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>[ 99</TT></TD>
<TD><TT>[ 'a b c'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>99</TT></TD>
<TD><TT>a b c</TT></TD>
</TABLE>
<p>
There is a dyadic case, and also a similar verb <TT> ] </TT>. Altogether we have these 
schemes:
<PRE>
<TT>            [ y   means y </TT>
</PRE>
<PRE>
<TT>          x [ y   means x</TT>
</PRE>
<PRE>
<TT>            ] y   means y</TT>
</PRE>
<PRE>
<TT>          x ] y   means y</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>[ 3</TT></TD>
<TD><TT>2 [ 3</TT></TD>
<TD><TT>] 3</TT></TD>
<TD><TT>2 ] 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3</TT></TD>
<TD><TT>2</TT></TD>
<TD><TT>3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
Monadic <TT>[</TT> and monadic <TT> ] </TT> are both called "Same". 
Dyadic <TT> [ </TT> is called "Left". 
Dyadic <TT> ] </TT> is "Right".
<p>
The expression <TT>(+ % ])</TT> is a fork; for arguments <TT>x</TT> and <TT>y</TT>
it computes:
<PRE>
<TT>                 (x+y) % (x ] y)</TT>
</PRE>
that is, 
<PRE>
<TT>                 (x+y) % y</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>2 ] 3</TT></TD>
<TD><TT>(2 + 3) % (2 ] 3)</TT></TD>
<TD><TT> 2 (+ % ]) 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3</TT></TD>
<TD><TT>1.66667</TT></TD>
<TD><TT>1.66667</TT></TD>
</TABLE>
<p>
Another use for the identity function <TT>[</TT> is
to cause the result of an assignment to be displayed.
The expression <TT>foo =: 42</TT> is an assignment
while the expression <TT>[ foo =: 42</TT>
is not: it merely contains an assignment.
<PRE>
<TT>       foo =: 42       NB.  nothing displayed</TT>
<TT>       [ foo =: 42</TT>
<TT>42</TT>
</PRE>
Yet another use for the <TT>[</TT> verb is to allow several assignments to be combined 
on one line.  
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>a =: 3  [  b =: 4  [  c =: 5</TT></TD>
<TD><TT>a,b,c</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3</TT></TD>
<TD><TT>3 4 5</TT></TD>
</TABLE>
<p>
Since <TT>[</TT> is a verb, its arguments must be nouns, (that is, not functions). 
Hence the assignments combined with <TT>[</TT> must all evaluate to nouns.
<H3>9.6.1  Example: Hook as Abbreviation</H3>
The monadic hook <TT>(g h)</TT> is an abbreviation for
the monadic fork <TT>([ g h)</TT>. 
To demonstrate, suppose we have:
<PRE>
<TT>   g =: ,</TT>
<TT>   h =: *:</TT>
<TT>   y =: 3</TT>
</PRE>
Then each of the following expressions is equivalent.
<PRE>
<TT>   ([ g h) y       NB. a fork</TT>
<TT>3 9</TT>
<TT>   ([ y) g (h y)   NB. by defn of fork</TT>
<TT>3 9</TT>
<TT>   y g (h y)       NB. by defn of [</TT>
<TT>3 9</TT>
<TT>   (g h) y         NB. by defn of hook</TT>
<TT>3 9</TT>
<TT>   </TT>
</PRE>
<H3>9.6.2  Example: Left Hook</H3>
Recall that the monadic hook has the general scheme
<PRE>
<TT>             (f g) y    =   y f (g y)</TT>
</PRE>
How can we write, as a train, a function with the scheme  
<PRE>
<TT>             (  ?   ) y  =   (f y) g y</TT>
</PRE>
There are two possibilities. One is the fork <TT>(f g ])</TT>: 
<PRE>
<TT>   f =: *:</TT>
<TT>   g =: ,</TT>
<TT>    </TT>
<TT>   (f g ]) y        NB. a fork</TT>
<TT>9 3</TT>
<TT>   (f y) g (] y)    NB. by meaning of fork  </TT>
<TT>9 3</TT>
<TT>   (f y) g y        NB. by meaning of ]</TT>
<TT>9 3</TT>
</PRE>
For another possibility,  recall the <TT>~</TT> adverb with its scheme:
<PRE>
<TT>             (x f~ y) means   y f x</TT>
</PRE>
Our train can be written as the hook <TT>(g~ f)</TT>.
<PRE>
<TT>   (g~ f) y      NB. a hook</TT>
<TT>9 3</TT>
<TT>   y (g~) (f y)  NB. by meaning of hook</TT>
<TT>9 3</TT>
<TT>   (f y) g y     NB. by meaning of ~</TT>
<TT>9 3</TT>
<TT>   </TT>
</PRE>
<H3>9.6.3  Example: Dyad</H3>
There is a sense in which <TT>[</TT> and <TT> ] </TT>
can be regarded as standing for left and right arguments.
<PRE>
<TT>   f =: 'f' &amp; ,</TT>
<TT>   g =: 'g' &amp; ,</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>foo =: (f @: [) , (g @: ])</TT></TD>
<TD><TT>'a' foo 'b'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>f@:[ , g@:]</TT></TD>
<TD><TT>fagb</TT></TD>
</TABLE>
<p>
<A NAME="11"></A>
<A NAME="12"></A>
<H2>9.7  The Capped Fork</H2>
The class of functions which can be written as
unbroken trains can be widened with the aid of 
the "Cap" verb <TT>[:</TT>  (leftbracket colon)
<p>
The scheme is: for verbs <TT>f</TT> and <TT>g</TT>, the fork:
<PRE>
<TT>             [: f g     means   f @: g</TT>
</PRE>
For example, with <TT>f</TT> and <TT>g</TT> as above, we have 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y=:'y'</TT></TD>
<TD><TT>f g y</TT></TD>
<TD><TT>(f @: g) y</TT></TD>
<TD><TT>([: f g) y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>y</TT></TD>
<TD><TT>fgy</TT></TD>
<TD><TT>fgy</TT></TD>
<TD><TT>fgy</TT></TD>
</TABLE>
<p>
Notice how the sequence of three verbs 
<TT>([: f g)</TT> looks like a fork,
but with this "capped fork" it is the MONADIC 
case of the middle verb <TT>f</TT> which is applied. 
<p>
The <TT>[:</TT> verb is  valid ONLY as the left-hand verb of a fork.
It has no other purpose: as a verb it has an empty
domain, that is, it cannot be applied to any argument.
Its usefulness lies in building long trains.
Suppose for example that:
<PRE>
<TT>   h =: 'h'&amp;,</TT>
</PRE>
then the expression <TT>(f , [: g h)</TT> is a 5-train
which denotes a verb: 
<PRE>
<TT>   (f , [: g h) y        NB. a 5-train</TT>
<TT>fyghy</TT>
<TT>   </TT>
<TT>   (f y) , (([: g h) y)  NB. by meaning of 5-train</TT>
<TT>fyghy</TT>
<TT>   </TT>
<TT>   (f y) , (g @: h y)    NB. by meaning of [:</TT>
<TT>fyghy</TT>
<TT>   </TT>
<TT>   (f y) , (g h y)       NB. by meaning of @:</TT>
<TT>fyghy</TT>
<TT>   </TT>
<TT>   'fy'  , 'ghy'         NB. by meaning of f g h </TT>
<TT>fyghy</TT>
</PRE>
<A NAME="13"></A>
<H2>9.8  Constant Functions</H2>
Here we continue looking at ways of broadening the class of functions that we can
write as trains of verbs. 
There is a built-in verb <TT>0:</TT> (zero colon) which delivers a value of zero 
regardless of its argument. There is a monadic and a dyadic case:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> 0: 99</TT></TD>
<TD><TT>0: 2 3 4</TT></TD>
<TD><TT>0: 'hello'</TT></TD>
<TD><TT>88 0: 99</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0</TT></TD>
<TD><TT>0</TT></TD>
<TD><TT>0</TT></TD>
<TD><TT>0</TT></TD>
</TABLE>
<p>
As well as <TT>0:</TT> there are similar functions <TT>1:</TT> <TT>2:</TT> <TT>3:</TT> and so on up to <TT>9:</TT> 
and also the negative values: <TT>_9:</TT> to <TT>_1:</TT>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>1: 2 3 4</TT></TD>
<TD><TT>_3: 'hello'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1</TT></TD>
<TD><TT>_3</TT></TD>
</TABLE>
<p>
<TT>0:</TT> is said to be a constant function, because its result is constant. 
Constant functions are useful because they can occur in trains at places where
we want a constant but must write a verb, (because trains of verbs, naturally, 
contain only verbs). 
<p>
For example, a verb to test whether its argument is 
negative (less than zero) can be written as
<TT>(< &amp; 0)</TT> but alternatively it can be written as a hook:
<PRE>
<TT>   negative =:  < 0:</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>x =: _1 0 2</TT></TD>
<TD><TT>0: x</TT></TD>
<TD><TT>x < (0: x)</TT></TD>
<TD><TT>negative x</TT></TD>
<TR VALIGN=TOP>
<TD><TT>_1 0 2</TT></TD>
<TD><TT>0</TT></TD>
<TD><TT>1 0 0</TT></TD>
<TD><TT>1 0 0</TT></TD>
</TABLE>
<p>
<A NAME="14"></A>
<H2>9.9  Constant Functions with the Rank Conjunction</H2>
The constant functions <TT>_9:</TT> to <TT>9:</TT> offer more choices for ways of defining trains. 
Neverthless they are limited to single-digit scalar constants. 
We look now at at a more general way of writing constant functions.
Suppose that <TT>k</TT> is the constant in question:
<PRE>
<TT>   k =: 'hello'</TT>
</PRE>
An explicit verb written as <TT>(3 : 'k')</TT> will give a constant result of <TT>k</TT>:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>k</TT></TD>
<TD><TT>(3 : 'k') 1</TT></TD>
<TD><TT>(3 : 'k') 1 2</TT></TD>
<TR VALIGN=TOP>
<TD><TT>hello</TT></TD>
<TD><TT>hello</TT></TD>
<TD><TT>hello</TT></TD>
</TABLE>
<p>
Since the verb <TT>(3 : 'k')</TT> is explicit, its rank is infinite. To apply it
separately to scalars then (as we saw in <A HREF="07.htm">Chapter 07</A>) we need  
to specify a rank <TT>R</TT> of <TT>0</TT>, with the aid of 
the Rank conjunction <TT>"</TT> :
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>k</TT></TD>
<TD><TT>R =: 0</TT></TD>
<TD><TT>((3 : 'k') " R) 1 2</TT></TD>
<TR VALIGN=TOP>
<TD><TT>hello</TT></TD>
<TD><TT>0</TT></TD>
<TD><TT>hello<BR>
hello</TT></TD>
</TABLE>
<p>
The expression <TT>((3 : 'k') " R)</TT> can 
be abbreviated as <TT>(k " R)</TT>, because <TT>"</TT> can take, as its left argument,
a verb, as above, or a noun: 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>k</TT></TD>
<TD><TT>R</TT></TD>
<TD><TT>((3 : 'k') " R) 1 2</TT></TD>
<TD><TT>('hello' " R) 1 2</TT></TD>
<TR VALIGN=TOP>
<TD><TT>hello</TT></TD>
<TD><TT>0</TT></TD>
<TD><TT>hello<BR>
hello</TT></TD>
<TD><TT>hello<BR>
hello</TT></TD>
</TABLE>
<p>
Note that if <TT>k</TT> is a noun,
then the verb <TT>(k"R)</TT> means: the constant value <TT>k</TT>
produced for each rank-R cell of the argument. By contrast, if
<TT>v</TT> is a verb, then the verb <TT>(v"R)</TT> means: the verb <TT>v</TT> applied
to each rank-R cell of the argument. 
<p>
The general scheme for constant functions with <TT>"</TT> is:
<PRE>
<TT>                 k " R   means   (3 : 'k') " R</TT>
</PRE>
<H3>9.9.1  A Special Case</H3>
<A NAME="15"></A>
Given a temperature in degrees Fahrenheit, the equivalent in Celsius
is computed by subtracting <TT>32</TT> and multiplying by five-ninths.
<PRE>
<TT>   Celsius =: ((5%9) &amp; *) @: (- &amp;32)</TT>
<TT>   </TT>
<TT>   Celsius 32 212</TT>
<TT>0 100</TT>
<TT>   </TT>
</PRE>
Another way to define <TT>Celsius</TT> is as a fork - a train of three verbs. 
<PRE>
<TT>   Celsius =: (5%9 "_ ) * (-&amp;32)</TT>
<TT>   </TT>
<TT>   Celsius 32 212</TT>
<TT>0 100</TT>
<TT>   </TT>
</PRE>
Notice that the fork in <TT>Celsius</TT> above has its left verb as a constant 
function. Here we have a special case of 
a fork which can be abbreviated in the form (noun verb verb).
<PRE>
<TT>   Celsius =: (5%9) * (-&amp;32) </TT>
<TT>   </TT>
<TT>   Celsius 32 212</TT>
<TT>0 100</TT>
<TT>   </TT>
</PRE>
The general scheme (new in J6) for this abbreviation for a fork is:
if <TT>n</TT> is a noun, <TT>u</TT> and <TT>v</TT> are verbs, then 
<PRE>
<TT>           n u v  means the fork  (n"_) u v</TT>
</PRE>
We have come to the end of of Chapter 9.
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="10.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version 701. 
 This chapter last updated 13 Dec 2012<BR> 
Copyright &copy; Roger Stokes 2012. 
 This material may be freely reproduced, 
provided that this copyright notice is also reproduced. 
</FONT> 
 <!--bottom jump start--><hr><a href="10.htm">&gt;&gt;</a>&nbsp;
<a href="08.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
