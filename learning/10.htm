<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
    
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=ISO-8859-1"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)"> 
  <META NAME="CREATED" CONTENT="20051014;16001218"> 
	<META NAME="CHANGED" CONTENT="20051014;16020434"> 
  <title>   Ch 10: Conditional and Other Forms</title> 
  <STYLE TYPE="text/css"> 
   <!-- 
    TT  {font-size: 11pt; COLOR: BLUE} 
    PRE {font-size: 11pt; COLOR: BLUE} 
   --> 
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="11.htm">&gt;&gt;</a>&nbsp;
<a href="09.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <H1>Chapter 10: Conditional and Other Forms</H1>
Tacit verbs, that is, verbs defined without the use of argument variables,
 were introduced 
in <A HREF="03.htm">Chapter 03</A>. Continuing this theme of tacit definition, in <A HREF="08.htm">Chapter 08</A> we
looked at the use of  composition-operators and
in <A HREF="09.htm">Chapter 09</A> at trains of verbs.  
<p>
The plan for this chapter is to look at further ways of defining
verbs tacitly: 
<UL>
<LI> Conditional forms
<LI> Recursive forms
<LI> Iterative forms 
<LI> Generating tacit definitions from explicit definitions
</UL>
<A NAME="01"></A>
<H2>10.1  Conditional Forms</H2>
Think of a number (some positive whole number). 
If it is odd, multiply by 3 and then add 1. Otherwise, 
halve the number you thought of. 
This procedure computes from 1 the new number 4, and from 
4 the new number 2.
<p>
To write a function to compute a new number 
according to this procedure, we start with 
three verbs, say <TT>halve</TT> to halve, <TT>mult</TT> to 
multiply-and-add, 
and <TT>odd</TT> to test for an odd number:
<PRE>
   halve =: -:
   mult  =: 1: + (* 3:)
   odd   =: 2 & |
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>halve 6</TT></TD>
<TD><TT>mult 6</TT></TD>
<TD><TT>odd 6</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3</TT></TD>
<TD><TT>19</TT></TD>
<TD><TT>0</TT></TD>
</TABLE>
<p>
Now our procedure for a new number can be written as an 
explicit verb:
<PRE>
   NEW =: 3 : 'if. odd y do. mult y else.  halve y end. '
</PRE>
and equivalently as a tacit verb:
<PRE>
   new =: (halve ` mult) @. odd
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>NEW 1</TT></TD>
<TD><TT>new 1</TT></TD>
<TR VALIGN=TOP>
<TD><TT>4</TT></TD>
<TD><TT>4</TT></TD>
</TABLE>
<p>
In the definition of <TT>new</TT>, the symbol <TT>`</TT> (backquote)
is called the  "Tie" conjunction. 
It  ties together <TT>halve</TT> and <TT>mult</TT> to make a list of two 
verbs.  
(Such a list is called a "gerund" and we look at more 
uses of gerunds in <A HREF="14.htm">Chapter 14</A>).
<A NAME="02"></A>
The conjunction <TT>@.</TT> is called "Agenda". Its right argument is a verb, which selects another verb 
from the list of verbs which is the left argument. 
 Thus in evaluating <TT>new y</TT>   
the value of <TT>odd y</TT> is used to index the list
 <TT>(halve`mult)</TT>. Then the
selected verb is applied to <TT>y</TT>. That is, <TT>halve y</TT> or
 <TT>mult y</TT> is computed
accordingly as <TT>odd y</TT> is 0 or 1.
<p>
In this example, we have two cases to consider: the 
argument is odd or not. 
In general, there may be several cases.
The general scheme is, if <TT>u0</TT>, <TT>u1</TT>, ... <TT>un</TT> are verbs,
and <TT>t</TT> is a verb computing an integer in the range
 <TT>0</TT> .. <TT>n</TT>,   then
the verb:
<PRE>
              foo =: u0 ` u1 ` ...` un  @. t  
</PRE>
can be modelled by the explicit verb:
<PRE>
   FOO =: 3 : 0
if.     (t y) = 0  do. u0 y 
elseif. (t y) = 1  do. u1 y
</PRE>
<PRE>
      ...
</PRE>
<PRE>
elseif. (t y) = n  do. un y
end.
)
</PRE>
That is, verb <TT>t</TT> tests the argument <TT>y</TT> and then <TT>u0</TT> or 
 <TT>u1</TT> or ... is applied to <TT>y</TT>
according to  whether <TT>(t y)</TT> is 0 or 1 or .... 
<H3>10.1.1  Example with 3 Cases</H3>
Suppose that, each month, a bank pays or charges interest 
according to the balances of customers' accounts as 
follows. There are three cases:
<UL>
<LI>If the balance is $100 or more, the bank pays interest 
of 0.5% </LI>
<LI>If the balance is negative, the bank charges interest 
at 2%.</LI>
<LI>Otherwise the balance is unchanged. </LI>
</UL>
Three verbs, one for each of the three cases, could be: 
<PRE>
   pi =: * & 1.005        NB.  pay interest 
   ci =: * & 1.02         NB.  charge interest
   uc =: * & 1            NB.  unchanged
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>pi 1000</TT></TD>
<TD><TT>ci _100</TT></TD>
<TD><TT>uc 50</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1005</TT></TD>
<TD><TT>_102</TT></TD>
<TD><TT>50</TT></TD>
</TABLE>
<p>
Now we want a verb to compute, from a given balance, <TT>0</TT> or <TT>1</TT>
 or <TT>2</TT>, according to the case.  We are free to choose how we number the cases.
The following verb scores 1 for a 
balance of $0 or more plus another 1 for $100 or more.
<PRE>
   case =: (>: & 0) + (>: & 100)
   
   case _50 0 1 100 200
0 1 1 2 2
</PRE>
Now  the processing of a balance can be represented by the verb 
<TT>PB</TT> say, being careful to write the three verbs in the correct case-number order.
<p>
<PRE>
   PB =: ci ` uc  ` pi  @. case 
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>PB _50</TT></TD>
<TD><TT>PB 0</TT></TD>
<TD><TT>PB 1</TT></TD>
<TD><TT>PB 100</TT></TD>
<TD><TT>PB 200</TT></TD>
<TR VALIGN=TOP>
<TD><TT>_51</TT></TD>
<TD><TT>0</TT></TD>
<TD><TT>1</TT></TD>
<TD><TT>100.5</TT></TD>
<TD><TT>201</TT></TD>
</TABLE>
<p>
The balance (the argument of <TT>PB</TT>) is expected to fall under 
exactly one of the three possible cases. 
Suppose the argument is a list of balances. The <TT>case</TT> verb 
delivers not just one but a list of case-numbers. This is an error. The remedy
is to apply the <TT>PB</TT> function
 separately to each item of its argument.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>PB 99 100</TT></TD>
<TD><TT>(PB "0) 99 100</TT></TD>
<TR VALIGN=TOP>
<TD><TT>error</TT></TD>
<TD><TT>99 100.5</TT></TD>
</TABLE>
<p>
<A NAME="03"></A>
<H2>10.2  Recursion</H2>
To compute the sum of a list of numbers, we have seen the 
verb <TT>+/</TT> but let us
look at another way of defining a summing verb.
<p>
The sum of an empty list of numbers is zero, 
and otherwise
the sum is the first item plus
the sum of the remaining items. If we define three verbs,
to test for an empty list, to take the first item and to 
take the remaining
items:
<PRE>
   empty =: # = 0:
   first =: {.
   rest  =: }.
</PRE>
then the two cases to consider are:
<UL>
<LI>
an empty list, in which case we apply the <TT>0:</TT> function
to return zero
<LI>a non-empty list, in which case we want the first 
plus the sum of the rest:
</UL>
<PRE>
   Sum =: (first + Sum @ rest) ` 0:  @. empty 
   
   Sum 1 1 2
4
</PRE>
Here we see that the verb "Sum" recurs in its own definition
and so the definition is said to be recursive.
<A NAME="04"></A>
In such a recursive definition, the name which recurs can
 be written as <TT>$:</TT> (dollar colon, called "Self-Reference"),
meaning "this function".  This enables us to write a 
recursive function
as an expression, without assigning a name. Here is the 
"Sum" function as an expression:
<PRE>
   ((first + $: @ rest) ` 0: @. empty)  1 2 3
6
   
</PRE>
<H3>10.2.1  Ackermann's Function</H3>
Ackermann's function is  celebrated for being extremely 
recursive.  Textbooks
show it in a form something like 
this explicit definition of a dyad:
<PRE>
   Ack =: 4 : 0
if.       x = 0  do.  y + 1                     
elseif.   y = 0  do.  (x - 1) Ack 1                 
elseif.   1       do.  (x - 1) Ack (x Ack y -1) 
end.
)
   
   2 Ack 3
9
</PRE>
A tacit version is due to Roger Hui (Vector, Vol 9 No 2, 
Oct 1992,  page 142):
<PRE>
   ack =: c1 ` c1 ` c2 ` c3 @. (#. @(,&*))
   
   c1 =: >:@]                NB. 1 + y
   c2 =: <:@[ ack 1:         NB. (x-1) ack 1
   c3 =: <:@[ ack [ack <:@]  NB. (x -1) ack x ack y -1
   
   2 ack 3
9
</PRE>
Notice that in the line defining <TT>c2</TT> the function is 
referred to as <TT>ack</TT>, not as <TT>$:</TT>, 
because here <TT>$:</TT>  would mean <TT>c2</TT>.
<p>
Here is yet another version. The tacit version can be made 
to look 
a little more conventional by first defining <TT>x</TT> and 
<TT>y</TT> as the verbs <TT>[</TT> and <TT> ]</TT>. 
Also, we test for only one case on a line.
<PRE>
   x =: [
   y =: ]
   
   ACK =: A1 `  (y + 1:)                    @. (x = 0:)
   A1  =: A2 ` ((x - 1:) ACK 1:)            @. (y = 0:)
   A2  =:       (x - 1:) ACK (x ACK y - 1:)
   
   2 ACK 3
9
</PRE>
<A NAME="05"></A>
<A NAME="06"></A>
<H2>10.3  Iteration</H2>
<H3>10.3.1  The Power Conjunction</H3>
Think of a number, double it, double that result, double 
again.
The result of three doublings is eight times the original 
number.
The built-in verb <TT>+:</TT> is "double", 
and the verb "three doublings" can be written 
using the "Power" conjunction (<TT>^:</TT>) as
<TT>+: ^: 3</TT>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>+: +: +: 1</TT></TD>
<TD><TT>(+: ^: 3 ) 1</TT></TD>
<TR VALIGN=TOP>
<TD><TT>8</TT></TD>
<TD><TT>8</TT></TD>
</TABLE>
<p>
The general scheme is that for a verb <TT>f</TT> and
an integer <TT>n</TT> 
<PRE>
         (f ^: n) y  means  f f f ... f f f f  y
</PRE>
<PRE>
                            <---  n f's  --->
</PRE>
Notice that <TT>f ^: 0 y</TT> is just <TT>y</TT> and 
then <TT>f ^: 1 y</TT> is <TT>f y</TT>.
For example, recall the <TT>new</TT> verb
"halve or multiply-by-3-and-add-1 if odd".
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>(new ^: 0) 6</TT></TD>
<TD><TT>(new ^: 1) 6</TT></TD>
<TD><TT>new 6</TT></TD>
<TR VALIGN=TOP>
<TD><TT>6</TT></TD>
<TD><TT>3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
With the Power conjunction we can generate a series
by  applying
<TT>new</TT> 0 times, once, twice and so on, 
starting with 6 for example
<PRE>
   (new ^: 0 1 2 3 4 5 6 ) 6
6 3 10 5 16 8 4
   
</PRE>
<H3>10.3.2  Iterating Until No Change</H3>
The expression <TT>f ^: _</TT> where the Power conjunction
 is given a right argument
of infinity (<TT>_</TT>),  is a verb where <TT>f</TT> is applied 
until a result
is reached which is the same as the previous result.
The scheme is:
<PRE>
        f ^: _ y    means   
</PRE>
<PRE>
                     r  such that r = f f ... f f y
</PRE>
<PRE>
                              and r = f r 
</PRE>
Here is an example. Suppose function <TT>P</TT> is
defined as:
<PRE>
   P =: 3 : '2.8  * y * (1 - y)'
</PRE>
Then if we
repeatedly apply the function to an argument in the 
neighbourhood
of <TT>0.5</TT>,  after 20 or so iterations the result will 
settle on a value of about <TT>0.643</TT>
<PRE>
   (P ^: 0 1 2 3    19 20 _) 0.5
0.5 0.7 0.588 0.6783 0.6439 0.642 0.6429
</PRE>
and this value, <TT>r</TT> say, is called a fixed point of 
<TT>P</TT> because <TT>r = P r</TT> 
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>r =: (P ^: _) 0.5 </TT></TD>
<TD><TT>P r</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0.6429</TT></TD>
<TD><TT>0.6429</TT></TD>
</TABLE>
<p>
<A NAME="07"></A>
<H3>10.3.3  Iterating While </H3>
The right argument of the "Power" conjunction can be a verb
which computes the number of iterations to be performed.
The scheme is:
<PRE>
           (f ^: g) y  means  f ^: (g y) y
</PRE>
If <TT>g y</TT> computes <TT>0</TT> or <TT>1</TT>, then <TT>f</TT> will be applied 
<TT>0</TT> times or <TT>1</TT> time: For example, here
is a verb which halves an even number
and leaves an odd number alone:
<PRE>
   halve =: -:
   even  =: 0: = 2 & |
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>foo =: halve ^: even </TT></TD>
<TD><TT>(foo " 0) 1 2 3 4</TT></TD>
<TR VALIGN=TOP>
<TD><TT>halve^:even</TT></TD>
<TD><TT>1 1 3 2</TT></TD>
</TABLE>
<p>
Now consider the function 
<PRE>
   w =: (halve ^: even) ^: _
</PRE>
This means "halve if even, and keep doing this so long as 
the result keeps changing".
<PRE>
   w (3 * 16)
3
</PRE>
The scheme is that if <TT>g</TT> returns <TT>0</TT> or <TT>1</TT> then a function written (<TT>f ^: g ^: _ </TT>)
can be modelled by an explicit definition:
<PRE>
   model =: 3 : 0
while. (g y) 
   do. y =.  f y 
end.
y
)
   
   f =: halve
   g =: even
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>(f ^: g ^: _) 3 * 16</TT></TD>
<TD><TT>model 3*16</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
<H3>10.3.4  Iterating A Dyadic Verb</H3>
Adding <TT>3</TT>, twice,  to <TT>0</TT>  gives <TT>6</TT>
<PRE>
   ((3&+) ^: 2) 0
6
</PRE>
This expression can be abbreviated as:
<PRE>
   3 (+ ^: 2) 0
6
</PRE>
The given left argument (<TT>3</TT>) is fixed at the outset,
so the iterated verb is the monad <TT>3&+</TT>. The general
scheme is:
<PRE>
         x (u ^: w) y  means   ((x&u) ^: w) y
</PRE>
where <TT>w</TT> is a noun or verb.
<A NAME="08"></A>
<H2>10.4  Generating Tacit Verbs from Explicit</H2>
Suppose that <TT>e</TT> is a verb, defined explicitly as follows:
<PRE>
   e =: 3 : '(+/ y) % # y'
</PRE>
The right argument of the colon conjunction we can call 
the "body".
Then a tacit verb, <TT>t</TT> say, equivalent to <TT>e</TT>, can be produced
by writing <TT>13 : </TT> instead of <TT>3 :</TT> with the same body.
<PRE>
   t =: 13 : '(+/ y) % # y'
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>e</TT></TD>
<TD><TT>t</TT></TD>
<TD><TT>e 1 2 3</TT></TD>
<TD><TT>t 1 2 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3 : '(+/ y) % # y'</TT></TD>
<TD><TT>+/ % #</TT></TD>
<TD><TT>2</TT></TD>
<TD><TT>2</TT></TD>
</TABLE>
<p>
Here now is an example of an explicit dyad.
<PRE>
   ed =:  4 : 'y % x'
</PRE>
The equivalent tacit dyad can be generated by writing <TT>13 :</TT>
rather than <TT>4 :</TT> with the same body.
<PRE>
   td =: 13 : 'y % x'
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>ed</TT></TD>
<TD><TT>td</TT></TD>
<TD><TT>2 ed 6</TT></TD>
<TD><TT>2 td 6</TT></TD>
<TR VALIGN=TOP>
<TD><TT>4 : 'y % x'</TT></TD>
<TD><TT>%~</TT></TD>
<TD><TT>3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
We can conclude that if we write <TT>13 : body</TT>, 
and <TT>body</TT> contains <TT>y</TT> (but not <TT>x</TT>) then the
result is a tacit verb of which the monadic case is
equivalent to <TT>3 : body</TT>.  On the other hand,
if <TT>body</TT> contains both <TT>x</TT> and <TT>y</TT> then
the result is a tacit verb of which the dyadic case
is equivalent to <TT>4 : body</TT>.  
<p>
For the purpose of generating tacit functions, the body
is restricted to being
a single string or one line.
Recall that with <TT>3 : body</TT>,
the body is not evaluated when the definition
is entered. However, with <TT>13 : body</TT>, then in effect
the body is evaluated. For example:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>k =: 99</TT></TD>
<TD><TT>p =: 3 : 'y+k'</TT></TD>
<TD><TT>q =: 13 : 'y+k'</TT></TD>
<TD><TT>p 6</TT></TD>
<TD><TT>q 6</TT></TD>
<TR VALIGN=TOP>
<TD><TT>99</TT></TD>
<TD><TT>3 : 'y+k'</TT></TD>
<TD><TT>99 + ]</TT></TD>
<TD><TT>105</TT></TD>
<TD><TT>105</TT></TD>
</TABLE>
<p>
We see that <TT>p</TT> is defined in terms of
<TT>k</TT> while <TT>q</TT> is not. While <TT>p</TT> and <TT>q</TT> are at present
equivalent, any subsequent change in the value of <TT>k</TT>
will render them no longer equivalent.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>k =: 0</TT></TD>
<TD><TT>p 6</TT></TD>
<TD><TT>q 6</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0</TT></TD>
<TD><TT>6</TT></TD>
<TD><TT>105</TT></TD>
</TABLE>
<p>
A name with no assigned value is assumed to denote a verb.
In the following example, note that <TT>f</TT> is unassigned,
<TT>C</TT> is a predefined conjunction and <TT>g</TT> is a
predefined verb.
<PRE>
   C =: @:
   g =: %:
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>foo =: 13 : '(f C f y) , g y'</TT></TD>
<TD><TT>f =: *:</TT></TD>
<TD><TT>foo 4</TT></TD>
<TR VALIGN=TOP>
<TD><TT>f@:f , g</TT></TD>
<TD><TT>*:</TT></TD>
<TD><TT>256 2</TT></TD>
</TABLE>
<p>
This is the end of Chapter 10
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="11.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version  j701/beta/2010-11-24/22:45. 
 This chapter last updated 22 Dec 2010<BR> 
Copyright &copy; Roger Stokes 2010. 
 This material may be freely reproduced, 
provided that this copyright notice is also reproduced. 
</FONT> 
 <!--bottom jump start--><hr><a href="11.htm">&gt;&gt;</a>&nbsp;
<a href="09.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
