<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML>
<HEAD>
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=UTF-8">
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)">
  <TITLE>   Ch 12: Explicit Verbs</TITLE>
  <STYLE TYPE="text/css">
    TT  {font-size: 12pt; COLOR: BLUE}
    PRE {font-size: 12pt; COLOR: BLUE}

    table.jtable {
         border-width: thin;
         border-spacing: 2px;
         border-style: solid;
         border-color: gray;
         border-collapse: collapse;
         background-color: white;
     }
     table.jtable td {
         border-width: 1px;
         padding: 10px;
         border-style: solid;
         border-color: gray;
         background-color: white;
     }
  </STYLE>
</HEAD>

<BODY BGCOLOR=WHITE><!--top jump start--><a href="13.htm">&gt;&gt;</a>&nbsp;
<a href="11.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end-->
  <table border="0" cellpadding="5" cellspacing="0"  width="100%">
  <tr> <td valign="top" width="17%"> <p> </td>
   <td valign="top" width="83%">
 <A NAME="01"></A>
<H1>Chapter 12: Explicit Verbs</H1>
This chapter continues from <A HREF="04.htm">Chapter 04</A> the theme
of the explicit definition of verbs.
<A NAME="02"></A>
<H2>12.1  &nbsp;&nbsp; The Explicit Definition Conjunction</H2>
Recall from <A HREF="04.htm">Chapter 04</A> the example of an explicit dyadic verb, the
"positive difference" of two numbers, defined as larger minus smaller.
<PRE>
<TT>   PosDiff =: 4 : '(x >. y) - (x <. y)'</TT>
<TT>   </TT>
<TT>   3 PosDiff 4</TT>
<TT>1</TT>
</PRE>
The general scheme for the explicit definition of a function is to provide
two arguments to the Explicit Definition conjunction (<TT> : </TT>,  &nbsp; colon)
 in the form
<PRE>
<TT>             type : body</TT>
</PRE>
In the body, the variables <TT>x</TT> and <TT>y</TT> are the arguments.
<H3>12.1.1  Type</H3>
The type is a number: type-3 functions are monadic verbs or ambivalent
verbs. Type-4 functions are
strictly dyadic verbs (that is, with no monadic case).
There are other types: types 1 and 2 are operators, covered in <A HREF="13.htm">Chapter 13</A> .
Type 13 is covered in <A HREF="10.htm">Chapter 10</A> .
<H3>12.1.2  Mnemonics for Types</H3>
The standard J profile predefines several variables to provide
mnemonic names for the types, and other things, thus:
<A NAME="03"></A>
<A NAME="04"></A>
<PRE>
<TT>   noun        =: 0</TT>
<TT>   adverb      =: 1</TT>
<TT>   conjunction =: 2</TT>
<TT>   verb        =: 3</TT>
<TT>   monad       =: 3</TT>
<TT>   dyad        =: 4</TT>
<TT>   def         =: :</TT>
<TT>   define      =: : 0</TT>
</PRE>
Thus the <TT>PosDiff</TT> example above could be also written as:
<PRE>
<TT>   PosDiff =: dyad def '(x >. y) - (x <. y)'</TT>
<TT>   </TT>
<TT>   3 PosDiff 4</TT>
<TT>1</TT>
<TT>   </TT>
</PRE>
<H3>12.1.3  Body Styles</H3>
The body of an explicit definition consists of one or more lines of text.
There are several ways to provide the body
The example above, <TT>PosDiff</TT>, shows a single line written as a string.
<p>
A multi-line body can be introduced with a right argument of <TT>0</TT>
for the colon operator.
<PRE>
<TT>   PosDiff =: 4 : 0</TT>
<TT>larger  =. x >. y</TT>
<TT>smaller =. x <. y</TT>
<TT>larger - smaller</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   3 PosDiff 4</TT>
<TT>1</TT>
</PRE>
Another variation allows a multi-line body to be written compactly by
 embedding line-feeds. <TT>LF</TT> is predefined to be the line-feed character. Notice
that the whole body must be parenthesized.
<PRE>
<TT>   PosDiff =: 4 : ('la =. x >. y', LF, 'sm =. x <. y', LF, 'la - sm')</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>PosDiff</TT></TD>
<TD><TT>3 PosDiff 4</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+------------+<BR>
|4|:|la =. x >. y|<BR>
| | |sm =. x <. y|<BR>
| | |la - sm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<BR>
+-+-+------------+</TT></TD>
<TD><TT>1</TT></TD>
</TABLE>
<p>
Another variation uses a boxed list of lines (again with the body
parenthesized):
<PRE>
<TT>   PosDiff =: 4 : ('la =. x >. y' ; 'sm =. x <. y' ;  'la - sm')</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>PosDiff</TT></TD>
<TD><TT>3 PosDiff 4</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+------------+<BR>
|4|:|la =. x >. y|<BR>
| | |sm =. x <. y|<BR>
| | |la - sm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<BR>
+-+-+------------+</TT></TD>
<TD><TT>1</TT></TD>
</TABLE>
<p>
Notice that these are not variations
 of syntax, but rather alternative
expressions for constructing a data-structure acceptable as the
right-argument of the <TT> : </TT> operator.
<A NAME="05"></A>
<H3>12.1.4  Ambivalent Verbs</H3>
An ambivalent verb has both a monadic and a dyadic case.
In the definition, the monadic case is presented first,
then a line consisting of a solo colon, and then the dyadic case.
For example:
<PRE>
<TT>   log =: 3 : 0</TT>
<TT>^. y     NB. monad - natural logarithm </TT>
<TT>:</TT>
<TT>x ^. y   NB. dyad  - base-x  logarithm  </TT>
<TT>)</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>log 2.7182818</TT></TD>
<TD><TT>10 log 100</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1</TT></TD>
<TD><TT>2</TT></TD>
</TABLE>
<p>
<H2>12.2  Assignments</H2>
In this section we consider assignments,
which are of significance in defining explicit functions.
<A NAME="06"></A>
<H3>12.2.1  Local and Global Variables</H3>
Consider the example
<PRE>
<TT>   foo =: 3 : 0</TT>
<TT>L =.  y</TT>
<TT>G =:  y</TT>
<TT>L</TT>
<TT>)</TT>
</PRE>
Here, the assignment of the form
<PRE>
<TT>               L =. expression</TT>
</PRE>
causes the value of <TT>expression</TT> to be assigned to a
local variable named <TT>L</TT>. Saying that <TT>L</TT> is local
means that <TT>L</TT> exists only while the function <TT>foo</TT>
is executing, and furthermore this <TT>L</TT> is distinct from any
other variable named <TT>L</TT>.  By contrast, the assignment of the form
<PRE>
<TT>               G =: expression</TT>
</PRE>
causes the value of <TT>expression</TT> to be assigned to a
global variable named <TT>G</TT>. Saying that <TT>G</TT> is global
means that the unique variable <TT>G</TT> exists
independently, in its own right.
<p>
To illustrate, we define two GLOBAL variables called
<TT>L</TT> and <TT>G</TT>, then execute <TT>foo</TT> to show that the <TT>L</TT> mentioned in <TT>foo</TT>
is not the same as global <TT>L</TT>, while the <TT>G</TT> mentioned in foo is the same
as global G:
<PRE>
<TT>   L =: 'old L'</TT>
<TT>   G =: 'old G'</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>foo</TT></TD>
<TD><TT>foo 'new'</TT></TD>
<TD><TT>L</TT></TD>
<TD><TT>G</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+-------+<BR>
|3|:|L =.&nbsp;&nbsp;y|<BR>
| | |G =:&nbsp;&nbsp;y|<BR>
| | |L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<BR>
+-+-+-------+</TT></TD>
<TD><TT>new</TT></TD>
<TD><TT>old L</TT></TD>
<TD><TT>new</TT></TD>
</TABLE>
<p>
With versions of J from J6 onward, it is regarded as an
error to make a global assignment (with <TT>=:</TT>) to a variable
with the same name as an already-existing local variable.
<p>
For example, the argument variables <TT>x</TT> and <TT>y</TT> are local,
so it would normally be an error in an explicit verb to make
a global assignment to a variable named <TT>y</TT> .
<PRE>
<TT>   foo =: 3 : 0</TT>
<TT>z =. y + 1</TT>
<TT>y =: 'hello'</TT>
<TT>z</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   foo 6 </TT>
<TT>|domain error: foo</TT>
<TT>|   y    =:'hello'</TT>
<TT>   </TT>
</PRE>
If we really, really wanted to assign to a global named <TT>y</TT>
from within an explicit definition, the local <TT>y</TT> must first be erased.
<PRE>
<TT>   foo =: 3 : 0</TT>
<TT>z =. y+1</TT>
<TT>erase <'y'</TT>
<TT>y =: 'hello'</TT>
<TT>z</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   foo 6</TT>
<TT>7</TT>
<TT>   y</TT>
<TT>hello</TT>
<TT>   </TT>
<TT>   </TT>
</PRE>
<A NAME="07"></A>
<H3>12.2.2  Local Functions</H3>
We have seen local variables, which are nouns.
We may also have local functions.
A local function may be tacit or explicit,  as in the following  example
<PRE>
<TT>   foo =: 3 : 0</TT>
<TT>Square  =. *:</TT>
<TT>Cube    =. 3 : 'y * y * y'</TT>
<TT>(Square y) + (Cube y)</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   foo 2</TT>
<TT>12</TT>
</PRE>
However, what we can't have is an explicit local function defined by
an inner multiline body Recall that a multiline body is a script
terminated by a solo right parenthesis, so we cannot have one such body inside another.
Instead, we could use an alternative form for the body of an inner
function, such as <TT>scale</TT> in the following example:
<PRE>
<TT>   FTOC =: 3 : 0</TT>
<TT>   line1   =. 'k =. 5 % 9'</TT>
<TT>   line2   =. 'k * y'</TT>
<TT>scale =. 3 : (line1 ; line2)  </TT>
<TT>scale y - 32</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   FTOC 212</TT>
<TT>100</TT>
</PRE>
One final point on the topic of inner functions.
A name, of a variable or function, is either global or local. If it is local, then
that means it is recognised in the function in which it is defined. However
it is not recognised in any inner function. For example:
<PRE>
<TT>   K =: 'hello '</TT>
<TT>   </TT>
<TT>   zip =: 3 : 0</TT>
<TT>K =. 'goodbye '</TT>
<TT>zap =. 3 : 'K , y'</TT>
<TT>zap y</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   zip 'George'</TT>
<TT>hello George</TT>
</PRE>
We see that there is a global <TT>K</TT> and a local <TT>K</TT>. The inner function
<TT>zap</TT> uses the global <TT>K</TT> because the <TT>K</TT> which is local to
<TT>zip</TT> is not local to <TT>zap</TT>.
<A NAME="08"></A>
<A NAME="09"></A>
<H3>12.2.3  Multiple and Indirect Assignments</H3>
J provides a convenient means of unpacking a list by
assigning
different names to different items.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>'day mo yr' =: 16 10 95</TT></TD>
<TD><TT>day</TT></TD>
<TD><TT>mo</TT></TD>
<TD><TT>yr</TT></TD>
<TR VALIGN=TOP>
<TD><TT>16 10 95</TT></TD>
<TD><TT>16</TT></TD>
<TD><TT>10</TT></TD>
<TD><TT>95</TT></TD>
</TABLE>
<p>
Instead of a simple name to the left of the assignment,
we have a string with names separated by spaces.
<p>
A variation uses a boxed set of names:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>('day';'mo';'yr') =: 17 11 96</TT></TD>
<TD><TT>day</TT></TD>
<TD><TT>mo</TT></TD>
<TD><TT>yr</TT></TD>
<TR VALIGN=TOP>
<TD><TT>17 11 96</TT></TD>
<TD><TT>17</TT></TD>
<TD><TT>11</TT></TD>
<TD><TT>96</TT></TD>
</TABLE>
<p>
The parentheses around the left hand of the
assignment force evaluation as a set of names, to give
what is called "indirect assignment".
To illustrate:
<PRE>
<TT>   N =: 'DAY';'MO';'YR'</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>(N) =: 18 12 97</TT></TD>
<TD><TT>DAY</TT></TD>
<TD><TT>MO</TT></TD>
<TD><TT>YR</TT></TD>
<TR VALIGN=TOP>
<TD><TT>18 12 97</TT></TD>
<TD><TT>18</TT></TD>
<TD><TT>12</TT></TD>
<TD><TT>97</TT></TD>
</TABLE>
<p>
As a convenience, a multiple assignment will automatically
remove one layer of boxing from the right-hand side:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>(N) =: 19;'Jan';98</TT></TD>
<TD><TT>DAY</TT></TD>
<TD><TT>MO</TT></TD>
<TD><TT>YR</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+--+---+--+<BR>
|19|Jan|98|<BR>
+--+---+--+</TT></TD>
<TD><TT>19</TT></TD>
<TD><TT>Jan</TT></TD>
<TD><TT>98</TT></TD>
</TABLE>
<p>
<H3>12.2.4  Unpacking the Arguments</H3>
Every J function takes exactly one or exactly two
arguments - not zero and not more than two.
This may appear to be a limitation but in fact is not.
A collection of values can be
packaged up into a list, or boxed list, to form in effect
multiple arguments to the J function.
However, the J function must unpack
the values again. A convenient way
to do this is with the multiple assignment.
For example, the familiar formula to find the roots of a quadratic
<TT>(a*x^2) +(b*x)+c</TT>, given the vector of
coefficients <TT>a,b,c</TT> might be:
<PRE>
<TT>   rq =: 3 : 0</TT>
<TT>'a b c' =. y</TT>
<TT>((-b) (+,-) %: (b^2)-4*a*c) % (2*a)</TT>
<TT>)</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>rq 1 1 _6</TT></TD>
<TD><TT>rq 1 ; 1 ; _6</TT></TD>
<TR VALIGN=TOP>
<TD><TT>2 _3</TT></TD>
<TD><TT>2 _3</TT></TD>
</TABLE>
<p>
<A NAME="10"></A>
<A NAME="11"></A>
<H2>12.3  Control Structures</H2>
<H3>12.3.1  Review</H3>
Recall from <A HREF="04.htm">Chapter 04</A> the positive-difference function defined as:
<PRE>
<TT>   POSDIFF =: 4 : 0</TT>
<TT>if.   x > y</TT>
<TT>do.   x - y</TT>
<TT>else. y - x</TT>
<TT>end.</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   3 POSDIFF 4</TT>
<TT>1</TT>
</PRE>
Everything from  <TT>if.</TT> to <TT>end.</TT> is called a "control structure".
In it, <TT>if.</TT> <TT>do.</TT> <TT>else.</TT> and <TT>end.</TT> are called "control words".
<p>
The plan for this section is to use this example for a general
discussion of control structures, and then go on to look at
a number of particular control structures.
<H3>12.3.2  Layout</H3>
We can freely choose a layout for the expressions and control words forming
a control structure.
Immediately before or immediately after any control word,
any end-of-line is optional, so that we can choose to remove one or insert one.
For example, by removing as many as possible from <TT>POSDIFF</TT> we get
<PRE>
<TT>   PD =: 4 : 'if.  x > y  do.  x - y  else.  y - x  end. '</TT>
<TT>   </TT>
<TT>   3 PD 4</TT>
<TT>1</TT>
<TT>   </TT>
</PRE>
<H3>12.3.3  Expressions versus Control Structures</H3>
We speak of evaluating an expression.  We regard assignments as expressions, since
they produce values, but in this case it is natural to speak of "executing" the
assignment, since there is an effect as well as a value produced. We will
use the words "execute" and "evaluate" more or less interchangeably.
<p>
Executing (or evaluating) a control structure produces a value, the value of
one of the expressions within it.
Nevertheless, a  control structure is not an expression,
and cannot form part of an expression.
The following is a syntax error:
<PRE>
<TT>   foo =: 3 : '1 + if. y > 0 do. y else. 0 end.'</TT>
<TT>   </TT>
<TT>   foo 6</TT>
<TT>|syntax error: foo</TT>
<TT>|       1+</TT>
</PRE>
Observing the distinction between expressions and control structures,
we can say that the body of an explicit definition is a sequence of items,
where an item is
either an expression or a control structure.
Here is an example where the body is an expression followed by a control structure
followed by an expression.
<PRE>
<TT>   PD1 =: 4 : 0</TT>
<TT>w =. x - y</TT>
<TT>if. x > y do. z =. w  else. z =. - w end.</TT>
<TT>z</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   3 PD1 4</TT>
<TT>1</TT>
<TT>   </TT>
</PRE>
The value produced by a control structure is discarded if the
control structure it is not the last item in the sequence.
However, this value can be captured
when the item is the last, so that the value  becomes the result
delivered by the function.
<p>
Hence the previous example can be simplified to:
<PRE>
<TT>   PD2 =: 4 : 0</TT>
<TT>w =. x - y</TT>
<TT>if. x > y do. w else. - w end.</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   3 PD 4</TT>
<TT>1</TT>
<TT>   </TT>
</PRE>
<A NAME="12"></A>
<H3>12.3.4  Blocks</H3>
The examples above show the pattern:
<PRE>
<TT>                if. T do. B1 else. B2 end.</TT>
</PRE>
meaning: if the expression <TT>T</TT> evaluates to "true", then execute the
expression <TT>B1</TT>, and otherwise execute the expression <TT>B2</TT>.
<p>
<A NAME="aaa"> </A>
Expression <TT>T</TT> is regarded as evaluating to "true" if <TT>T</TT> evaluates to
any array of which the first element is not <TT>0</TT>.
<PRE>
<TT>   foo =: 3 : 'if.  y do. ''yes''  else. ''no''  end.'</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>foo 1 1 1</TT></TD>
<TD><TT>foo  'abc' </TT></TD>
<TD><TT>foo 0</TT></TD>
<TD><TT>foo 0 1</TT></TD>
<TR VALIGN=TOP>
<TD><TT>yes</TT></TD>
<TD><TT>yes</TT></TD>
<TD><TT>no</TT></TD>
<TD><TT>no</TT></TD>
</TABLE>
<p>
More generally,  <TT>T</TT>, <TT>B1</TT> and <TT>B2</TT> may be what are called "blocks".
A block is a sequence of items,  where an item is
either an expression  or a control structure. The result
delivered by a block is the value of the last item of the block.
<p>
Here is an example, to form the sum of a list, where the T-block
and the B2-block each consist of a sequence.
<PRE>
<TT>   sum =: 3 : 0</TT>
<TT>if. </TT>
<TT>    length  =. # y      NB. T block</TT>
<TT>    length  = 0         NB. T block</TT>
<TT>do. </TT>
<TT>    0                   NB. B1 block</TT>
<TT>else. </TT>
<TT>    first =. {. y       NB. B2 block</TT>
<TT>    rest  =. }. y       NB. B2 block</TT>
<TT>    first + sum rest    NB. B2 block</TT>
<TT>end.</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   sum 1 2 3</TT>
<TT>6</TT>
</PRE>
Here we see that the value of the T-block (true or false)
is the value of the last expression in the sequence, <TT>(length = 0)</TT>
<p>
The items of a block may be (inner) control structures.
For example, here is a function to classify the temperature of porridge:
<PRE>
<TT>   ClaTePo =: 3 : 0</TT>
<TT>if. y > 80  do.      'too hot'</TT>
<TT>else.</TT>
<TT>      if. y < 60 do. 'too cold'</TT>
<TT>      else.          'just right'</TT>
<TT>      end.</TT>
<TT>end.</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   ClaTePo 70</TT>
<TT>just right</TT>
</PRE>
<H3>12.3.5  Variants of if.</H3>
A neater version of the last example is:
<PRE>
<TT>   CLATEPO =: 3 : 0</TT>
<TT>if.     y > 80 do. 'too hot'</TT>
<TT>elseif. y < 60 do. 'too cold'</TT>
<TT>elseif. 1      do. 'just right'</TT>
<TT>end.</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   CLATEPO 70</TT>
<TT>just right</TT>
<TT>   </TT>
</PRE>
showing the pattern:
<PRE>
<TT>         if. T1 do. B1 elseif. T2 do. B2  ... elseif. Tn do. Bn end.</TT>
</PRE>
Notice that according to this scheme, if
all of the tests <TT>T1</TT> ... <TT>Tn</TT> fail,
then none of the blocks <TT>B1</TT> .. <TT>Bn</TT> will be executed.
Consequently we may wish to make <TT>Tn</TT> a catch-all
test, with the constant value <TT>1</TT>, as in the example
of <TT>CLATEPO</TT> above.
<p>
If all the tests do fail, so that none of the blocks B0 ... Bn
is executed, then the result will be
<TT>i. 0 0</TT> which is a J convention for a null value.
<PRE>
<TT>   foo =: 3 : 'if. y = 1 do. 99 elseif. y = 2 do. 77 end. '</TT>
<TT>   </TT>
<TT>   (i. 0 0) -: foo 0</TT>
<TT>1</TT>
<TT>   </TT>
</PRE>
There is also the pattern:
<PRE>
<TT>          if. T do. B end.</TT>
</PRE>
Here either <TT>B</TT> is executed or it is not. For example, positive-difference yet again:
<PRE>
<TT>   PD =: 4 : 0</TT>
<TT>z =. x - y</TT>
<TT>if. y > x do. z =. y - x end.</TT>
<TT>z</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   3 PD 4</TT>
<TT>1</TT>
<TT>   </TT>
</PRE>
<A NAME="13"></A>
<H3>12.3.6  The select. Control Structure</H3>
Consider this example of a verb to classify a name, using an <TT>if.</TT>
control structure.
<PRE>
<TT>   class =: 3 : 0</TT>
<TT>t =. 4 !: 0 < y</TT>
<TT>if.     t = 0 do. 'noun'</TT>
<TT>elseif. t = 1 do. 'adverb'</TT>
<TT>elseif. t = 2 do. 'conjunction'</TT>
<TT>elseif. t = 3 do. 'verb'</TT>
<TT>elseif. 1     do. 'bad name'</TT>
<TT>end.</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   class 'class'</TT>
<TT>verb</TT>
<TT>   class 'oops'</TT>
<TT>bad name</TT>
<TT>   </TT>
</PRE>
A neater formulation is allowed by the <TT>select.</TT> control structure.
<PRE>
<TT>   CLASS =: 3 : 0</TT>
<TT>select.  4 !: 0 < y</TT>
<TT>case. 0 do. 'noun'</TT>
<TT>case. 1 do. 'adverb'</TT>
<TT>case. 2 do. 'conjunction'</TT>
<TT>case. 3 do. 'verb'</TT>
<TT>case.   do. 'bad name'</TT>
<TT>end.</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   CLASS 'CLASS'</TT>
<TT>verb</TT>
<TT>   CLASS 'oops'</TT>
<TT>bad name</TT>
<TT>   </TT>
</PRE>
Suppose we are interested only in a three-way classification, into
nouns, verbs and operators (meaning adverbs or conjunctions).
We could of course write:
<PRE>
<TT>   Class =: 3 : 0</TT>
<TT>select.  4 !: 0 < y</TT>
<TT>case. 0 do. 'noun'</TT>
<TT>case. 1 do. 'operator'</TT>
<TT>case. 2 do. 'operator'</TT>
<TT>case. 3 do. 'verb'</TT>
<TT>case.   do. 'bad name'</TT>
<TT>end.</TT>
<TT>)</TT>
<TT>   </TT>
</PRE>
but this can be abbreviated as:
<PRE>
<TT>   Clss =: 3 : 0</TT>
<TT>select.  4 !: 0 < y</TT>
<TT>case. 0    do. 'noun'</TT>
<TT>case. 1;2  do. 'operator'</TT>
<TT>case. 3    do. 'verb'</TT>
<TT>case.      do. 'bad name'</TT>
<TT>end.</TT>
<TT>)</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>Clss 'Clss' </TT></TD>
<TD><TT>o =: @: </TT></TD>
<TD><TT>Clss 'o' </TT></TD>
<TD><TT>Clss 'oops' </TT></TD>
<TR VALIGN=TOP>
<TD><TT>verb</TT></TD>
<TD><TT>+--+<BR>
|@:|<BR>
+--+</TT></TD>
<TD><TT>operator</TT></TD>
<TD><TT>bad name</TT></TD>
</TABLE>
<p>
<A NAME="14"></A>
<H3>12.3.7  The while. and whilst. Control Structures</H3>
In the general pattern
<PRE>
<TT>             while. T do. B end.</TT>
</PRE>
block <TT>B</TT> is executed repeatedly
so long as block <TT>T</TT> evaluates to true.
Here is an example, a version of the factorial function:
<PRE>
<TT>   fact =: 3 : 0</TT>
<TT>r =. 1</TT>
<TT>while. y > 1</TT>
<TT>do.    r  =. r * y</TT>
<TT>       y =. y - 1</TT>
<TT>end.</TT>
<TT>r</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   fact 5</TT>
<TT>120</TT>
</PRE>
The  variation <TT>whilst. T do. B end.</TT> means
<PRE>
<TT>             B</TT>
</PRE>
<PRE>
<TT>             while. T do. B end.</TT>
</PRE>
that is, block <TT>B</TT> is executed once,  and then
repeatedly so long as block <TT>T</TT> is true.
<A NAME="15"></A>
<H3>12.3.8  for. </H3>
The pattern
<PRE>
<TT>             for_a. A do. B. end.</TT>
</PRE>
means: for each item <TT>a</TT> in array <TT>A</TT>, execute block <TT>B</TT>.
Here <TT>a</TT> may be any name;
the variable <TT>a</TT> takes on the value
of each item of <TT>A</TT> in turn.
For example,  to sum a list:
<PRE>
<TT>   Sum =: 3 : 0</TT>
<TT>r =. 0</TT>
<TT>for_term. y do.  r =. r+term end.</TT>
<TT>r</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   Sum 1 2 3</TT>
<TT>6</TT>
</PRE>
In addition to the variable <TT>a</TT> for the value of an item,
the variable <TT>a_index</TT> is available to give
the index of the item. For example, this function numbers the items:
<PRE>
<TT>   f3 =: 3 : 0</TT>
<TT>r =. 0 2 $ 0</TT>
<TT>for_item. y do.  r =. r , (item_index; item) end.</TT>
<TT>r</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   f3 'ab';'cdef';'gh'</TT>
<TT>+-+----+</TT>
<TT>|0|ab  |</TT>
<TT>+-+----+</TT>
<TT>|1|cdef|</TT>
<TT>+-+----+</TT>
<TT>|2|gh  |</TT>
<TT>+-+----+</TT>
</PRE>
Another variation is the pattern <TT>for. A do. B end.</TT>
in which block <TT>B</TT> is executed as many times as there are items of <TT>A</TT>.
For example, here is a verb to count the items of a list.
<PRE>
<TT>   f4 =: 3 : 0</TT>
<TT>count =. 0</TT>
<TT>for. y do. count =. count+1 end.</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   f4 'hello'</TT>
<TT>5</TT>
<TT>   </TT>
</PRE>
<A NAME="16"></A>
<H3>12.3.9  The return. Control Word</H3>
Suppose we need to define a verb to test for a small integer scalar.
 "Small" means magnitude less than 100, say.
This would do:
<PRE>
<TT>   test =: 3 : 0</TT>
<TT>    if. 4 = 3 !:0 y  do.       NB. integer ?</TT>
<TT>        if. 0 = # $ y  do.     NB. scalar ?</TT>
<TT>            100 > | y          NB. small ?</TT>
<TT>        else. 0</TT>
<TT>        end.</TT>
<TT>    else. 0</TT>
<TT>    end.</TT>
<TT>)   </TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>test 17</TT></TD>
<TD><TT> test 'hello' </TT></TD>
<TD><TT>test 1 2 3</TT></TD>
<TD><TT>test 101</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1</TT></TD>
<TD><TT>0</TT></TD>
<TD><TT>0</TT></TD>
<TD><TT>0</TT></TD>
</TABLE>
<p>
Clearly we must check for an integer before testing the integer for smallness.
Hence the nested ifs.
<p>
Here is a neater alternative:
<PRE>
<TT>   test =: 3 : 0</TT>
<TT>    if. 4 ~: 3!:0 y do. 0 return. end.    NB. not integer</TT>
<TT>    if. 0 ~: # $ y  do. 0 return. end.    NB. not scalar</TT>
<TT>    100 > | y                             NB. small ?</TT>
<TT>)</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>test 17</TT></TD>
<TD><TT> test 'hello' </TT></TD>
<TD><TT>test 1 2 3</TT></TD>
<TD><TT>test 101</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1</TT></TD>
<TD><TT>0</TT></TD>
<TD><TT>0</TT></TD>
<TD><TT>0</TT></TD>
</TABLE>
<p>
The effect of the <TT>return.</TT> control word is to short-circuit
any further execution of the verb, delivering the most-recently
computed value,  which in this example will be <TT>0</TT> at each <TT>return.</TT>
 .
<H3>12.3.10  Other Control Structures</H3>
<A HREF="29.htm">Chapter 29</A> covers the control structure
<TT>try.  catch.  end.</TT> . Other control words and structures
are covered in the J Dictionary
<p>
This is the end of Chapter 12.
  </tr> </table>
<HR>
 <p ALIGN=CENTER>
 <A HREF="13.htm"> NEXT </A> <BR>
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR>
<A HREF="kwic.htm"> Index </A>
<HR>
<P ALIGN=CENTER>
<FONT SIZE=-1>The examples in this chapter
were executed using J version 802 beta.
 This chapter last updated 01 Nov 2014<BR>
Copyright &copy; Roger Stokes 2014.
 This material may be freely reproduced,
provided that acknowledgement is made.
</FONT>
 <!--bottom jump start--><hr><a href="13.htm">&gt;&gt;</a>&nbsp;
<a href="11.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY>
 </HTML>
