<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
       
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=UTF-8"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)">   
  <TITLE>   Ch 13: Explicit Operators</TITLE> 
  <STYLE TYPE="text/css"> 
    TT  {font-size: 12pt; COLOR: BLUE} 
    PRE {font-size: 12pt; COLOR: BLUE} 
                                    
    table.jtable {                  
         border-width: thin;        
         border-spacing: 2px;       
         border-style: solid;       
         border-color: gray;        
         border-collapse: collapse; 
         background-color: white;   
     }                              
     table.jtable td {              
         border-width: 1px;         
         padding: 10px;             
         border-style: solid;       
         border-color: gray;        
         background-color: white;   
     }                              
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="14.htm">&gt;&gt;</a>&nbsp;
<a href="12.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <A NAME="01"></A>
<H1>Chapter 13: Explicit Operators</H1>
This chapter covers explicit definition of operators, that is, adverbs 
and conjunctions defined with the colon conjunction. 
<p>
The scheme for explicit definition is: 
<PRE>
<TT>            1 : body     is an adverb</TT>
</PRE>
<PRE>
<TT>            2 : body     is a conjunction</TT>
</PRE>
where <TT>body</TT> is one or more lines of text. 
The possibilities for the result produced by an operator so defined 
are: a tacit verb, an explicit verb, a noun or another operator. We will 
look at each case in turn.
<A NAME="02"></A>
<H2>13.1  Operators Generating Tacit Verbs</H2>
Recall from <A HREF="07.htm">Chapter 07</A> the built-in rank conjunction <TT>"</TT>. 
For any verb <TT>u</TT>, the expression <TT>u"0</TT> is a verb which applies <TT>u</TT> to the 
0-cells (scalars) of its argument. 
<p>
Now suppose we aim to define an adverb <TT>A</TT>, 
to generate a verb according to the scheme: for any verb <TT>u</TT>
<PRE>
<TT>         u A   is to be     u " 0</TT>
</PRE>
Adverb <TT>A</TT> is defined explicitly like this: 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>A =: 1 : 'u " 0'</TT></TD>
<TD><TT>f =: < A</TT></TD>
<TD><TT>f  1 2</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 : 'u " 0'</TT></TD>
<TD><TT><"0</TT></TD>
<TD><TT>+-+-+<BR>
|1|2|<BR>
+-+-+</TT></TD>
</TABLE>
<p>
In the definition <TT>(A =: 1 : 'u " 0')</TT> 
the left argument of the colon is <TT>1</TT>, meaning
"adverb". 
<p>
The right argument is the string <TT>'u " 0'</TT>. 
This string has the form of a tacit verb, 
where <TT>u</TT> stands for whatever verb will be supplied as argument to the 
adverb <TT>A</TT>. 
In the explicit definition of an adverb, the argument-variable is always <TT>u</TT>.
<p>
<p>
Adverbs are so called because, in English grammar, 
adverbs modify verbs.  In J,  by contrast,
adverbs and conjunctions in general can take nouns 
or verbs as arguments. In the following example,
adverb <TT>W</TT> is to generate a verb
according to the scheme: for integer <TT>u</TT> 
<PRE>
<TT>        u W    is to be   < " u</TT>
</PRE>
that is, <TT>u W</TT> boxes the rank-<TT>u</TT> cells of the argument.
The definition of <TT>W</TT> is shown by:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>W =: 1 : '< " u'</TT></TD>
<TD><TT>0 W</TT></TD>
<TD><TT>z =: 'abc'</TT></TD>
<TD><TT> 0 W z</TT></TD>
<TD><TT>1 W z</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 : '< " u'</TT></TD>
<TD><TT><"0</TT></TD>
<TD><TT>abc</TT></TD>
<TD><TT>+-+-+-+<BR>
|a|b|c|<BR>
+-+-+-+</TT></TD>
<TD><TT>+---+<BR>
|abc|<BR>
+---+</TT></TD>
</TABLE>
<p>
For another example of an adverb, 
recall the dyad <TT>#</TT> where <TT>x # y</TT>
selects items from <TT>y</TT> according to the 
bitstring <TT>x</TT>.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y =: 1 0 2 3</TT></TD>
<TD><TT> 1 0 1 1 # y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>1 2 3</TT></TD>
</TABLE>
<p>
To select items greater than 0, we can apply 
the test-verb <TT>(>&amp;0)</TT>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y </TT></TD>
<TD><TT>>&amp;0 y</TT></TD>
<TD><TT>(>&amp;0 y) #  y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>1 0 1 1</TT></TD>
<TD><TT>1 2 3</TT></TD>
</TABLE>
<p>
A tacit verb to select items greater than <TT>0</TT> 
can be written as a fork <TT>f</TT>:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>f =: >&amp;0 # ]</TT></TD>
<TD><TT>f y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>>&amp;0 # ]</TT></TD>
<TD><TT>1 2 3</TT></TD>
</TABLE>
<p>
This fork can be generalised into an adverb, <TT>B</TT>
say, 
to generate a verb to select items according 
to whatever verb is supplied in place of the test <TT>>&amp;0</TT>.  
<PRE>
<TT>   B =: 1 : 'u # ]'</TT>
</PRE>
If we supply <TT>>&amp;1</TT> as a test-verb:  
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>g =: (>&amp;1) B</TT></TD>
<TD><TT> y </TT></TD>
<TD><TT>g y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>>&amp;1 # ]</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>2 3</TT></TD>
</TABLE>
<p>
We see that the body of <TT>B</TT> is the 
fork to be generated, with <TT>u</TT> standing
for the argument-verb to be supplied.
Conjunctions, taking two arguments, are defined with <TT>(2 : '...')</TT>.
The left argument is <TT>u</TT> and the right is <TT>v</TT>
<p>
For example, consider a conjunction <TT>THEN</TT>, to apply one verb and then 
apply
another to the result, that is, a composition. 
The scheme we want is:
<PRE>
<TT>           u THEN v     is to be v @: u</TT>
</PRE>
and the definition of <TT>THEN</TT> is:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>THEN =: 2 : 'v @: u'</TT></TD>
<TD><TT>h =: *: THEN <</TT></TD>
<TD><TT>h 1 2 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>2 : 'v @: u'</TT></TD>
<TD><TT><@:*:</TT></TD>
<TD><TT>+-----+<BR>
|1 4 9|<BR>
+-----+</TT></TD>
</TABLE>
<p>
For another example, consider 
counting (with <TT>#</TT>) those items of a list which are 
greater than 0. A verb to do this might be:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>foo =: # @: (>&amp;0 # ])</TT></TD>
<TD><TT>y </TT></TD>
<TD><TT>foo y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>#@:(>&amp;0 # ])</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
We can generalize <TT>foo</TT> to apply a given verb <TT>u</TT>
to items selected by another given verb <TT>v</TT>.
We define a conjunction <TT>C</TT> with the scheme
<PRE>
<TT>             u C v   is to be   u @: (v # ]) </TT>
</PRE>
and the definition of <TT>C</TT> is straightforwardly:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>C =: 2 : 'u @: (v # ])'</TT></TD>
<TD><TT>f =: # C (>&amp;0)</TT></TD>
<TD><TT>y</TT></TD>
<TD><TT>f y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>2 : 'u @: (v # ])'</TT></TD>
<TD><TT>#@:(>&amp;0 # ])</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
<H3>13.1.1  Multiline Bodies</H3>
The right argument of colon we may call the body of the definition of our 
operator. 
In the examples so far, the body was a string,  a schematic tacit verb,
for example <TT>'v .@: u'</TT> .  
This is the verb to be delivered by  our operator.  
More generally, the body can be several lines. The idea is that,
when the operator is applied to its argument, 
the whole body is executed. That is, each line is
evaluated in turn and the result delivered is 
the value of the last line evaluated. This is exactly analogous to 
explicit verbs, 
except that here the result is a value of type "function"  rather than of 
type  "array".
<p>
Here is an example of a multi-line body, 
the previous example done in two steps. 
To apply <TT>u</TT> to items selected by <TT>v</TT>, a scheme 
for conjunction <TT>D</TT> could be written:
<PRE>
<TT>         u D v  is to be  (u @: select) where select is v # ] </TT>
</PRE>
and <TT>D</TT> defined by
<PRE>
<TT>   D =: 2 : 0</TT>
<TT>select =: v # ]</TT>
<TT>u @: select</TT>
<TT>)</TT>
</PRE>
Again counting items greater than 0, we have
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>f =: # D (>&amp;0)</TT></TD>
<TD><TT>y</TT></TD>
<TD><TT>f y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>#@:select</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
The first line of <TT>D</TT> computes an inner function <TT>select</TT> from the right 
argument. 
The second line composes <TT>select</TT> with the left 
argument, and this is the result-verb delivered 
by <TT>D</TT>.
<p>
Now this definition has an undesirable feature:
we see that <TT>select</TT> is defined as a global (with <TT>=:</TT>).
It would be better if <TT>select</TT> were local.
<p>
However, we can see, by looking at the
value of the verb <TT>f</TT> above,
that <TT>select</TT> must be available when we apply
<TT>f</TT>. If <TT>select</TT> is local to
<TT>D</TT>, it will not be available when needed. 
<p>
We can in effect make <TT>select</TT> local 
by using the "Fix" adverb  <TT>(f.)</TT> (letter-f dot.)
The effect
of applying "Fix" to a verb
is to produce an equivalent verb
in which names are replaced 
by 
by their corresponding definitions.
That is, "Fix" resolves a tacit verb into its
primitives. For example:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>p =: +</TT></TD>
<TD><TT>q =: *</TT></TD>
<TD><TT>r =: p,q</TT></TD>
<TD><TT>r f.</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+</TT></TD>
<TD><TT>*</TT></TD>
<TD><TT>p , q</TT></TD>
<TD><TT>+ , *</TT></TD>
</TABLE>
<p>
Here is how we use Fix to enable <TT>select</TT>
to be local.  In the example below, notice that
we Fix the result-expression
on the last line:
<PRE>
<TT>   E =: 2 : 0</TT>
<TT>select =. v # ]</TT>
<TT>(u @: select) f.</TT>
<TT>)</TT>
<TT>   </TT>
</PRE>
Now a verb to count greater-than-0 items can be written:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>g =: # E (>&amp;0)</TT></TD>
<TD><TT>y</TT></TD>
<TD><TT>g y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>#@:(>&amp;0 # ])</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
We see that <TT>g</TT>, unlike <TT>f</TT>, has no local names. 
<H2>13.2  New Definitions from Old</H2>
Suppose we aim to develope a function which, 
given a list of numbers,
replaces each number by the mean of its 
two neighbours in the list, the previous and the next.
For the first or last, we assume a neighbour is zero.
<p>
A suitable "data smoothing" function could be written
<PRE>
<TT>   sh    =: |. !. 0    NB. shift, entering zero</TT>
<TT>   prev  =: _1 &amp; sh    NB. right shift</TT>
<TT>   next  =: 1 &amp; sh     NB. left shift</TT>
<TT>   halve =: -:</TT>
<TT>   </TT>
<TT>   smoo  =: halve @: (prev + next)</TT>
<TT>   </TT>
</PRE>
so for a list of numbers <TT>N</TT> we might see :
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>N =: 6 2 8 2 4</TT></TD>
<TD><TT>prev N</TT></TD>
<TD><TT>next N</TT></TD>
<TD><TT>smoo N</TT></TD>
<TR VALIGN=TOP>
<TD><TT>6 2 8 2 4</TT></TD>
<TD><TT>0 6 2 8 2</TT></TD>
<TD><TT>2 8 2 4 0</TT></TD>
<TD><TT>1 7 2 6 1</TT></TD>
</TABLE>
<p>
Now suppose we also want another smoothing function which
rotates the data rather than shifting in zero. 
(The data might be, say,  samples of a repeated waveform.)
<p>
The only change needed from <TT>smoo</TT> is that the shift verb
<TT>sh</TT> must become a rotate verb, that is,  (<TT>|.</TT>). 
<p>
If the definition of <TT>smoo</TT> were large and complicated 
we might prefer to avoid entering it again.  Instead,
we could re-evaluate the definition we already have, 
in an environment in which the name <TT>sh</TT> means "rotate".
This environment can be conveniently provided by 
 a little adverb, <TT>SMOO</TT> say,
 with <TT>|.</TT> (rotate) for its argument:
<PRE>
<TT>   SMOO =: 1 : ('sh =. u' ; 'smoo f.')</TT>
</PRE>
so the rotating variant of <TT>smoo</TT> is given by
<PRE>
<TT>   rv =: |. SMOO</TT>
<TT>   </TT>
<TT>   rv</TT>
<TT>-:@:(_1&amp;|. + 1&amp;|.)</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> N </TT></TD>
<TD><TT>smoo N</TT></TD>
<TD><TT>rv N</TT></TD>
<TR VALIGN=TOP>
<TD><TT>6 2 8 2 4</TT></TD>
<TD><TT>1 7 2 6 1</TT></TD>
<TD><TT>3 7 2 6 4</TT></TD>
</TABLE>
<p>
This example shows using an adverb to generalise an expression
 (<TT>smoo</TT>) to a function In summary, since <TT>smoo</TT> is defined in terms of <TT>sh</TT>, 
we have generalised it to a function taking <TT>sh</TT> 
as argument.
<A NAME="03"></A>
<H2>13.3  Operators Generating Explicit Verbs</H2>
Suppose we aim to define a conjunction <TT>H</TT> say, with the scheme:
<PRE>
<TT>  u H v    is to be     3 : 0</TT>
<TT>                        z =. v y</TT>
<TT>                        y u z</TT>
<TT>                        )</TT>
<TT>   </TT>
</PRE>
There is a messy way and a neat way to do this.
Let me show you the messy way first, so that the merits of the neat way
can be appreciated.
<p>
The messy way:  we can write <TT>H</TT> in the same style as the previous examples.
That is, the body of the definition computes a value 
which is delivered when the operator is applied  to arguments.
In this case the value is to be of the form <TT>3 : string</TT>
where <TT>string</TT> must be built from the arguments. For example:
<PRE>
<TT>   H =:  2 : 0</TT>
<TT>    U =. 5!:5 < 'u'</TT>
<TT>    V =. 5!:5 < 'v'</TT>
<TT>    string =. 'z =. ', V , 'y',  LF</TT>
<TT>    string =. string , 'y ', U , ' z', LF</TT>
<TT>    3 : string</TT>
<TT>)</TT>
<TT>   </TT>
</PRE>
and we see
<PRE>
<TT>   foo =: + H *:</TT>
<TT>   foo 5</TT>
<TT>30</TT>
<TT>   </TT>
</PRE>
The conjunction <TT>H</TT> is pretty ugly but the value of the generated function <TT>foo</TT> is plain to see:
<PRE>
<TT>   foo</TT>
<TT>3 : 0</TT>
<TT>z =. *:y</TT>
<TT>y + z</TT>
<TT>)</TT>
<TT>   </TT>
</PRE>
Now we come to the neat way to define this conjunction.  
So far we have seen 
operators where the body is executed to deliver the result.
Let us say they are operators of the first kind. Now we look at operators of
the second kind, where the body of the operator is 
not executed but instead serves as a template for 
the verb to be generated. For example:
<PRE>
<TT>   K =: 2 : 0</TT>
<TT>z =. v y</TT>
<TT>y u z</TT>
<TT>)</TT>
<TT>   </TT>
</PRE>
Clearly the definition of <TT>K</TT> is neater than the definition
of <TT>H</TT> but nevertheless they are equivalent.  Notice that the body of <TT>K</TT>
contains both the argument-variables <TT>u</TT> and <TT>v</TT> for the operator, and also
the argument-variable <TT>y</TT> of the generated verb. It is this combination 
of argument variables which determines that the operator is of the second kind.
<PRE>
<TT>   bar =: + K *:</TT>
<TT>   </TT>
<TT>   bar 5</TT>
<TT>30</TT>
<TT>   </TT>
</PRE>
The generated verb <TT>bar</TT> is 
equivalent to <TT>foo</TT> but it is displayed differently.
<PRE>
<TT>   bar</TT>
<TT>+ (2 : 0) *:</TT>
<TT>z =. v y</TT>
<TT>y u z</TT>
<TT>)</TT>
<TT>   </TT>
</PRE>
Now we look in more detail at examples of operators of the second kind.
<H3>13.3.1  Adverb Generating Monad</H3>
Consider the following explicit monadic verb, <TT>e</TT>. 
It selects items greater than 0, by
applying the test-verb <TT>>&amp;0</TT>. 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>e =: 3 : '(>&amp;0 y) # y'</TT></TD>
<TD><TT>y</TT></TD>
<TD><TT>e y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3 : '(>&amp;0 y) # y'</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>1 2 3</TT></TD>
</TABLE>
<p>
We can generalise <TT>e</TT> to form an adverb, <TT>F</TT> say,
which selects items according to a supplied 
test-verb. The scheme we want is: for any verb <TT>u</TT>: 
<PRE>
<TT>         u F   is to be    3 : '(u y) # y'</TT>
</PRE>
Adverb <TT>F</TT> is defined by:
<PRE>
<TT>   F  =: 1 : '(u y) # y'</TT>
</PRE>
Now the verb <TT>>&amp;1 F</TT> will select items greater than 1:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y</TT></TD>
<TD><TT>>&amp;1 F y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>2 3</TT></TD>
</TABLE>
<p>
In the body of <TT>F</TT>
the variable <TT>u</TT> stands for a verb to be 
supplied as argument to adverb <TT>F</TT>.
If this argument is say <TT>>&amp;1</TT>, then
<TT>y</TT> stands for an argument to the generated
explicit verb <TT>3 : '(>&amp;1 y) # y'</TT>.
<p>
That is, our method of defining 
the generated verb is to write out the body
of an explicit definition, with <TT>u</TT>
at places where a supplied verb is to be substituted.
<H3>13.3.2  Adverb Generating Explicit Dyad</H3>
<p>
Suppose we want an adverb <TT>W</TT>, say, with the scheme: for any verb <TT>u</TT>
<PRE>
<TT>           u W     is to be      4 : '(u x) + (u y)'</TT>
</PRE>
Recall from <TT><A HREF="12.htm">Chapter 12</A></TT> that there is another way to write an explicit dyad.
Rather than beginning with <TT>4 : </TT> we can begin with <TT>3 : </TT>
and write a multi-line body in which a solo colon 
separates monadic and dyadic cases. Here we have no monadic case,
so the scheme above can be equivalently written as:
<PRE>
<TT>           u W    is to be     3 : 0</TT>
</PRE>
<PRE>
<TT>                               :    </TT>
</PRE>
<PRE>
<TT>                               (u x) + (u y)</TT>
</PRE>
<PRE>
<TT>                               )</TT>
</PRE>
The explicit definition of adverb <TT>W</TT> follows straightforwardly:
<PRE>
<TT>   W =: 1 : 0</TT>
<TT>:</TT>
<TT>(u x) + (u y)</TT>
<TT>)</TT>
<TT>      </TT>
</PRE>
We see:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>(*: 2) + (*: 16)</TT></TD>
<TD><TT>2 (*: W) 16</TT></TD>
<TR VALIGN=TOP>
<TD><TT>260</TT></TD>
<TD><TT>260</TT></TD>
</TABLE>
<p>
For another example, suppose we want an adverb, <TT>T</TT> say,  to apply a given verb
<TT>u</TT> to every combination of a scalar in vector argument <TT>x</TT> with a scalar in
vector argument <TT>y</TT>.  There is a built-in adverb <TT>/</TT> called "Table" for this,
but here is a home-made version.
The scheme is:
<PRE>
<TT>           u T   is to be 4 : ' x (u " 0 0) " 0 1  y' </TT>
</PRE>
that is, 
<PRE>
<TT>           u T   is to be 3 : 0</TT>
</PRE>
<PRE>
<TT>                          :</TT>
</PRE>
<PRE>
<TT>                          x  (u " 0 0) " 0 1  y</TT>
</PRE>
<PRE>
<TT>                          )</TT>
</PRE>
and so <TT>T</TT> is defined by
<PRE>
<TT>   T =: 1 : 0</TT>
<TT>:</TT>
<TT>x  ((u " 0 0) " 0 1)  y</TT>
<TT>)</TT>
<TT>   </TT>
<TT>   </TT>
</PRE>
so we see:
<PRE>
<TT>   1 2 3 + T 4 5 6 7</TT>
<TT>5 6 7  8</TT>
<TT>6 7 8  9</TT>
<TT>7 8 9 10</TT>
<TT>   </TT>
<TT>   </TT>
<TT>   </TT>
</PRE>
<H3>13.3.3  Conjunction Generating Explicit Monad</H3>
A conjunction takes two arguments,
called <TT>u</TT> and <TT>v</TT>. 
<p>
As before, we specify the generated verb
by writing out the body of an explicit verb. Here
<TT>y</TT> stands for the argument of the generated verb
and <TT>u</TT> and <TT>v</TT> stand for argument-verbs 
to be supplied to the conjunction. 
In this example the body is multi-line. As before,
<TT>u</TT> will be applied to items selected by <TT>v</TT>
<PRE>
<TT>   G  =: 2 : 0</TT>
<TT>selected =. (v y) # y</TT>
<TT>u selected</TT>
<TT>)</TT>
</PRE>
Now a verb to count greater-than-zero items 
can be written as <TT># G (>&amp;0)</TT>:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> y </TT></TD>
<TD><TT># G (>&amp;0)  y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
<H3>13.3.4  Generating a Explicit Dyad</H3>
Suppose we want a conjunction <TT>H</TT> such that, schematically, for verbs 
<TT>u</TT> and <TT>v</TT>
<PRE>
<TT>         u H v    is to be    4 : '(u x) + (v y)'</TT>
</PRE>
or equivalently, as we saw above: 
<PRE>
<TT>         u H v    is to be    3 : 0</TT>
</PRE>
<PRE>
<TT>                              :    </TT>
</PRE>
<PRE>
<TT>                              (u x) + (v y)</TT>
</PRE>
<PRE>
<TT>                              ) </TT>
</PRE>
The explicit definition of <TT>H</TT> follows straightforwardly:
<PRE>
<TT>   H =: 2 : 0</TT>
<TT>:</TT>
<TT>(u x) + (v y)</TT>
<TT>)</TT>
<TT>      </TT>
</PRE>
We see:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>(*: 2) + (%: 16)</TT></TD>
<TD><TT>2 (*: H %:) 16</TT></TD>
<TR VALIGN=TOP>
<TD><TT>8</TT></TD>
<TD><TT>8</TT></TD>
</TABLE>
<p>
<H3>13.3.5  Alternative Names for Argument-Variables</H3>
For the sake of completeness, it should be mentioned that 
arguments to operators may be named <TT>m</TT> and <TT>n</TT> rather than <TT>u</TT> and <TT>v</TT>, 
to constrain arguments to be nouns, that is, 
to cause verbs to be signalled as errors. 
<p>
Furthermore, for historical reasons, if the only argument variables are 
<TT>x</TT> or <TT>y</TT> or both, we get an operator of the first kind. 
That is, in the absence of <TT>u</TT> or <TT>v</TT>
or <TT>m</TT> or <TT>n</TT> then <TT>x</TT> and <TT>y</TT> are equivalent to 
<TT>u</TT> and <TT>v</TT>. 
<p>
These alternative names will not be further considered.
<H3>13.3.6  Review</H3>
So far, we have seen that for operators 
introduced with
<TT>1 : body </TT> or <TT>2 : body</TT>, there are two kinds of definition. 
<p>
<UL>
<LI>With operators of the first kind, 
the body is executed (that, is evaluated) to compute the value 
of the result.  The result can be of any type.
The argument-variables
occurring in the body are <TT>u</TT> or <TT>v</TT> or both. 
<p>
<LI>With operators of the second kind, the result is always an explicit function.
The body of the operator is not executed, but rather becomes
the body of the generated function. 
 Here <TT>x</TT> and <TT>y</TT> are arguments to the generated function 
in the usual way, 
 and <TT>u</TT> or <TT>v</TT> in this body are placeholders which receive the values ofarguments to the operator.
</UL>
The J system recognises which kind is intended by 
determining which of the argument-variables <TT>u v x y</TT> 
occur in the the body. 
If we 
If we have BOTH (<TT>u</TT> or <TT>v</TT>) AND (<TT>x</TT> or <TT>y</TT>) then
the operator is of the second kind.  Otherwise it is of the first kind. 
<p>
<H3>13.3.7  Executing the Body (Or Not)</H3>
We said above that, for an operator of the first kind, 
the body is executed (or evaluated) when arguments are supplied.
This can be demonstrated.
<p>
First, here is a utility verb which displays its argument on-screen.
<PRE>
<TT>   display =: (1 !: 2) &amp; 2</TT>
</PRE>
Now insert <TT>display 'hello'</TT> into an operator of the first kind: 
<PRE>
<TT>     R =: 2 : 0</TT>
<TT>display 'hello'</TT>
<TT>select =. v # ]   </TT>
<TT>(u @: select) f.</TT>
<TT>)</TT>
</PRE>
When <TT>R</TT> is applied to its argument, the body is demonstrably executed:
<PRE>
<TT>   f =: # R (>&amp;0)</TT>
<TT>hello</TT>
<TT>   </TT>
<TT>   f 1 0 2 0 3</TT>
<TT>3</TT>
</PRE>
By contrast, for an 
operator of the second kind, when arguments are supplied, the body is not executed, but rather
becomes the body of the result function (after substituting the arguments). We can demonstrate  this by inserting <TT>display 'hello'</TT> into the body of the operator, 
and observing that it becomes part of the result-function.
<PRE>
<TT>   S =: 2 : 0</TT>
<TT>display 'hello'</TT>
<TT>selected =. (v y) # y  </TT>
<TT>u selected</TT>
<TT>)</TT>
</PRE>
we see that the body of <TT>S</TT> is NOT executed when <TT>S</TT> is applied 
to its argument,  but it IS executed when the generated verb <TT>g</TT> is applied.
<PRE>
<TT>   g =: # S (>&amp;0)</TT>
<TT>   g 1 0 2 0 3</TT>
<TT>hello</TT>
<TT>3</TT>
<TT>    </TT>
<TT>   </TT>
</PRE>
<A NAME="04"></A>
<A NAME="05"></A>
<H2>13.4  Operators Generating Nouns</H2>
Operators can generate nouns as well as verbs.
Here is an example.
<p>
A fixed point of a function <TT>f</TT> is a value <TT>p</TT>
such that <TT>(f p) = p</TT>. If we take
<TT>f</TT> to be 
<PRE>
<TT>   f =: 3 : '2.8 * y * (1-y)'</TT>
</PRE>
then we see that <TT>0.642857</TT> is a fixed-point of <TT>f</TT>
<PRE>
<TT>   f 0.642857</TT>
<TT>0.642857</TT>
</PRE>
Not every function has a fixed point, but if there is one
we may be able to find it. We can iterate the function until there is no change 
(with <TT>^: _</TT>  - see <TT><A HREF="10.htm">Chapter 10</A></TT>), choosing a suitable starting value.
A crude fixed-point-finder can be written as an 
adverb <TT>FPF</TT> which takes the given function as argument,
with <TT>0.5</TT> for a starting value.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>FPF =: 1 : '(u ^: _ ) 0.5'</TT></TD>
<TD><TT>p =: f FPF</TT></TD>
<TD><TT>f p</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 : '(u ^: _ ) 0.5'</TT></TD>
<TD><TT>0.642857</TT></TD>
<TD><TT>0.642857</TT></TD>
</TABLE>
<p>
<H2>13.5  Generating Noun or Verb</H2>
Consider two lines of J, such as
<PRE>
<TT>               sum  =: +/</TT>
</PRE>
<PRE>
<TT>               mean =: sum  % #</TT>
</PRE>
Sometimes a smoother presentation might be:
<PRE>
<TT>               mean =: sum % #  where sum =: +/</TT>
</PRE>
provided we had available a suitable definition for <TT>where</TT>. 
How about this?
<PRE>
<TT>   where =: 2 : 'u'</TT>
</PRE>
so we can say:
<PRE>
<TT>   mean =: sum % # where sum =: +/</TT>
</PRE>
with results as expected:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>mean</TT></TD>
<TD><TT>mean 1 2 3 4</TT></TD>
<TR VALIGN=TOP>
<TD><TT>sum % #</TT></TD>
<TD><TT>2.5</TT></TD>
</TABLE>
<p>
The right argument of <TT>where</TT> can be a verb or noun: 
<PRE>
<TT>    (z+1) * (z-1)     where z =: 7</TT>
<TT>48</TT>
<TT>   </TT>
</PRE>
<TT>where</TT> is a conjunction which ignores its right argument,
but evaluating the right argument makes it available
to the left through the assignment.  
Note that the assignments to <TT>sum</TT> and <TT>z</TT> above 
are regular global assignments, so <TT>where</TT>
does not localize <TT>sum</TT> or <TT>z</TT>. 
<A NAME="06"></A>
<H2>13.6  Operators Generating Operators</H2>
Here is an example of an adverb generating an adverb.
<p>
First note that (as covered in <A HREF="15.htm">Chapter 15</A>)
if we supply one argument to 
a conjunction we get an adverb. 
The expression <TT>(@: *:)</TT> is an adverb which means 
"composed with square". To illustrate:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>CS =: @: *:</TT></TD>
<TD><TT>- CS</TT></TD>
<TD><TT> - CS  2 3</TT></TD>
<TD><TT>- *: 2 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>@:*:</TT></TD>
<TD><TT>-@:*:</TT></TD>
<TD><TT>_4 _9</TT></TD>
<TD><TT>_4 _9</TT></TD>
</TABLE>
<p>
Now back to the main example of this section.
We aim to define an explicit adverb, <TT>K</TT> say,
which generates an adverb according to the scheme: for a verb <TT>u</TT>
<PRE>
<TT>          u K    is to be     @: u</TT>
</PRE>
Adverb <TT>K</TT> can be defined as below. We see that adverb <TT>K</TT>
delivers as a result adverb <TT>L</TT>:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>K =: 1 : '@: u' </TT></TD>
<TD><TT>L =: *: K</TT></TD>
<TD><TT>- L</TT></TD>
<TD><TT>- L 2 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 : '@: u'</TT></TD>
<TD><TT>@:*:</TT></TD>
<TD><TT>-@:*:</TT></TD>
<TD><TT>_4 _9</TT></TD>
</TABLE>
<p>
This is the end of Chapter 13.
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="14.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version 701. 
 This chapter last updated 19 Mar 2013<BR> 
Copyright &copy; Roger Stokes 2012. 
 This material may be freely reproduced, 
provided that this copyright notice is also reproduced. 
</FONT> 
 <!--bottom jump start--><hr><a href="14.htm">&gt;&gt;</a>&nbsp;
<a href="12.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
