<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
    
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=ISO-8859-1"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)"> 
  <META NAME="CREATED" CONTENT="20051014;16001218"> 
	<META NAME="CHANGED" CONTENT="20051014;16020434"> 
  <title>   Ch 13: Explicit Operators</title> 
  <STYLE TYPE="text/css"> 
   <!-- 
    TT  {font-size: 11pt; COLOR: BLUE} 
    PRE {font-size: 11pt; COLOR: BLUE} 
   --> 
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="14.htm">&gt;&gt;</a>&nbsp;
<a href="12.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <A NAME="01"></A>
<H1>Chapter 13: Explicit Operators</H1>
This chapter covers explicit definition of operators, that is, adverbs 
and conjunctions defined with the colon conjunction. 
<p>
The scheme for explicit definition is: 
<PRE>
            1 : body     is an adverb
</PRE>
<PRE>
            2 : body     is a conjunction
</PRE>
where <TT>body</TT> is one or more lines of text. 
The possibilities for the result produced by an operator so defined 
are: a tacit verb, an explicit verb, a noun or another operator. We will 
look at each case in turn.
<A NAME="02"></A>
<H2>13.1  Operators Generating Tacit Verbs</H2>
Recall from <A HREF="07.htm">Chapter 07</A> the built-in rank conjunction <TT>"</TT>. 
For any verb <TT>u</TT>, the expression <TT>u"0</TT> is a verb which applies <TT>u</TT> to the 
0-cells (scalars) of its argument. 
<p>
Now suppose we aim to define an adverb <TT>A</TT>, 
to generate a verb according to the scheme: for any verb <TT>u</TT>
<PRE>
         u A   is to be     u " 0
</PRE>
Adverb <TT>A</TT> is defined explicitly like this: 
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>A =: 1 : 'u " 0'</TT></TD>
<TD><TT>f =: < A</TT></TD>
<TD><TT>f  1 2</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 : 'u " 0'</TT></TD>
<TD><TT><"0</TT></TD>
<TD><TT>+-+-+<BR>
|1|2|<BR>
+-+-+</TT></TD>
</TABLE>
<p>
In the definition <TT>(A =: 1 : 'u " 0')</TT> 
the left argument of the colon is <TT>1</TT>, meaning
"adverb". 
<p>
The right argument is the string <TT>'u " 0'</TT>. 
This string has the form of a tacit verb, 
where <TT>u</TT> stands for whatever verb will be supplied as argument to the 
adverb <TT>A</TT>. 
In the explicit definition of an adverb, the argument-variable is always <TT>u</TT>.
<p>
<p>
Adverbs are so called because, in English grammar, 
adverbs modify verbs.  In J,  by contrast,
adverbs and conjunctions in general can take nouns 
or verbs as arguments. In the following example,
adverb <TT>W</TT> is to generate a verb
according to the scheme: for integer <TT>u</TT> 
<PRE>
        u W    is to be   < " u
</PRE>
that is, <TT>u W</TT> boxes the rank-<TT>u</TT> cells of the argument.
The definition of <TT>W</TT> is shown by:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>W =: 1 : '< " u'</TT></TD>
<TD><TT>0 W</TT></TD>
<TD><TT>z =: 'abc'</TT></TD>
<TD><TT> 0 W z</TT></TD>
<TD><TT>1 W z</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 : '< " u'</TT></TD>
<TD><TT><"0</TT></TD>
<TD><TT>abc</TT></TD>
<TD><TT>+-+-+-+<BR>
|a|b|c|<BR>
+-+-+-+</TT></TD>
<TD><TT>+---+<BR>
|abc|<BR>
+---+</TT></TD>
</TABLE>
<p>
For another example of an adverb, 
recall the dyad <TT>#</TT> where <TT>x # y</TT>
selects items from <TT>y</TT> according to the 
bitstring <TT>x</TT>.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>y =: 1 0 2 3</TT></TD>
<TD><TT> 1 0 1 1 # y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>1 2 3</TT></TD>
</TABLE>
<p>
To select items greater than 0, we can apply 
the test-verb <TT>(>&0)</TT>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>y </TT></TD>
<TD><TT>>&0 y</TT></TD>
<TD><TT>(>&0 y) #  y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>1 0 1 1</TT></TD>
<TD><TT>1 2 3</TT></TD>
</TABLE>
<p>
A tacit verb to select items greater than <TT>0</TT> 
can be written as a fork <TT>f</TT>:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>f =: >&0 # ]</TT></TD>
<TD><TT>f y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>>&0 # ]</TT></TD>
<TD><TT>1 2 3</TT></TD>
</TABLE>
<p>
This fork can be generalised into an adverb, <TT>B</TT>
say, 
to generate a verb to select items according 
to whatever verb is supplied in place of the test <TT>>&0</TT>.  
<PRE>
   B =: 1 : 'u # ]'
</PRE>
If we supply <TT>>&1</TT> as a test-verb:  
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>g =: (>&1) B</TT></TD>
<TD><TT> y </TT></TD>
<TD><TT>g y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>>&1 # ]</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>2 3</TT></TD>
</TABLE>
<p>
We see that the body of <TT>B</TT> is the 
fork to be generated, with <TT>u</TT> standing
for the argument-verb to be supplied.
Conjunctions, taking two arguments, are defined with <TT>(2 : '...')</TT>.
The left argument is <TT>u</TT> and the right is <TT>v</TT>
<p>
For example, consider a conjunction <TT>THEN</TT>, to apply one verb and then 
apply
another to the result, that is, a composition. 
The scheme we want is:
<PRE>
           u THEN v     is to be v @: u
</PRE>
and the definition of <TT>THEN</TT> is:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>THEN =: 2 : 'v @: u'</TT></TD>
<TD><TT>h =: *: THEN <</TT></TD>
<TD><TT>h 1 2 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>2 : 'v @: u'</TT></TD>
<TD><TT><@:*:</TT></TD>
<TD><TT>+-----+<BR>
|1 4 9|<BR>
+-----+</TT></TD>
</TABLE>
<p>
For another example, consider 
counting (with <TT>#</TT>) those items of a list which are 
greater than 0. A verb to do this might be:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>foo =: # @: (>&0 # ])</TT></TD>
<TD><TT>y </TT></TD>
<TD><TT>foo y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>#@:(>&0 # ])</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
We can generalize <TT>foo</TT> to apply a given verb <TT>u</TT>
to items selected by another given verb <TT>v</TT>.
We define a conjunction <TT>C</TT> with the scheme
<PRE>
             u C v   is to be   u @: (v # ]) 
</PRE>
and the definition of <TT>C</TT> is straightforwardly:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>C =: 2 : 'u @: (v # ])'</TT></TD>
<TD><TT>f =: # C (>&0)</TT></TD>
<TD><TT>y</TT></TD>
<TD><TT>f y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>2 : 'u @: (v # ])'</TT></TD>
<TD><TT>#@:(>&0 # ])</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
<H3>13.1.1  Multiline Bodies</H3>
The right argument of colon we may call the body of the definition of our 
operator. 
In the examples so far, the body was a string,  a schematic tacit verb,
for example <TT>'v .@: u'</TT> .  
This is the verb to be delivered by  our operator.  
More generally, the body can be several lines. The idea is that,
when the operator is applied to its argument, 
the whole body is executed. That is, each line is
evaluated in turn and the result delivered is 
the value of the last line evaluated. This is exactly analogous to 
explicit verbs, 
except that here the result is a value of type "function"  rather than of 
type  "array".
<p>
Here is an example of a multi-line body, 
the previous example done in two steps. 
To apply <TT>u</TT> to items selected by <TT>v</TT>, a scheme 
for conjunction <TT>D</TT> could be written:
<PRE>
         u D v  is to be  (u @: select) where select is v # ] 
</PRE>
and <TT>D</TT> defined by
<PRE>
   D =: 2 : 0
select =: v # ]
u @: select
)
</PRE>
Again counting items greater than 0, we have
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>f =: # D (>&0)</TT></TD>
<TD><TT>y</TT></TD>
<TD><TT>f y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>#@:select</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
The first line of <TT>D</TT> computes an inner function <TT>select</TT> from the right 
argument. 
The second line composes <TT>select</TT> with the left 
argument, and this is the result-verb delivered 
by <TT>D</TT>.
<p>
Now this definition has an undesirable feature:
we see that <TT>select</TT> is defined as a global (with <TT>=:</TT>).
It would be better if <TT>select</TT> were local.
<p>
However, we can see, by looking at the
value of the verb <TT>f</TT> above,
that <TT>select</TT> must be available when we apply
<TT>f</TT>. If <TT>select</TT> is local to
<TT>D</TT>, it will not be available when needed. 
<p>
We can in effect make <TT>select</TT> local 
by using the "Fix" adverb  <TT>(f.)</TT> (letter-f dot.)
The effect
of applying "Fix" to a verb
is to produce an equivalent verb
in which names are replaced 
by 
by their corresponding definitions.
That is, "Fix" resolves a tacit verb into its
primitives. For example:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>p =: +</TT></TD>
<TD><TT>q =: *</TT></TD>
<TD><TT>r =: p,q</TT></TD>
<TD><TT>r f.</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+</TT></TD>
<TD><TT>*</TT></TD>
<TD><TT>p , q</TT></TD>
<TD><TT>+ , *</TT></TD>
</TABLE>
<p>
Here is how we use Fix to enable <TT>select</TT>
to be local.  In the example below, notice that
we Fix the result-expression
on the last line:
<PRE>
   E =: 2 : 0
select =. v # ]
(u @: select) f.
)
   
</PRE>
Now a verb to count greater-than-0 items can be written:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>g =: # E (>&0)</TT></TD>
<TD><TT>y</TT></TD>
<TD><TT>g y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>#@:(>&0 # ])</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
We see that <TT>g</TT>, unlike <TT>f</TT>, has no local names. 
<A NAME="03"></A>
<H2>13.2  Explicit Operators Generating Explicit Verbs</H2>
<H3>13.2.1  Adverb Generating Monad</H3>
Consider the following explicit monadic verb, <TT>e</TT>. 
It selects items greater than 0, by
applying the test-verb <TT>>&0</TT>. 
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>e =: 3 : '(>&0 y) # y'</TT></TD>
<TD><TT>y</TT></TD>
<TD><TT>e y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3 : '(>&0 y) # y'</TT></TD>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>1 2 3</TT></TD>
</TABLE>
<p>
We can generalise <TT>e</TT> to form an adverb, <TT>F</TT> say,
which selects items according to a supplied 
test-verb. The scheme we want is: for any verb <TT>u</TT>: 
<PRE>
         u F   is to be    3 : '(u y) # y'
</PRE>
Adverb <TT>F</TT> is defined by:
<PRE>
   F  =: 1 : '(u y) # y'
</PRE>
Now the verb <TT>>&1 F</TT> will select items greater than 1:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>y</TT></TD>
<TD><TT>>&1 F y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>2 3</TT></TD>
</TABLE>
<p>
In the body of <TT>F</TT>
the variable <TT>u</TT> stands for a verb to be 
supplied as argument to adverb <TT>F</TT>.
If this argument is say <TT>>&1</TT>, then
<TT>y</TT> stands for an argument to the generated
explicit verb <TT>3 : '(>&1 y) # y'</TT>.
<p>
That is, our method of defining 
the generated verb is to write out the body
of an explicit definition, with <TT>u</TT>
at places where a supplied verb is to be substituted.
<H3>13.2.2  Conjunction Generating Monad</H3>
A conjunction takes two arguments,
called <TT>u</TT> and <TT>v</TT>. Here is an example 
of a conjunction to generate an explicit
monad.  
<p>
As before, we specify the generated verb,
by writing out the body of an explicit verb. Here
<TT>y</TT> stands for the argument of the generated verb
and <TT>u</TT> and <TT>v</TT> stand for argument-verbs 
to be supplied to the conjunction. 
In this example the body is multi-line. As before,
<TT>u</TT> will be applied to items selected by <TT>v</TT>
<PRE>
   G  =: 2 : 0
selected =. (v y) # y
u selected
)
</PRE>
Now a verb to count greater-than-zero items 
can be written as <TT># G (>&0)</TT>:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT> y </TT></TD>
<TD><TT># G (>&0)  y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 0 2 3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
<H3>13.2.3  Generating a Dyad</H3>
For the next example, 
let us define a conjunction generating an explicit dyad.
Suppose we want a conjunction <TT>H</TT> such that, schematically, for verbs 
<TT>u</TT> and <TT>v</TT>
<p>
<PRE>
         u H v    is to be    4 : '(u x) + (v y)'
</PRE>
Recall from <TT><A HREF="12.htm">Chapter 12</A></TT> that there is another way to write an explicit dyad.
Beginning with <TT>3 :</TT> we can write a multi-line body in which a solo colon 
separates monadic and dyadic cases. Here we have no monadic case,
so the scheme above can be equivalently written as:
<PRE>
         u H v    is to be    3 : 0
</PRE>
<PRE>
                              :    
</PRE>
<PRE>
                              (u x) + (v y)
</PRE>
<PRE>
                              ) 
</PRE>
The explicit definition of <TT>H</TT> follows straightforwardly:
<PRE>
   H =: 2 : 0
:
(u x) + (v y)
)
      
</PRE>
We see:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>(*: 2) + (%: 16)</TT></TD>
<TD><TT>2 (*: H %:) 16</TT></TD>
<TR VALIGN=TOP>
<TD><TT>8</TT></TD>
<TD><TT>8</TT></TD>
</TABLE>
<p>
<H3>13.2.4  Review</H3>
So far, we have seen that for operators 
introduced with
<TT>1 :</TT> or <TT>2 :</TT>, there are two kinds of definition. 
<p>
<UL>
<LI>The first kind generates a tacit function. 
The body of the operator
is executed (that, is evaluated) to compute the value 
of the result-function. 
Notice that the argument-variables
occurring in the body are <TT>u</TT> or <TT>v</TT>
<p>
<LI>The second kind generates an explicit function. 
A convenient way to define the generated explicit function is to write out
a body for it. Here <TT>x</TT> and <TT>y</TT> are arguments to the generated function 
in the usual way. 
 Additionally, occurrences of <TT>u</TT> or <TT>v</TT> in this body are arguments to the operator which will be substituted into the generated body. Such a body, containing argument variables <TT>x</TT> or <TT>y</TT> or <TT>u</TT> or <TT>v</TT>, is the body of the operator. Thus when arguments are supplied to the operator, the body is not executed, but reproduced
(after substituting arguments for <TT>u</TT> or <TT>v</TT>) as the body of the generated explicit function.
</UL>
The J system recognises which kind is intended by 
determining which of the argument-variables <TT>u v x y</TT>
occur in the the body.  
<p>
If we have ONLY <TT>u</TT> or <TT>v</TT> or both, then the generated function is tacit.
<p>
If we have BOTH (<TT>u</TT> or <TT>v</TT>) AND (<TT>x</TT> or <TT>y</TT>) then
the generated function is explicit.
<p>
On this basis, the cases we have considered are:
<PRE>
1 : '..  u  ..'          tacit-generating adverb 
2 : '..  u  v ..'        tacit-generating conjunction
1 : '..  u  y ..'        explicit-monad-generating adverb 
1 : '..  u  x  y ..'     explicit-dyad-generating adverb
2 : '..  u  v  y ..'     explicit-monad-generating conjunction
2 : '..  u  v  x  y ..'  explicit-dyad-generating conjunction
</PRE>
<H3>13.2.5  Executing the Body (Or Not)</H3>
We said above that, for a tacit-function-generating operator, 
the body is executed (or evaluated) when arguments are supplied.
This can be demonstrated.
<p>
First, here is a utility verb which displays its argument on-screen.
<PRE>
   display =: (1 !: 2) & 2
</PRE>
Now insert <TT>display 'hello'</TT> into a tacit-generating operator: 
<PRE>
     R =: 2 : 0
display 'hello'
select =. v # ]   
(u @: select) f.
)
</PRE>
When <TT>R</TT> is applied to its argument, the body is demonstrably executed:
<PRE>
   f =: # R (>&0)
hello
   
   f 1 0 2 0 3
3
</PRE>
By contrast, for an 
explicit-function-generating operator, when arguments are supplied, the body is not executed, but rather
becomes the body of the result function (after substituting the arguments). We can demonstrate  this by inserting <TT>display 'hello'</TT> into the body of the operator, 
and observing that it becomes part of the result-function.
<PRE>
   S =: 2 : 0
display 'hello'
selected =. (v y) # y  
u selected
)
</PRE>
we see that the body of <TT>S</TT> is NOT executed when <TT>S</TT> is applied 
to its argument,  but it IS executed when the generated verb <TT>g</TT> is applied.
<PRE>
   g =: # S (>&0)
   g 1 0 2 0 3
hello
3
</PRE>
<H3>13.2.6  Alternative Names for Argument-Variables</H3>
The arguments to operators may be nouns or verbs.
There is a way of constraining
arguments to be nouns only, that is, 
to cause verbs to be signalled as errors. 
 To impose the constraint, we write an  
argument-variable as <TT>m</TT> rather than <TT>u</TT>,  or <TT>n</TT> rather than  <TT>v</TT>.
For example, without the constraint we could write:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>P =: 1 : '+ & u'</TT></TD>
<TD><TT> * P</TT></TD>
<TD><TT>7 P</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 : '+ & u'</TT></TD>
<TD><TT>+&*</TT></TD>
<TD><TT>+&7</TT></TD>
</TABLE>
<p>
With the constraint we write:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>Q =: 1 : '+ & m'</TT></TD>
<TD><TT> * Q</TT></TD>
<TD><TT> 7 Q</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 : '+ & m'</TT></TD>
<TD><TT>error</TT></TD>
<TD><TT>+&7</TT></TD>
</TABLE>
<p>
We said above that with ONLY <TT>u</TT> or <TT>v</TT> or both
occurring as argument variables, we get a tacit verb
generated.
For the sake of completeness, we should add
<TT>m</TT> and <TT>n</TT> to this list.
<p>
Furthermore, if the only argument variables are 
<TT>x</TT> or <TT>y</TT> or both, we get a tacit verb, not
an explicit verb. 
That is, in the absence of <TT>u</TT> or <TT>v</TT>
or <TT>m</TT> or <TT>n</TT> then <TT>x</TT> and <TT>y</TT> are equivalent to 
<TT>u</TT> and <TT>v</TT>.   
<A NAME="04"></A>
<A NAME="05"></A>
<H2>13.3  Operators Generating Nouns</H2>
Operators can generate nouns as well as verbs.
Here is an example.
<p>
A fixed point of a function <TT>f</TT> is a value <TT>p</TT>
such that <TT>(f p) = p</TT>. If we take
<TT>f</TT> to be 
<PRE>
   f =: 3 : '2.8 * y * (1-y)'
</PRE>
then we see that <TT>0.642857</TT> is a fixed-point of <TT>f</TT>
<PRE>
   f 0.642857
0.642857
</PRE>
Not every function has a fixed point, but if there is one
we may be able to find it. We can iterate the function until there is no change 
(with <TT>^: _</TT>  - see <TT><A HREF="10.htm">Chapter 10</A></TT>), choosing a suitable starting value.
A crude fixed-point-finder can be written as an 
adverb <TT>FPF</TT> which takes the given function as argument,
with <TT>0.5</TT> for a starting value.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>FPF =: 1 : '(u ^: _ ) 0.5'</TT></TD>
<TD><TT>p =: f FPF</TT></TD>
<TD><TT>f p</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 : '(u ^: _ ) 0.5'</TT></TD>
<TD><TT>0.642857</TT></TD>
<TD><TT>0.642857</TT></TD>
</TABLE>
<p>
<A NAME="06"></A>
<H2>13.4  Operators Generating Operators</H2>
Here is an example of an adverb generating an adverb.
<p>
First note that (as covered in <A HREF="15.htm">Chapter 15</A>)
if we supply one argument to 
a conjunction we get an adverb. 
The expression <TT>(@: *:)</TT> is an adverb which means 
"composed with square". To illustrate:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>CS =: @: *:</TT></TD>
<TD><TT>- CS</TT></TD>
<TD><TT> - CS  2 3</TT></TD>
<TD><TT>- *: 2 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>@:*:</TT></TD>
<TD><TT>-@:*:</TT></TD>
<TD><TT>_4 _9</TT></TD>
<TD><TT>_4 _9</TT></TD>
</TABLE>
<p>
Now back to the main example of this section.
We aim to define an explicit adverb, <TT>K</TT> say,
which generates an adverb according to the scheme: for a verb <TT>u</TT>
<PRE>
          u K    is to be     @: u
</PRE>
Adverb <TT>K</TT> can be defined as below. We see that adverb <TT>K</TT>
delivers as a result adverb <TT>L</TT>:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>K =: 1 : '@: u' </TT></TD>
<TD><TT>L =: *: K</TT></TD>
<TD><TT>- L</TT></TD>
<TD><TT>- L 2 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 : '@: u'</TT></TD>
<TD><TT>@:*:</TT></TD>
<TD><TT>-@:*:</TT></TD>
<TD><TT>_4 _9</TT></TD>
</TABLE>
<p>
This is the end of Chapter 13.
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="14.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version  j701/beta/2010-11-24/22:45. 
 This chapter last updated 22 Dec 2010<BR> 
Copyright &copy; Roger Stokes 2010. 
 This material may be freely reproduced, 
provided that this copyright notice is also reproduced. 
</FONT> 
 <!--bottom jump start--><hr><a href="14.htm">&gt;&gt;</a>&nbsp;
<a href="12.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
