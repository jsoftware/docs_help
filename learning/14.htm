<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
       
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=UTF-8"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)">   
  <TITLE>   Ch 14: Gerunds</TITLE> 
  <STYLE TYPE="text/css"> 
    TT  {font-size: 12pt; COLOR: BLUE} 
    PRE {font-size: 12pt; COLOR: BLUE} 
                                    
    table.jtable {                  
         border-width: thin;        
         border-spacing: 2px;       
         border-style: solid;       
         border-color: gray;        
         border-collapse: collapse; 
         background-color: white;   
     }                              
     table.jtable td {              
         border-width: 1px;         
         padding: 10px;             
         border-style: solid;       
         border-color: gray;        
         background-color: white;   
     }                              
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="15.htm">&gt;&gt;</a>&nbsp;
<a href="13.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <A NAME="01"></A>
<H1>Chapter 14: Gerunds</H1>
What is a gerund, and what is it 
good for?
Briefly, a gerund represents a list of verbs. It is useful mainly 
for supplying 
a list of verbs as a single 
argument to an operator.
<p>
The plan for this chapter is:
<UL>
<LI> to introduce gerunds 
<LI> to look at some built-in operators which can take gerunds as 
arguments
<LI> to look at user-defined operators taking gerund arguments
</UL>
<A NAME="02"></A>
<H2>14.1  Making Gerunds: The Tie Conjunction</H2>
Recall from <A HREF="10.htm">Chapter 10</A> how we defined a verb with several cases.
Here is a small example as a reminder.
To find the absolute value of a number <TT>x</TT>
we compute <TT>(+x)</TT>, or <TT>(-x)</TT> if the number is negative, thus:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>abs =: + ` - @. (< &amp; 0)</TT></TD>
<TD><TT>abs _3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+`-@.(<&amp;0)</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
The expression <TT>(+`-)</TT> looks like a 
list of verbs. Here the two verbs <TT>+</TT>
and <TT>-</TT> are tied together with the "Tie" conjunction  (<TT>`</TT>, backquote,
 different from <TT>'</TT>)
to produce a gerund.
<PRE>
<TT>   + ` -</TT>
<TT>+-+-+</TT>
<TT>|+|-|</TT>
<TT>+-+-+</TT>
</PRE>
We see that the gerund <TT>(+ ` -)</TT>
is a list of two boxes, each of which contains
a representation of a verb.  A gerund is a noun -
a list of boxes. Here is another
gerund which represents three verbs:
<PRE>
<TT>   G =: + ` - ` abs </TT>
<TT>   G</TT>
<TT>+-+-+---+</TT>
<TT>|+|-|abs|</TT>
<TT>+-+-+---+</TT>
</PRE>
Inside each box there is a data structure which
represents, or encodes,  a verb. 
Here we 
will not be concerned with the details of 
this representation, which will be covered in <A HREF="27.htm">Chapter 27</A>.
<A NAME="03"></A>
<H2>14.2  Recovering the Verbs from a Gerund</H2>
The verbs packed into a gerund can be unpacked 
again with the built-in adverb "Evoke Gerund"
which is denoted by the expression <TT>(`: 6)</TT>. 
Let us call this <TT>EV</TT>. 
<PRE>
<TT>   EV =: `: 6</TT>
</PRE>
Adverb <TT>EV</TT> applied to a gerund yields a train of all the verbs in the 
gerund.
In the next example, the result <TT>foo</TT> is a 3-train, that is a fork.
<PRE>
<TT>   f =: 'f' &amp; ,</TT>
<TT>   g =: 'g' &amp; ,</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>H=: f ` , ` g</TT></TD>
<TD><TT>foo =: H EV</TT></TD>
<TD><TT>foo 'o'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+-+<BR>
|f|,|g|<BR>
+-+-+-+</TT></TD>
<TD><TT>f , g</TT></TD>
<TD><TT>fogo</TT></TD>
</TABLE>
<p>
Individual verbs can be unpacked by indexing the boxed list <TT>H</TT>
and then applying <TT>EV</TT>.  
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>H </TT></TD>
<TD><TT>2{H</TT></TD>
<TD><TT>vb =: (2{H) EV</TT></TD>
<TD><TT>vb 'o'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+-+<BR>
|f|,|g|<BR>
+-+-+-+</TT></TD>
<TD><TT>+-+<BR>
|g|<BR>
+-+</TT></TD>
<TD><TT>g</TT></TD>
<TD><TT>go</TT></TD>
</TABLE>
<p>
Shorter trains can be unpacked from a gerund, again by indexing.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>H </TT></TD>
<TD><TT> 1 2 { H</TT></TD>
<TD><TT>tr =: (1 2 { H) EV</TT></TD>
<TD><TT>tr 'a' </TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+-+<BR>
|f|,|g|<BR>
+-+-+-+</TT></TD>
<TD><TT>+-+-+<BR>
|,|g|<BR>
+-+-+</TT></TD>
<TD><TT>, g</TT></TD>
<TD><TT>aga</TT></TD>
</TABLE>
<p>
Now we come to the uses of gerunds.  
<H2>14.3  Gerunds As Arguments to Built-In Operators</H2>
A major use of gerunds is that they can  be 
supplied to operators as a single argument 
containing multiple verbs.
We look first at further built-in operators taking gerund arguments, 
and then at examples of home-made operators.
<H3>14.3.1  Gerund as Argument to APPEND Adverb</H3>
<A NAME="04"></A>
There is a built-in adverb called "APPEND",
denoted by the expression <TT>(`: 0)</TT>.
It applies a list of verbs to a 
single argument to give a list of results. 
For example:
<PRE>
<TT>   APPEND =: `: 0</TT>
<TT>   sum    =: +/</TT>
<TT>   count  =: #</TT>
<TT>   mean   =: sum % count</TT>
<TT>   G1     =: count ` sum ` mean </TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>G1</TT></TD>
<TD><TT>foo =: G1 APPEND</TT></TD>
<TD><TT>foo 1 2 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-----+---+----+<BR>
|count|sum|mean|<BR>
+-----+---+----+</TT></TD>
<TD><TT>count`sum`mean`:0</TT></TD>
<TD><TT>3 6 2</TT></TD>
</TABLE>
<p>
The adverb is called <TT>APPEND</TT> because the results of the individual 
verbs in 
the gerund are appended, that is formed into a list. 
The general scheme is that for verbs <TT>u</TT>, <TT>v</TT>, <TT>w</TT> , ... 
then 
<PRE>
<TT>          (u`v`w...) APPEND y  means  (u y), (v y), (w y) , ... </TT>
</PRE>
Here is another example,
showing that a gerund can be, not just a one-dimensional list, 
but an array of verbs. 
The list of verbs <TT>G1</TT> formed by "Tie" can be reshaped into an array, 
a table say, and the shape of the result is the same. 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>G2 =: 2 2 $ G1</TT></TD>
<TD><TT>G2 APPEND 4 5</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-----+-----+<BR>
|count|sum&nbsp;&nbsp;|<BR>
+-----+-----+<BR>
|mean |count|<BR>
+-----+-----+</TT></TD>
<TD><TT>&nbsp;&nbsp;2 9<BR>
4.5 2</TT></TD>
</TABLE>
<p>
<A NAME="05"></A>
<H3>14.3.2  Gerund as Argument to Agenda Conjunction</H3>
Recall the <TT>abs</TT> verb defined above.
Here is a reminder:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>abs =: + ` - @. (< &amp; 0)</TT></TD>
<TD><TT>abs 6</TT></TD>
<TD><TT>abs _6</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+`-@.(<&amp;0)</TT></TD>
<TD><TT>6</TT></TD>
<TD><TT>6</TT></TD>
</TABLE>
<p>
Here, the "Agenda" conjunction <TT>(@.)</TT> takes a verb on the right.
As a variation, <TT>(@.)</TT> can also take a noun on the right. 
This noun can be a single number or a list of numbers.
A single number is taken as an index selecting a verb from the gerund.
For example.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>G =: + ` - ` %</TT></TD>
<TD><TT>f =: G @. 0</TT></TD>
<TD><TT>1 f 1</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+-+<BR>
|+|-|%|<BR>
+-+-+-+</TT></TD>
<TD><TT>+</TT></TD>
<TD><TT>2</TT></TD>
</TABLE>
<p>
A list of numbers is taken as a list of indices selecting
verbs from the gerund to form a train. 
In the following example the selected two verbs form a hook.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>G </TT></TD>
<TD><TT>h =: G @. 0 2</TT></TD>
<TD><TT>h 4</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+-+<BR>
|+|-|%|<BR>
+-+-+-+</TT></TD>
<TD><TT>+ %</TT></TD>
<TD><TT>4.25</TT></TD>
</TABLE>
<p>
The scheme is, for a gerund <TT>G</TT> and indices <TT>I</TT> :
<PRE>
<TT>               G @. I   means   (I { G) EV</TT>
</PRE>
For example:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>G </TT></TD>
<TD><TT>(G @. 0 2) 4</TT></TD>
<TD><TT>((0 2 { G)) EV 4</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+-+<BR>
|+|-|%|<BR>
+-+-+-+</TT></TD>
<TD><TT>4.25</TT></TD>
<TD><TT>4.25</TT></TD>
</TABLE>
<p>
This scheme gives us an abbreviation
for the unpacking by indexing we saw above. 
Next, we look at how to build trains with more structure. Consider the train <TT>T</TT>:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>T =: * (- 1:)</TT></TD>
<TD><TT>T 3</TT></TD>
<TD><TT>T 4</TT></TD>
<TR VALIGN=TOP>
<TD><TT>* (- 1:)</TT></TD>
<TD><TT>6</TT></TD>
<TD><TT>12</TT></TD>
</TABLE>
<p>
which computes <TT>(T x) = x * (x -1)</TT> . The parentheses mean that <TT>T</TT> is a hook where the  
second item is also a hook. Trains structured with parentheses in this way can be 
built with Agenda, by indexing items from a gerund, using boxed indices to indicate 
the parenthesisation.
<PRE>
<TT>   foo =: (* ` - ` 1:) @. (0 ; 1 2)</TT>
<TT>      </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>T</TT></TD>
<TD><TT>foo</TT></TD>
<TD><TT>foo 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>* (- 1:)</TT></TD>
<TD><TT>* (- 1:)</TT></TD>
<TD><TT>6</TT></TD>
</TABLE>
<p>
<A NAME="06"></A>
<H3>14.3.3  Gerund as Argument to Insert</H3>
We have previously encountered the insert adverb applied to a single verb: 
the verb is inserted between successive items of a list.  
More generally, when insert is applied to a 
gerund it inserts successive verbs from the gerund between successive items from the 
list. That is, if <TT>G</TT> is the gerund <TT>(f`g`h`...)</TT> and 
and <TT>X</TT> is the list <TT>(x0, x1, x2, x3, ...)</TT> then
<PRE>
<TT>             G/X    means   x0 f x1 g x2 h x3 ...</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>ger =: + ` %</TT></TD>
<TD><TT>ger / 1 2 3</TT></TD>
<TD><TT> 1 + 2 % 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+<BR>
|+|%|<BR>
+-+-+</TT></TD>
<TD><TT>1.66667</TT></TD>
<TD><TT>1.66667</TT></TD>
</TABLE>
<p>
If the gerund is too short, 
it is re-used cyclically to make up the needed number of 
verbs.  This means that a one-verb gerund, when inserted, behaves the same as a single 
inserted verb.
<A NAME="07"></A>
<H3>14.3.4  Gerund as argument to POWER conjunction</H3>
Recall from <A HREF="10.htm">Chapter 10</A> that the POWER conjunction <TT>(^:)</TT> can take, as right argument, a number which 
specifies the number of iterations of the verb given as left argument. 
As a brief reminder, 3 doublings of 1 is 8:
<PRE>
<TT>   double =: +:  </TT>
<TT>   (double ^: 3) 1</TT>
<TT>8</TT>
</PRE>
As a variation, the number of iterations can be computed by a verb right-argument. 
The scheme is, for verbs <TT>u</TT> and <TT>v</TT>:
<PRE>
<TT>             (u ^: v) y   means   u ^: (v y) y</TT>
</PRE>
For example:
<PRE>
<TT>   decr =: <:</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>double ^: (decr 3) 3</TT></TD>
<TD><TT>(double ^: decr) 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>12</TT></TD>
<TD><TT>12</TT></TD>
</TABLE>
<p>
More generally, the right argument can be given as a gerund, and the verbs in it do 
some computations at the outset of the iteration process. The scheme is:
<PRE>
<TT>             u ^: (v1 ` v2) y   means    u ^: (v1 y) (v2 y)</TT>
</PRE>
To illustrate, we define a verb to compute a Fibonacci sequence.  Here each term is the 
sum of the preceding two terms.   The verb will take an argument to specify the 
number of terms, so for example we want <TT>FIB 6</TT>  to give  <TT>0 1 1 2 3 5</TT>
<p>
The verb to be iterated, <TT>u</TT> say, generates the next sequence from the previous sequence 
by appending the sum of the last two. If we define:
<PRE>
<TT>   u        =: , sumlast2</TT>
<TT>   sumlast2 =: +/ @ last2</TT>
<TT>   last2    =: _2 &amp; {.</TT>
</PRE>
then the iteration scheme beginning with the sequence 0 1 is shown by
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>u 0 1</TT></TD>
<TD><TT>u u 0 1</TT></TD>
<TD><TT>u u u 0 1</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0 1 1</TT></TD>
<TD><TT>0 1 1 2</TT></TD>
<TD><TT>0 1 1 2 3</TT></TD>
</TABLE>
<p>
Now we define the two verbs of the gerund.  We see that to produce a sequence with <TT>n</TT> 
terms the verb <TT>u</TT> must be applied <TT>(n-2)</TT> times, so the verb <TT>v1</TT>, which computes the 
number of iterations from the argument <TT>y</TT> is:
<PRE>
<TT>         v1 =: -&amp;2</TT>
</PRE>
The verb <TT>v2</TT>, which computes the starting value from the argument <TT>y</TT>, we want to be 
the constant function which computes <TT>0 1</TT> whatever the value of <TT>y</TT>.
<PRE>
<TT>         v2 =: 3 : '0 1'</TT>
</PRE>
Now we can put everything together:    
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>FIB =: u ^: (v1 `v2)</TT></TD>
<TD><TT>FIB 6</TT></TD>
<TR VALIGN=TOP>
<TD><TT>(, sumlast2)^:(v1`v2)</TT></TD>
<TD><TT>0 1 1 2 3 5</TT></TD>
</TABLE>
<p>
This example showed a monadic verb <TT>(u)</TT> with the two verbs in the gerund (<TT>v1</TT> and <TT>v2</TT>) 
performing some computations at the outset of the iteration.  What about dyadic verbs?
<p>
Firstly, recall that with an iterated dyadic verb the left argument is bound at 
the outset 
to give a monad which is what is actually iterated, so that the scheme is:
<PRE>
<TT>           x  u ^: k  y    means    (x&amp;u) ^: k y </TT>
</PRE>
Rather than constant <TT>k</TT>, we can perform pre-computations with 
three verbs <TT>U</TT> <TT>V</TT> and <TT>W</TT> presented as a gerund. 
The  scheme is:
<PRE>
<TT>          x u ^: (U`V`W) y  means  (((x U y)&amp;u) ^: (x V y))  (x W y)</TT>
</PRE>
or  equivalently as a fork:
<PRE>
<TT>          u ^: (U`V`W)   means   U (u ^: V) W</TT>
</PRE>
For example, suppose we define::
<PRE>
<TT>   U =: [</TT>
<TT>   V =: 2:</TT>
<TT>   W =: ]</TT>
</PRE>
Then we see that <TT>p</TT> and <TT>q</TT> below are equivalent. 
 3 added twice to 4 gives 10.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>p =:  + ^: (U`V`W)</TT></TD>
<TD><TT>3 p 4</TT></TD>
<TD><TT>q =: U (+ ^: V) W</TT></TD>
<TD><TT>3 q 4</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+^:(U`V`W)</TT></TD>
<TD><TT>10</TT></TD>
<TD><TT>U +^:V W</TT></TD>
<TD><TT>10</TT></TD>
</TABLE>
<p>
<A NAME="08"></A>
<H3>14.3.5  Gerund as Argument to Amend</H3>
Recall the "Amend" adverb from <A HREF="06.htm">Chapter 06</A> . 
The expression <TT>(new index } old)</TT> 
produces an amended version of <TT>old</TT>, 
having <TT>new</TT> as items at <TT>index</TT>. For example:
<PRE>
<TT>      'o'  1 } 'baron'</TT>
<TT>boron</TT>
</PRE>
More generally, the "Amend" adverb can take an argument which is
a gerund of three verbs, say <TT>U`V`W</TT>.
The scheme is:
<PRE>
<TT>         x (U`V`W) } y  means (x U y) (x V y) } (x W y)</TT>
</PRE>
That is, the new items,
the index(es) and the "old" array 
are all to be computed from the given <TT>x</TT> and <TT>y</TT>.
<p>
Here is an example (adapted from the Dictionary).
Let us define a verb, <TT>R</TT> say,
to amend a matrix
by multiplying its <TT>i</TT>'th row by a constant <TT>k</TT>.
The left argument of <TT>R</TT> is to be the list <TT>i k</TT>
and the right argument is to be the original
matrix.  <TT>R</TT> is defined as the "Amend" adverb
applied to a gerund of 3 verbs.  
<PRE>
<TT>   i =: {. @ [    NB. x i y  is  first of x</TT>
<TT>   k =: {: @ [    NB. x k y  is  last of x</TT>
<TT>   r =: i { ]     NB. x r y  is  (x i y)'th  row of y</TT>
<TT>   </TT>
<TT>   R =: ((k * r) ` i ` ]) }</TT>
</PRE>
For example:
<PRE>
<TT>   M =: 3 2 $ 2 3 4 5 6 7</TT>
<TT>   z =: 1 10      NB. row 1 times 10</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> z </TT></TD>
<TD><TT> M </TT></TD>
<TD><TT>z i M</TT></TD>
<TD><TT>z k M</TT></TD>
<TD><TT>z r M</TT></TD>
<TD><TT>z R M</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 10</TT></TD>
<TD><TT>2 3<BR>
4 5<BR>
6 7</TT></TD>
<TD><TT>1</TT></TD>
<TD><TT>10</TT></TD>
<TD><TT>4 5</TT></TD>
<TD><TT> 2&nbsp;&nbsp;3<BR>
40 50<BR>
 6&nbsp;&nbsp;7</TT></TD>
</TABLE>
<p>
<A NAME="09"></A>
<H2>14.4  Gerunds as Arguments to User-Defined Operators</H2>
Previous sections showed supplying gerunds to the built-in operators (adverbs or 
conjunctions). Now we look at defining our 
own operators taking gerunds as arguments. 
<p>
The main consideration with an operator is 
how to recover individual verbs from the gerund argument. 
Useful here is the agenda conjunction <TT>@.</TT> which we looked at above.
Recall that it can select one or more verbs from a gerund.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>G</TT></TD>
<TD><TT>G @. 0</TT></TD>
<TD><TT> G @. 0 2</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+-+<BR>
|+|-|%|<BR>
+-+-+-+</TT></TD>
<TD><TT>+</TT></TD>
<TD><TT>+ %</TT></TD>
</TABLE>
<p>
Now for the operator. Let us define an adverb <TT>A</TT>, say, to produce a fork-like
verb, so that 
<PRE>
<TT>          x (f `g ` h  A)  y   is to mean   (f x) g (h y)  </TT>
</PRE>
<PRE>
<TT>         </TT>
</PRE>
<PRE>
<TT>   A =: 1 : 0</TT>
<TT>f =. u @. 0</TT>
<TT>g =. u @. 1</TT>
<TT>h =. u @. 2</TT>
<TT>((f @ [) g (h @ ]))  f.</TT>
<TT>)</TT>
<TT>   </TT>
</PRE>
To demonstrate <TT>A</TT>, here is a verb to join the first item of <TT>x</TT> to the last of <TT>y</TT>.
The first and last items are yielded by the built-in verbs 
<TT>{.</TT> (left-brace dot, called
"Head") and <TT>{:</TT> (left-brace colon, called "Tail").
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>H =: {. ` , ` {: </TT></TD>
<TD><TT>zip =: H A</TT></TD>
<TD><TT>'abc' zip 'xyz'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+--+-+--+<BR>
|{.|,|{:|<BR>
+--+-+--+</TT></TD>
<TD><TT>{.@[ , {:@]</TT></TD>
<TD><TT>az</TT></TD>
</TABLE>
<p>
<H3>14.4.1  The Abelson and Sussman Accumulator</H3>
Here is another example of a user-defined explicit operator with a gerund 
argument.
Abelson and Sussman ("Structure and Interpretation of Computer Programs", 
MIT Press 1985) describe how 
a variety of computations all
conform to the following general plan, called the "accumulator":
<p>
Items from the argument (a list) are selected with a "filtering" function.
For each selected item, a value is computed from it with a "mapping" 
function.
The results of the separate mappings are combined into the overall result 
with a "combining" function.
This plan can readily be implemented in J as an adverb, <TT>ACC</TT> say, as 
follows. 
<PRE>
<TT>      ACC =: 1 : 0</TT>
<TT>com =. u @. 0</TT>
<TT>map =. u @. 1</TT>
<TT>fil =. u @. 2</TT>
<TT>((com /)  @:  map  @:  (#~ fil))  f.</TT>
<TT>)</TT>
</PRE>
<TT>ACC</TT> takes as argument a gerund of three verbs, in order, the combiner, 
the map and the filter.  
For an example, we compute the sum of the squares of the odd 
numbers in a given list. Here the filter, to test for an odd number, is 
 <TT>(2&amp;|)</TT>
<PRE>
<TT>      (+ ` *: ` (2&amp;|)) ACC 1 2 3 4   </TT>
<TT>10</TT>
<TT>   </TT>
</PRE>
This is the end of chapter 14.
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="15.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version 701. 
 This chapter last updated 29 Jul 2012<BR> 
Copyright &copy; Roger Stokes 2012. 
 This material may be freely reproduced, 
provided that this copyright notice is also reproduced. 
</FONT> 
 <!--bottom jump start--><hr><a href="15.htm">&gt;&gt;</a>&nbsp;
<a href="13.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
