<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
       
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=UTF-8"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)">   
  <TITLE>   Ch 16: Rearrangements</TITLE> 
  <STYLE TYPE="text/css"> 
    TT  {font-size: 12pt; COLOR: BLUE} 
    PRE {font-size: 12pt; COLOR: BLUE} 
                                    
    table.jtable {                  
         border-width: thin;        
         border-spacing: 2px;       
         border-style: solid;       
         border-color: gray;        
         border-collapse: collapse; 
         background-color: white;   
     }                              
     table.jtable td {              
         border-width: 1px;         
         padding: 10px;             
         border-style: solid;       
         border-color: gray;        
         background-color: white;   
     }                              
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="17.htm">&gt;&gt;</a>&nbsp;
<a href="15.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <H1>Chapter 16: Rearrangements</H1>
This chapter covers rearranging the items of 
arrays: permuting, sorting, 
transposing, reversing, rotating and shifting.
<A NAME="01"></A>
<H2>16.1  Permutations</H2>
A permutation of a vector is another vector which has all the items of the first but 
not necessarily in the same order. 
For example, <TT>z</TT> is a permutation of <TT>y</TT> where:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y =: 'abcde' </TT></TD>
<TD><TT>z =: 4 2 3 1 0 { y </TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde</TT></TD>
<TD><TT>ecdba</TT></TD>
</TABLE>
<p>
The index vector <TT>4 2 3 1 0</TT> is itself a permutation of the indices <TT>0 1 2 3 4</TT>, 
that is, <TT>i. 5</TT>, and 
hence is said to be a permutation vector of order 5.
<p>
Notice the effect of this permutation: the first and last items are interchanged and 
the middle three rotate
position amongst themselves. Hence this permutation can be described as a 
combination of cycling two items
and cycling three items. After 6 (= 2 * 3) applications of this permutation we return to the original vector. 
<PRE>
<TT>   p =: 4 2 3 1 0 &amp; {</TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y </TT></TD>
<TD><TT>p y</TT></TD>
<TD><TT>p p y</TT></TD>
<TD><TT>p p p p p p y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde</TT></TD>
<TD><TT>ecdba</TT></TD>
<TD><TT>adbce</TT></TD>
<TD><TT>abcde</TT></TD>
</TABLE>
<p>
The permutation <TT>4 2 3 1 0</TT> can be represented as a cycle of 2 and a cycle of 3. 
The verb to compute this cyclic representation is monadic <TT>C.</TT> .
<PRE>
<TT>   C. 4 2 3 1 0</TT>
<TT>+-----+---+</TT>
<TT>|3 1 2|4 0|</TT>
<TT>+-----+---+</TT>
</PRE>
Thus we have two representations of a 
permutation: <TT>(4 2 3 1 0)</TT> is called a direct representation 
and <TT>(3 1 2 ; 4 0)</TT>
is called a cyclic representation. 
Monadic <TT>C.</TT> can accept either form and will produce the other form:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>C. 4 2 3 1 0 </TT></TD>
<TD><TT>C. 3 1 2 ; 4 0</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-----+---+<BR>
|3 1 2|4 0|<BR>
+-----+---+</TT></TD>
<TD><TT>4 2 3 1 0</TT></TD>
</TABLE>
<p>
The dyadic verb <TT>C.</TT> can accept either form as its left argument, and permutes its
right argument.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y </TT></TD>
<TD><TT>4 2 3 1 0 C. y</TT></TD>
<TD><TT>(3 1 2 ; 4 0) C. y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde</TT></TD>
<TD><TT>ecdba</TT></TD>
<TD><TT>ecdba</TT></TD>
</TABLE>
<p>
<H3>16.1.1  Abbreviated Permutations</H3>
Dyadic <TT>C.</TT> can accept a left argument which is an abbreviation for a (direct) permutation vector.
The effect is to move specified items to the tail, one at a time, in the order given.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y </TT></TD>
<TD><TT>2 C. y </TT></TD>
<TD><TT>2 3 C. y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde</TT></TD>
<TD><TT>abdec</TT></TD>
<TD><TT>abecd</TT></TD>
</TABLE>
<p>
With the abbreviated form, successive items are taken from the original vector: notice how the following
 two examples give different results.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y </TT></TD>
<TD><TT>2 3 C. y</TT></TD>
<TD><TT>3 C. (2 C. y)</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde</TT></TD>
<TD><TT>abecd</TT></TD>
<TD><TT>abdce</TT></TD>
</TABLE>
<p>
If the left argument is boxed, then each box in turn is applied as a cycle:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y </TT></TD>
<TD><TT>(<3 1 2) C. y</TT></TD>
<TD><TT>(3 1 2 ; 4 0) C. y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde</TT></TD>
<TD><TT>acdbe</TT></TD>
<TD><TT>ecdba</TT></TD>
</TABLE>
<p>
If <TT>a</TT> is an abbreviated permutation vector (of order <TT>n</TT>) then the full-length equivalent of <TT>a</TT> 
is given by <TT>(a U n)</TT> where <TT>U</TT> is the utility function: 
<PRE>
<TT>   U =: 4 : 0</TT>
<TT>z =: y | x</TT>
<TT>((i. y) -. z), z</TT>
<TT>)</TT>
</PRE>
For example, suppose the abbreviated 
permutation <TT>a</TT> is <TT>(1 3)</TT>
then we see:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y </TT></TD>
<TD><TT>a =: 1 3</TT></TD>
<TD><TT>a C. y</TT></TD>
<TD><TT>f =: a U (#y)</TT></TD>
<TD><TT>f C. y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde</TT></TD>
<TD><TT>1 3</TT></TD>
<TD><TT>acebd</TT></TD>
<TD><TT>0 2 4 1 3</TT></TD>
<TD><TT>acebd</TT></TD>
</TABLE>
<p>
<H3>16.1.2  Inverse Permutation</H3>
If <TT>f</TT> is a full-length permutation vector, then the inverse permutation is given by
<TT>(/: f)</TT>. (We will look at the verb <TT>/:</TT> in 
the next section.)
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y </TT></TD>
<TD><TT>f </TT></TD>
<TD><TT>z =: f C. y</TT></TD>
<TD><TT>/: f</TT></TD>
<TD><TT>(/: f) C. z</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde</TT></TD>
<TD><TT>0 2 4 1 3</TT></TD>
<TD><TT>acebd</TT></TD>
<TD><TT>0 3 1 4 2</TT></TD>
<TD><TT>abcde</TT></TD>
</TABLE>
<p>
<H3>16.1.3  Atomic Representations of Permutations.</H3>
If <TT>y</TT> is a vector of length <TT>n</TT>, then there are altogether <TT>! n</TT> different permutations of <TT>y</TT>. 
 A table of all
permutations of order <TT>n</TT> can be generated by the expression <TT>(tap n)</TT> where tap is a utility verb defined by: 
<PRE>
<TT>   tap =: i. @ ! A. i.</TT>
<TT>   tap 3</TT>
<TT>0 1 2</TT>
<TT>0 2 1</TT>
<TT>1 0 2</TT>
<TT>1 2 0</TT>
<TT>2 0 1</TT>
<TT>2 1 0</TT>
</PRE>
It can be seen that these permutations are in a well-defined order, and so any permutation of order
<TT>n</TT> can be identified simply by its index in the table <TT>(tap n)</TT>.  This index is called the atomic
representation of the permutation.  The monadic verb <TT>A.</TT> computes the atomic representation. 
For example, 
given an order-3 permutation, e.g. <TT>2 1 0</TT>,  then <TT>A. 2 1 0</TT> yields the index in the table <TT>(tap 3)</TT>. 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>A. 2 1 0</TT></TD>
<TD><TT>5 { tap 3</TT></TD>
<TR VALIGN=TOP>
<TD><TT>5</TT></TD>
<TD><TT>2 1 0</TT></TD>
</TABLE>
<p>
The dyadic verb <TT>A.</TT> applies an atomic representation of a permutation.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>2 1 0 { 'PQR'</TT></TD>
<TD><TT> 5 A. 'PQR'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>RQP</TT></TD>
<TD><TT>RQP</TT></TD>
</TABLE>
<p>
Here is an example of the use of <TT>A.</TT>.
The process of running
through
all the permutations of something
(say to search for anagrams of a word)
might take a very long time.
Hence it might be desirable to 
run through them say 100 at a time.
<p>
Here is a verb which finds a limited number of
permutations. 
The argument is a boxed list: a vector
to be permuted, followed by a starting permutation-number 
(that is, atomic index) followed by
a count of the permutions to be found.
<PRE>
<TT>   LPerms =: 3 : 0</TT>
<TT>'arg start count' =. y</TT>
<TT>(start + i. count) A. " 0 1 arg</TT>
<TT>)</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>LPerms 'abcde'; 0; 4</TT></TD>
<TD><TT>LPerms 'abcde'; 4; 4</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde<BR>
abced<BR>
abdce<BR>
abdec</TT></TD>
<TD><TT>abecd<BR>
abedc<BR>
acbde<BR>
acbed</TT></TD>
</TABLE>
<p>
<A NAME="02"></A>
<A NAME="03"></A>
<A NAME="04"></A>
<H2>16.2  Sorting</H2>
There is a built-in monad, <TT>/:</TT> (slash colon,
called "Grade Up").  For a list
<TT>L</TT>, the expression <TT>(/: L)</TT> gives 
a set of indices into <TT>L</TT>, and these indices
are a permutation-vector.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>L =: 'barn'</TT></TD>
<TD><TT>/: L</TT></TD>
<TR VALIGN=TOP>
<TD><TT>barn</TT></TD>
<TD><TT>1 0 3 2</TT></TD>
</TABLE>
<p>
These indices select the items of <TT>L</TT>
in ascending order. That is,
the expression <TT>((/: L) { L)</TT>
yields the items of <TT>L</TT> in order.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>L</TT></TD>
<TD><TT>/: L</TT></TD>
<TD><TT>(/: L) { L</TT></TD>
<TR VALIGN=TOP>
<TD><TT>barn</TT></TD>
<TD><TT>1 0 3 2</TT></TD>
<TD><TT>abnr</TT></TD>
</TABLE>
<p>
For sorting into descending order,
the monad <TT>\:</TT>(backslash colon, called 
"Grade Down") can be used.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>L</TT></TD>
<TD><TT>(\: L) { L</TT></TD>
<TR VALIGN=TOP>
<TD><TT>barn</TT></TD>
<TD><TT>rnba</TT></TD>
</TABLE>
<p>
Since <TT>L</TT> is a character list, its items
are sorted into alphabetical order.
Numeric lists or boxed lists are sorted
appropriately.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>N =: 3 1 4 5</TT></TD>
<TD><TT>(/: N) { N</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3 1 4 5</TT></TD>
<TD><TT>1 3 4 5</TT></TD>
</TABLE>
<p>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>B =: 'pooh';'bah';10;5</TT></TD>
<TD><TT>(/: B) { B</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+----+---+--+-+<BR>
|pooh|bah|10|5|<BR>
+----+---+--+-+</TT></TD>
<TD><TT>+-+--+---+----+<BR>
|5|10|bah|pooh|<BR>
+-+--+---+----+</TT></TD>
</TABLE>
<p>
Now consider sorting the rows of a table.
Here is an example of a table with 3 rows:
<PRE>
<TT>   T =: (". ;. _2) 0 : 0</TT>
<TT>'WA' ;'Mozart';  1756</TT>
<TT>'JS' ;'Bach'  ;  1685</TT>
<TT>'CPE';'Bach'  ;  1714</TT>
<TT>)</TT>
</PRE>
Suppose we aim to sort the rows 
of the table into order of date-of-birth
shown in column 2 (the third column).
We say that column 2 contains the keys on which
the table is to be sorted.
<p>
We extract the keys with the verb 
<TT>2&amp;{"1</TT>, generate the permutation vector
with <TT>/:</TT> applied to the keys,
 and then permute the table.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>T</TT></TD>
<TD><TT>keys =: 2&amp;{"1 T</TT></TD>
<TD><TT>(/: keys) { T</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+---+------+----+<BR>
|WA |Mozart|1756|<BR>
+---+------+----+<BR>
|JS |Bach&nbsp;&nbsp;|1685|<BR>
+---+------+----+<BR>
|CPE|Bach&nbsp;&nbsp;|1714|<BR>
+---+------+----+</TT></TD>
<TD><TT>+----+----+----+<BR>
|1756|1685|1714|<BR>
+----+----+----+</TT></TD>
<TD><TT>+---+------+----+<BR>
|JS |Bach&nbsp;&nbsp;|1685|<BR>
+---+------+----+<BR>
|CPE|Bach&nbsp;&nbsp;|1714|<BR>
+---+------+----+<BR>
|WA |Mozart|1756|<BR>
+---+------+----+</TT></TD>
</TABLE>
<p>
<A NAME="05"></A>
<A NAME="06"></A>
The expression <TT>(/: keys { T)</TT>
can be abbreviated as <TT>(T /: keys)</TT>, using the dyadic case 
of <TT>/:</TT>, (called "Sort")
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>(/: keys) { T</TT></TD>
<TD><TT>T /: keys</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+---+------+----+<BR>
|JS |Bach&nbsp;&nbsp;|1685|<BR>
+---+------+----+<BR>
|CPE|Bach&nbsp;&nbsp;|1714|<BR>
+---+------+----+<BR>
|WA |Mozart|1756|<BR>
+---+------+----+</TT></TD>
<TD><TT>+---+------+----+<BR>
|JS |Bach&nbsp;&nbsp;|1685|<BR>
+---+------+----+<BR>
|CPE|Bach&nbsp;&nbsp;|1714|<BR>
+---+------+----+<BR>
|WA |Mozart|1756|<BR>
+---+------+----+</TT></TD>
</TABLE>
<p>
The dyadic case of <TT>\:</TT> is similar: it is also called "Sort".
<p>
Suppose now we need to sort on two columns, 
say by last name, and then by initials. 
The keys are column 1 then column 0.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>keys =: 1 0  &amp; { " 1 T</TT></TD>
<TD><TT>T /: keys</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+------+---+<BR>
|Mozart|WA |<BR>
+------+---+<BR>
|Bach&nbsp;&nbsp;|JS |<BR>
+------+---+<BR>
|Bach&nbsp;&nbsp;|CPE|<BR>
+------+---+</TT></TD>
<TD><TT>+---+------+----+<BR>
|CPE|Bach&nbsp;&nbsp;|1714|<BR>
+---+------+----+<BR>
|JS |Bach&nbsp;&nbsp;|1685|<BR>
+---+------+----+<BR>
|WA |Mozart|1756|<BR>
+---+------+----+</TT></TD>
</TABLE>
<p>
These examples show that the keys can be
a table, 
and the <TT>/:</TT> verb yields the permutation-vector
which puts the rows of the table into order.
In such a case, 
the first column of the table is the most significant,
then the second column, and so on.
<A NAME="07"></A>
<H3>16.2.1  Predefined Collating Sequences</H3>
Characters are sorted into "alphabetical order", numbers into
"numerical order" and boxes into a well-defined order. 
The order for sorting all possible keys
 of a given type is called a collating sequence (for keys of that type).
We have three predefined collating sequences.
The collating sequence for characters is the ASCII character set. 
The built-in J noun <TT>a.</TT> gives the value
of all 256 characters in "alphabetical" order. Note that upper-case letters come before lower-case
letters. 
<PRE>
<TT>   65 66 67 97 98 99 { a.</TT>
<TT>ABCabc</TT>
</PRE>
With numerical arguments, complex numbers are ordered by the real part then the imaginary part.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>n=:  0 1 _1 2j1 1j2 1j1</TT></TD>
<TD><TT>n /: n</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0 1 _1 2j1 1j2 1j1</TT></TD>
<TD><TT>_1 0 1 1j1 1j2 2j1</TT></TD>
</TABLE>
<p>
With boxed arrays, the ordering is by the contents of
each box. 
The precedence is firstly by 
type, with 
numerical arrays preceding empty arrays preceding
character arrays preceding boxed arrays:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>k=: (< 'abc') ; 'pqr' ; 4 ; '' ; 3</TT></TD>
<TD><TT>k /: k</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-----+---+-++-+<BR>
|+---+|pqr|4||3|<BR>
||abc||&nbsp;&nbsp;&nbsp;| || |<BR>
|+---+|&nbsp;&nbsp;&nbsp;| || |<BR>
+-----+---+-++-+</TT></TD>
<TD><TT>+-+-++---+-----+<BR>
|3|4||pqr|+---+|<BR>
| | ||&nbsp;&nbsp;&nbsp;||abc||<BR>
| | ||&nbsp;&nbsp;&nbsp;|+---+|<BR>
+-+-++---+-----+</TT></TD>
</TABLE>
<p>
Within arrays of the same type, low-rank precedes
high-rank. 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>m=: 2 4 ; 3 ; (1 1 $ 1)</TT></TD>
<TD><TT>m /: m</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+---+-+-+<BR>
|2 4|3|1|<BR>
+---+-+-+</TT></TD>
<TD><TT>+-+---+-+<BR>
|3|2 4|1|<BR>
+-+---+-+</TT></TD>
</TABLE>
<p>
Within arrays of the same type and rank, in effect the arrays are 
ravelled, and then compared
element by element. In this case, <TT>1 2</TT> takes precedence
over <TT>1 3</TT> (because <TT>2 < 3</TT>), and <TT>3 3</TT> takes precedence over 
<TT>3 3 3</TT> (because <TT>3 3</TT> is shorter than <TT>3 3 3</TT>).  If the two arrays are 
the same, then the earlier takes precedence (that is, their
original order is not disturbed).
<PRE>
<TT>   a =: 2 3 $ 1 2 3 4 5 6</TT>
<TT>   b =: 3 2 $ 1 2 5 6 3 4</TT>
<TT>   c =: 1 3 $ 1 2 3</TT>
<TT>   d =: 1 3 $ 1 1 3</TT>
<TT>   </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> u=:a;b;c</TT></TD>
<TD><TT> u /:  u</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-----+---+-----+<BR>
|1 2 3|1 2|1 2 3|<BR>
|4 5 6|5 6|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<BR>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|3 4|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<BR>
+-----+---+-----+</TT></TD>
<TD><TT>+---+-----+-----+<BR>
|1 2|1 2 3|1 2 3|<BR>
|5 6|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|4 5 6|<BR>
|3 4|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<BR>
+---+-----+-----+</TT></TD>
</TABLE>
<p>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>w=:a;b;c;d </TT></TD>
<TD><TT>w /: w</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-----+---+-----+-----+<BR>
|1 2 3|1 2|1 2 3|1 1 3|<BR>
|4 5 6|5 6|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<BR>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|3 4|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<BR>
+-----+---+-----+-----+</TT></TD>
<TD><TT>+-----+---+-----+-----+<BR>
|1 1 3|1 2|1 2 3|1 2 3|<BR>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|5 6|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|4 5 6|<BR>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|3 4|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<BR>
+-----+---+-----+-----+</TT></TD>
</TABLE>
<p>
<H3>16.2.2  User-Defined Collating Sequences</H3>
The keys are computed from the data.
By choosing how to compute the keys,
we can choose a collating sequence.
<p>
For example, suppose a 
list of numbers is to be sorted into
ascending order of absolute value.
A suitable key-computing
function would then be 
the "Magnitude" function, <TT>|</TT>. 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>x=: 2 1 _3</TT></TD>
<TD><TT>keys =: | x</TT></TD>
<TD><TT>x /: keys</TT></TD>
<TR VALIGN=TOP>
<TD><TT>2 1 _3</TT></TD>
<TD><TT>2 1 3</TT></TD>
<TD><TT>1 2 _3</TT></TD>
</TABLE>
<p>
<A NAME="08"></A>
<H2>16.3  Transpositions</H2>
The monadic verb <TT>|:</TT> will transpose a matrix, that is, interchange the first and second axes.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> M =: 2 3 $ 'abcdef' </TT></TD>
<TD><TT>|: M</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abc<BR>
def</TT></TD>
<TD><TT>ad<BR>
be<BR>
cf</TT></TD>
</TABLE>
<p>
More generally, <TT>|:</TT> will reverse the order of the axes of a n-dimensional array. 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>N =: 2 2 2 $ 'abcdefgh' </TT></TD>
<TD><TT>|: N</TT></TD>
<TR VALIGN=TOP>
<TD><TT>ab<BR>
cd<BR>
<BR>
ef<BR>
gh</TT></TD>
<TD><TT>ae<BR>
cg<BR>
<BR>
bf<BR>
dh</TT></TD>
</TABLE>
<p>
Dyadic transpose will permute the axes according to the (full or abbreviated) 
permutation-vector
 given as left argument. For a 3-dimensional array, 
 there are 6 possible permutations, 
 with the first being the identity-permutation 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>N </TT></TD>
<TD><TT>0 1 2 |: N </TT></TD>
<TD><TT>0 2 1 |: N </TT></TD>
<TD><TT>1 0 2 |: N </TT></TD>
<TR VALIGN=TOP>
<TD><TT>ab<BR>
cd<BR>
<BR>
ef<BR>
gh</TT></TD>
<TD><TT>ab<BR>
cd<BR>
<BR>
ef<BR>
gh</TT></TD>
<TD><TT>ac<BR>
bd<BR>
<BR>
eg<BR>
fh</TT></TD>
<TD><TT>ab<BR>
ef<BR>
<BR>
cd<BR>
gh</TT></TD>
</TABLE>
<p>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>1 2 0 |: N</TT></TD>
<TD><TT>2 0 1 |: N</TT></TD>
<TD><TT>2 1 0 |: N </TT></TD>
<TR VALIGN=TOP>
<TD><TT>ae<BR>
bf<BR>
<BR>
cg<BR>
dh</TT></TD>
<TD><TT>ac<BR>
eg<BR>
<BR>
bd<BR>
fh</TT></TD>
<TD><TT>ae<BR>
cg<BR>
<BR>
bf<BR>
dh</TT></TD>
</TABLE>
<p>
A boxed abbreviated argument can be given.  
Two or more boxed axis-numbers are
run together to form a single axis.  
With two dimensions, this is equivalent to taking the diagonal.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>K =:  i. 3 3 </TT></TD>
<TD><TT>(< 0 1) |: K</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0 1 2<BR>
3 4 5<BR>
6 7 8</TT></TD>
<TD><TT>0 4 8</TT></TD>
</TABLE>
<p>
<A NAME="09"></A>
<H2>16.4  Reversing,  Rotating and Shifting</H2>
<H3>16.4.1  Reversing</H3>
Monadic <TT>|</TT>. will reverse the order of the items of its argument. 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> y </TT></TD>
<TD><TT> |. y</TT></TD>
<TD><TT> M </TT></TD>
<TD><TT> |. M</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde</TT></TD>
<TD><TT>edcba</TT></TD>
<TD><TT>abc<BR>
def</TT></TD>
<TD><TT>def<BR>
abc</TT></TD>
</TABLE>
<p>
Notice that "reversing the items" means reversing along the first 
 axis. Reversal along other axes can be achieved with the
rank conjunction <TT>(")</TT>.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>N </TT></TD>
<TD><TT>|. N</TT></TD>
<TD><TT>|." 1 N</TT></TD>
<TD><TT>|. " 2 N</TT></TD>
<TR VALIGN=TOP>
<TD><TT>ab<BR>
cd<BR>
<BR>
ef<BR>
gh</TT></TD>
<TD><TT>ef<BR>
gh<BR>
<BR>
ab<BR>
cd</TT></TD>
<TD><TT>ba<BR>
dc<BR>
<BR>
fe<BR>
hg</TT></TD>
<TD><TT>cd<BR>
ab<BR>
<BR>
gh<BR>
ef</TT></TD>
</TABLE>
<p>
<A NAME="10"></A>
<H3>16.4.2  Rotating</H3>
Dyadic <TT>|.</TT> rotates the items of <TT>y</TT> by an amount given by the argument <TT>x</TT>.
A positive value for <TT>x</TT> rotates to the left.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> y </TT></TD>
<TD><TT> 1 |. y</TT></TD>
<TD><TT> _1 |. y</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde</TT></TD>
<TD><TT>bcdea</TT></TD>
<TD><TT>eabcd</TT></TD>
</TABLE>
<p>
Successive numbers in <TT>x</TT> rotate y along successive axes:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> M  </TT></TD>
<TD><TT> 1 2 |. M</TT></TD>
<TD><TT> N </TT></TD>
<TD><TT> 1 2 |. N </TT></TD>
<TR VALIGN=TOP>
<TD><TT>abc<BR>
def</TT></TD>
<TD><TT>fde<BR>
cab</TT></TD>
<TD><TT>ab<BR>
cd<BR>
<BR>
ef<BR>
gh</TT></TD>
<TD><TT>ef<BR>
gh<BR>
<BR>
ab<BR>
cd</TT></TD>
</TABLE>
<p>
<A NAME="11"></A>
<H3>16.4.3  Shifting</H3>
The items which would be brought around by 
cyclic rotation can instead be replaced with 
a fill-item.
A shifting verb is written <TT>(|. !. f)</TT> where <TT>f</TT> is the fill-item.
<PRE>
<TT>   ash   =: |. !. '*'    NB. alphabetic shift</TT>
<TT>   nsh   =: |. !. 0      NB. numeric shift</TT>
<TT>             </TT>
</PRE>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>y </TT></TD>
<TD><TT>_2 ash y</TT></TD>
<TD><TT>z =: 2 3 4</TT></TD>
<TD><TT>_1 nsh z</TT></TD>
<TR VALIGN=TOP>
<TD><TT>abcde</TT></TD>
<TD><TT>**abc</TT></TD>
<TD><TT>2 3 4</TT></TD>
<TD><TT>0 2 3</TT></TD>
</TABLE>
<p>
This is the end of Chapter 16
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="17.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version 701. 
 This chapter last updated 15 Dec 2012<BR> 
Copyright &copy; Roger Stokes 2012. 
 This material may be freely reproduced, 
provided that this copyright notice is also reproduced. 
</FONT> 
 <!--bottom jump start--><hr><a href="17.htm">&gt;&gt;</a>&nbsp;
<a href="15.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
