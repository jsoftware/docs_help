<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
       
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=UTF-8"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)">   
  <TITLE>   Ch 25: OOP</TITLE> 
  <STYLE TYPE="text/css"> 
    TT  {font-size: 12pt; COLOR: BLUE} 
    PRE {font-size: 12pt; COLOR: BLUE} 
                                    
    table.jtable {                  
         border-width: thin;        
         border-spacing: 2px;       
         border-style: solid;       
         border-color: gray;        
         border-collapse: collapse; 
         background-color: white;   
     }                              
     table.jtable td {              
         border-width: 1px;         
         padding: 10px;             
         border-style: solid;       
         border-color: gray;        
         background-color: white;   
     }                              
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="26.htm">&gt;&gt;</a>&nbsp;
<a href="24.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <H1>Chapter 25: Object-Oriented Programming</H1>
<H2>25.1  Background and Terminology</H2>
In this chapter "OOP" will stand for "object-oriented programming".
Here is the barest thumbnail sketch of OOP.
<p>
On occasion, a program needs to build, maintain and use a collection of related
data, where it is natural to consider the collection to be, in some sense, a whole. 
For example, a "stack" is a sequence of data items, 
such that the most-recently added item is the first to be removed.
If we intend to make much use of stacks, then it might be a worthwhile investment
to write some functions dedicated to building and using stacks.   
<p>
The combination of some data and some dedicated functions
is called an object.  Every object belongs to some specific class of similar objects.
We will say that a stack is an object of the <TT>Stack</TT> class.
<p>
The dedicated functions for objects of a given class are called the "methods"
of the class. 
For example, for objects of the <TT>Stack</TT> class we will need 
a method for adding a new item, and a method for retrieving the last-added item. 
<p>
An object needs one or more variables to represent its data.
Such variables are called fields. Thus for a stack we may choose to have a single field, a list of items.
<p>
In summary, OOP consists of identifying a useful class of objects, 
and then defining the class by defining methods and fields,
and then using the methods. 
<p>
By organizing a program into the definitions of different classes, 
OOP can be viewed as a way of managing complexity.  The simple examples which follow
are meant to illustrate the machinery of the OOP approach, but not to provide much 
by way of motivation for OOP. 
<p>
We will be using a number of library functions, mostly with names beginning "co",
meaning "class and object".
A brief summary of them is given at the end of this chapter.  
<A NAME="01"></A>
<H2>25.2  Defining a Class</H2>
<A NAME="02"></A>
<H3>25.2.1  Introducing the Class</H3>
For a simple example, we look at defining a class which we choose to call "Stack".
A new class is introduced with the library function <TT>coclass</TT>.
<PRE>
<TT>   coclass 'Stack'</TT>
</PRE>
<TT>coclass</TT> is used for its effect, not its result. The effect of <TT>coclass</TT>
is to establish and make current a new
locale called <TT>Stack</TT>. 
To verify this, we can inspect the name of the current locale:
<PRE>
<TT>   coname ''</TT>
<TT>+-----+</TT>
<TT>|Stack|</TT>
<TT>+-----+</TT>
</PRE>
<A NAME="01"></A>
<H3>25.2.2  Defining the Methods</H3>
A new object comes into being in two steps. The first step uses library verb <TT>conew</TT>
to create a rudimentary object, devoid of fields, a mere placeholder. The second step
gives a new object its structure and initial content by creating 
and assigning values to the field-variables.
<p>
We will deal with the first step below. The second step we look at now. 
It is done by a method conventionally called <TT>create</TT> 
(meaning "create fields", not "create object"). 
This is the first of the methods we must define.
<p>
For example, we decide that a <TT>Stack</TT> object is to have a 
single field called <TT>items</TT>, initially an empty list. 
<PRE>
<TT>   create =: 3 : 'items =: 0 $ 0'</TT>
</PRE>
The connection between this method and the <TT>Stack</TT> class is that 
<TT>create</TT> has just been defined in the current locale, which is <TT>Stack</TT>.
<p>
This <TT>create</TT> method is a verb. In this example, it ignores its argument, 
and its result is of no
interest: it is executed purely for its effect. Its effect will be that the
(implicitly specified) object will be set up to have a single field called <TT>items</TT>
 as an empty list.
<p>
Our second method is for pushing a new value on to the front of the <TT>items</TT> 
in a stack. 
<PRE>
<TT>   push =: 3 : '# items =: (< y) , items'</TT>
</PRE>
The <TT>push</TT> method is a verb. Its argument <TT>y</TT> is the new value to be pushed.
We made a design-decision here that <TT>y</TT> is to be boxed and then pushed. 
The result is of no interest, but there must be some result, so we chose to return
<TT>(# items)</TT> rather than just <TT>items</TT>.
<p>
Next, a method for inspecting the "top" (most-recently added) item on the stack. 
It returns that value of that item.  The stack is unchanged.
<PRE>
<TT>   top =: 3 : '> {. items'</TT>
</PRE>
Next a method to remove the top item of the stack.
<PRE>
<TT>   pop =: 3 : '#  items =: }. items'</TT>
</PRE>
Finally, a method to "destroy" a <TT>Stack</TT> object, that is, 
eliminate it when we are finished with it.
For this purpose there is a library function <TT>codestroy</TT>.
<PRE>
<TT>   destroy =: codestroy</TT>
</PRE>
This completes the definition of the <TT>Stack</TT> class.
Since we are still 
within the scope of the <TT>coclass 'Stack'</TT> statement above, the current locale 
is <TT>Stack</TT>. 
To use this class definition we return to our regular working environment, 
the <TT>base</TT> locale.
<PRE>
<TT>   cocurrent 'base'</TT>
</PRE>
<A NAME="03"></A>
<H2>25.3  Making New Objects</H2>
Now we are in a position to create and use <TT>Stack</TT> objects. 
A new <TT>Stack</TT> is created in two steps.
The first step uses the library verb <TT>conew</TT>. 
<PRE>
<TT>   S =: conew 'Stack'</TT>
</PRE>
The result of <TT>conew</TT> which we assigned to <TT>S</TT> is not the newly-created object itself. 
Rather, the value of <TT>S</TT> is in effect a unique reference-number which identifies 
the newly-created <TT>Stack</TT> object. For brevity we will say "Stack <TT>S</TT>" to mean the object referred to by <TT>S</TT>.
<p>
Stack <TT>S</TT> now exists but its state is so far undefined. 
Therefore the second step in making the object is to use the <TT>create</TT> method 
to change the state of <TT>S</TT> to be an empty stack. Since <TT>create</TT> ignores its
argument, we supply an argument of <TT>0</TT> 
<PRE>
<TT>   create__S 0</TT>
<TT></TT>
</PRE>
Now we can push values onto the stack <TT>S</TT> and retrieve
them in last-in-first-out order.  In the following, the expression
(<TT>push__S 'hello'</TT> means: the method <TT>push</TT> with argument <TT>'hello'</TT> applied
to object <TT>S</TT>. 
<PRE>
<TT>   push__S 'hello'</TT>
<TT>1</TT>
<TT>   push__S 'how are you?'</TT>
<TT>2</TT>
<TT>   push__S 'goodbye'</TT>
<TT>3</TT>
<TT>   pop__S 0</TT>
<TT>2</TT>
<TT>   top__S 0</TT>
<TT>how are you?</TT>
</PRE>
<H3>25.3.1  Dyadic Conew</H3>
The two steps involved in creating a new object, <TT>conew</TT> 
followed by <TT>create</TT>, 
can be collapsed into one using dyadic <TT>conew</TT>. 
The scheme is that:
<PRE>
<TT>                o =: conew 'Class'</TT>
</PRE>
<PRE>
<TT>                create__o arg</TT>
</PRE>
can be abbreviated as:
<PRE>
<TT>                o =: arg conew 'Class'  </TT>
</PRE>
That is, any left argument of <TT>conew</TT> is passed to <TT>create</TT>, 
which is automatically invoked.  In this simple <TT>Stack</TT> class, 
<TT>create</TT> ignores its argument, but even so one step is neater than two. 
For example:
<PRE>
<TT>   T =: 0 conew 'Stack'</TT>
<TT>   push__T 77</TT>
<TT>1</TT>
<TT>   push__T 88</TT>
<TT>2</TT>
<TT>   top__T 0</TT>
<TT>88</TT>
<TT>   </TT>
</PRE>
<H2>25.4  Listing the Classes and Objects</H2>
In this section we look at inspecting the population of objects and classes
we have created.
The expression <TT>(18!:1) 0 1</TT> produces a list of all existing locales.
<PRE>
<TT>   (18!:1) 0 1</TT>
<TT>+-+-+-----+----+----+-+-------+--------+------+-----+-+</TT>
<TT>|0|1|Stack|base|ctag|j|jadetag|jcompare|jregex|jtask|z|</TT>
<TT>+-+-+-----+----+----+-+-------+--------+------+-----+-+</TT>
</PRE>
We see here the names of locales of 3 different kinds.
Firstly, there are ordinary locales such as <TT>base</TT>, and <TT>z</TT>, described in <A HREF="24.htm">Chapter 24</A>.
These are created automatically by the J system. Depending on the version of J you are
using, you may see a list different from the one shown here.
<p>
Secondly, there are locales such as <TT>Stack</TT>. 
The <TT>Stack</TT> locale defines the <TT>Stack</TT> class. 
If we view this locale (with the <TT>view</TT> utility function from <A HREF="24.htm">Chapter 24</A>)
<PRE>
<TT>   view 'Stack'</TT>
<TT>IP      =: 1                             </TT>
<TT>create  =: 3 : 'items =: 0 $ 0'          </TT>
<TT>destroy =: codestroy                     </TT>
<TT>pop     =: 3 : '#  items =: }. items'    </TT>
<TT>push    =: 3 : '# items =: (< y) , items'</TT>
<TT>top     =: 3 : '> {. items'              </TT>
</PRE>
we see a variable <TT>IP</TT> (created automatically) 
and our methods which we defined for <TT>Stack</TT>.
<p>
Thirdly, we have locales such as <TT>0</TT>. Here the name is a string of numeric digits
(that is, <TT>'0'</TT>). Such a locale is an object. The variable <TT>S</TT> has the value <TT><'0'</TT>,
so that here object <TT>S</TT> is locale <TT>'0'</TT>. 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>S</TT></TD>
<TD><TT>view >S</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+<BR>
|0|<BR>
+-+</TT></TD>
<TD><TT>COCREATOR =: <'base'<BR>
items&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=: <;._1 '|how are you?|hello'</TT></TD>
</TABLE>
<p>
We see a variable <TT>COCREATOR</TT>, which identifies this locale as an object,
and the field(s) of the object.
<p>
The path from an object is given by the verb <TT>18!:2</TT>
<PRE>
<TT>   18!:2 S</TT>
<TT>+-----+-+</TT>
<TT>|Stack|z|</TT>
<TT>+-----+-+</TT>
</PRE>
Since <TT>S</TT> is a <TT>Stack</TT> object, the first locale on its path is <TT>Stack</TT>. 
Recall from <A HREF="24.htm">Chapter 24</A> that, since <TT>S = <'0'</TT> then
the expression <TT>push__S 99</TT> means:
<p>
<OL><LI>change the current locale to <TT>'0'</TT>. 
Now the fields of object <TT>S</TT>, (that is, the 
the <TT>items</TT> variable of locale <TT>'0'</TT>) are available.
<p>
<LI>apply the <TT>push</TT> verb to argument <TT>99</TT>. Since <TT>push</TT> is not in  locale <TT>'0'</TT>,
a search is made along the path from locale <TT>'0'</TT> which takes us to
locale <TT>Stack</TT>  whence <TT>push</TT> is retrieved before it is applied.
<LI> Restore the current locale to the status quo.
</OL>
Here is a utility function to list all the existing objects and their classes.
<PRE>
<TT>   obcl =: 3 : '(, ({. @: (18!:2)))"0  (18!:1) 1'</TT>
</PRE>
Currently we have variables <TT>S</TT> and <TT>T</TT>
each referring to a <TT>Stack</TT> object.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> S </TT></TD>
<TD><TT> T </TT></TD>
<TD><TT> obcl '' </TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+<BR>
|0|<BR>
+-+</TT></TD>
<TD><TT>+-+<BR>
|1|<BR>
+-+</TT></TD>
<TD><TT>+-+-----+<BR>
|0|Stack|<BR>
+-+-----+<BR>
|1|Stack|<BR>
+-+-----+</TT></TD>
</TABLE>
<p>
(Again, depending on the version of J you are using, you may see further
objects and classes automatically generated by the J system for its own use.)
<p>
A Stack,  <TT>S</TT> say, can be removed using the <TT>destroy</TT> method of the 
<TT>Stack</TT> class. 
<PRE>
<TT>   destroy__S  '' </TT>
<TT>1</TT>
<TT>   </TT>
</PRE>
We see it has gone.
<PRE>
<TT>   obcl ''</TT>
<TT>+-+-----+</TT>
<TT>|1|Stack|</TT>
<TT>+-+-----+</TT>
<TT>   </TT>
</PRE>
In conclusion, note particularly that an object is a locale.  
 This means that an object is not a variable or a value.  
An object is not something which can be an argument to a function, 
or returned by a function.  An object cannot be part of another object.
<p>
All these things can be done using names of objects in place of objects.  
Every object has a unique system-generated name, represented by a string. 
This string
is just an ordinary value, and all the usual things can be done with it.
<A NAME="04"></A>
<H2>25.5  Inheritance</H2>
Here we look at how a new class can 
build on an existing class.
The main idea is that, given some class, we can develop
a new class as a specialized version of the old class.
<p>
For example, suppose there is a class called <TT>Collection</TT>
where the objects are collections of values.  We could define
a new class where, say, the objects are collections without duplicates,
and this class could be called <TT>Set</TT>.  Then a <TT>Set</TT> object
is a special kind of a <TT>Collection</TT> object.
<p>
In such a case we say that the <TT>Set</TT> class is a child of the parent class
<TT>Collection</TT>. The child will inherit the methods of the parent, perhaps
modifying some and perhaps adding new methods, to realize the special
properties of child objects.
<p>
For a simple example we begin with a parent-class called <TT>Collection</TT>,
<PRE>
<TT>   coclass 'Collection'</TT>
<TT>   create  =: 3 : 'items =: 0 $ 0'</TT>
<TT>   add     =: 3 : '# items =: (< y) , items'</TT>
<TT>   remove  =: 3 : '# items =: items -. < y'</TT>
<TT>   inspect =: 3 : 'items'</TT>
<TT>   destroy =: codestroy</TT>
</PRE>
Here the <TT>inspect</TT> method yields a boxed list of all the members of the collection.
<p>
A quick demonstration:
<PRE>
<TT>   cocurrent 'base'</TT>
<TT>   C1 =: 0 conew 'Collection'</TT>
<TT>   add__C1 'foo'</TT>
<TT>1</TT>
<TT>   add__C1 37</TT>
<TT>2</TT>
<TT>   remove__C1 'foo'</TT>
<TT>1</TT>
<TT>   inspect__C1 0</TT>
<TT>+--+</TT>
<TT>|37|</TT>
<TT>+--+</TT>
</PRE>
Now we define the <TT>Set</TT> class, specifying that <TT>Set</TT> is to be a child of
<TT>Collection</TT> with the library verb <TT>coinsert</TT>.
<PRE>
<TT>   coclass 'Set'</TT>
<TT>   coinsert 'Collection'</TT>
</PRE>
To express the property that a <TT>Set</TT> has no duplicates, we need to modify 
only the <TT>add</TT> method. Here is something that will work:
<PRE>
<TT>   add =: 3 : '# items =: ~. (< y) , items'</TT>
</PRE>
All the other methods needed for <TT>Set</TT> are already available, 
inherited from the parent class <TT>Collection</TT>.
We have finished the definition of <TT>Set</TT>
and are ready to use it.
<PRE>
<TT>   cocurrent 'base'</TT>
<TT>   s1 =: 0 conew 'Set'  NB. make new Set object.</TT>
<TT>   add__s1 'a'</TT>
<TT>1</TT>
<TT>   add__s1 'b'</TT>
<TT>2</TT>
<TT>   add__s1 'a'</TT>
<TT>2</TT>
<TT>   remove__s1 'b'</TT>
<TT>1</TT>
<TT>   inspect__s1 0        NB. should have just one 'a' </TT>
<TT>+-+</TT>
<TT>|a|</TT>
<TT>+-+</TT>
<TT>   </TT>
</PRE>
<H3>25.5.1  A Matter of Principle</H3>
Recall the definition of the <TT>add</TT> method of class <TT>Set</TT>.
<PRE>
<TT>   add_Set_</TT>
<TT>3 : '# items =: ~. (< y) , items'</TT>
</PRE>
It has an objectionable feature: in writing it we used our knowledge
of the internals of a <TT>Collection</TT> object, 
namely that there is a field called <TT>items</TT> which is a boxed list.
<p>
Now the methods of <TT>Collection</TT> are supposed to be adequate for all handling
of <TT>Collection</TT> objects. As a matter of principle, if we stick to the
methods and avoid rummaging around in the internals, we hope to shield
ourselves, to some degree, from possible future changes to the internals of 
<TT>Collection</TT>.  Such changes might be, for example, for improved performance.
<p>
Let's try redefining <TT>add</TT> again, 
this time sticking to the methods of the parent as much as possible.
We use our knowledge that the parent  <TT>inspect</TT> method yields a boxed list
of the membership.  If the argument <TT>y</TT> is not among the membership,
then we add it with the parent <TT>add</TT> method.
<PRE>
<TT>   add_Set_ =: 3 : 0</TT>
<TT>if. (< y) e. inspect 0</TT>
<TT>do.  0</TT>
<TT>else. add_Collection_ f. y   NB. see below !</TT>
<TT>end.</TT>
<TT>)</TT>
</PRE>
Not so nice, but that's the price we pay for having principles. Trying it out
on the set <TT>s1</TT>:
<PRE>
<TT>   inspect__s1 0</TT>
<TT>+-+</TT>
<TT>|a|</TT>
<TT>+-+</TT>
<TT>   add__s1     'a'</TT>
<TT>0</TT>
<TT>   add__s1     'z'</TT>
<TT>2</TT>
<TT>   inspect__s1 0</TT>
<TT>+-+-+</TT>
<TT>|z|a|</TT>
<TT>+-+-+</TT>
</PRE>
<H2>25.6  Using Inherited Methods</H2>
Let us review the definition of the <TT>add</TT> method of class <TT>Set</TT>.
<PRE>
<TT>   add_Set_</TT>
<TT>3 : 0</TT>
<TT>if. (< y) e. inspect 0</TT>
<TT>do.  0</TT>
<TT>else. add_Collection_ f. y   NB. see below !</TT>
<TT>end.</TT>
<TT>)</TT>
</PRE>
There are some questions to be answered. 
<H3>25.6.1  First Question</H3>
How are methods inherited? In other words, why is the <TT>inspect</TT> method of the
parent <TT>Collection</TT> class available as a <TT>Set</TT> method?
In short, the method is found along the path, that is,
<UL>
<LI> a <TT>Set</TT> object such as <TT>s1</TT> is a locale. 
It contains the field-variable(s) of the
object.
<LI> when a method of a class is executed, the current locale
is (temporarily) the locale of an object of that class. This follows from the 
way we invoke the method, with an expression of the form <TT>method__object argument</TT>.
<LI> the path from an object-locale goes to the class locale and thence to any
parent locale(s). Hence the method is found along the path.
</UL>. 
We see that a <TT>Set</TT> object such as <TT>s1</TT> has a path to <TT>Set</TT> and then to <TT>Collection</TT>.
<PRE>
<TT>   copath > s1</TT>
<TT>+---+----------+-+</TT>
<TT>|Set|Collection|z|</TT>
<TT>+---+----------+-+</TT>
<TT>   </TT>
</PRE>
<H3>25.6.2  Second Question</H3>
In the definition of <TT>add_Set_</TT>
<PRE>
<TT>   add_Set_</TT>
<TT>3 : 0</TT>
<TT>if. (< y) e. inspect 0</TT>
<TT>do.  0</TT>
<TT>else. add_Collection_ f. y   NB. see below !</TT>
<TT>end.</TT>
<TT>)</TT>
</PRE>
Given that the parent method <TT>inspect</TT> is referred to as simply
<TT>inspect</TT>, why is the parent method <TT>add</TT> referred to as 
<TT>add_Collection_</TT>? Because we are
defining a method to be called <TT>add</TT> and
inside it a reference to <TT>add</TT> would be a fatal circularity.
<H3>25.6.3  Third Question</H3>
why is the parent <TT>add</TT> method specified as <TT>add_Collection_ f.</TT> ?
<p>
Because <TT>add_Collection_</TT> is a locative
name, and evaluating expressions
with locative names will involve 
a change of locale.
 Recall from <A HREF="24.htm">Chapter 24</A> that
<TT>add_Collection_ 0</TT> would be evaluated
in locale <TT>Collection</TT>, which would be incorrect: we need to be in the object locale
when applying the method.
<p>
Since <TT>f.</TT> is built-in, by the time
we have finished evaluating
<TT>(add_Collection_ f.)</TT> we are back 
in the right locale with a fully-evaluated
value for the function which we can
apply without change of locale.
<PRE>
<TT>   add_Collection_ f.</TT>
<TT>3 : '# items =: (< y) , items'</TT>
<TT>   </TT>
</PRE>
<H2>25.7  Library Verbs</H2>
Here is a brief summary of selected library verbs.
<BR>
<p>
<TABLE CELLPADDING=6 BORDER=1>
<TR><TD> <TT>coclass 'foo'</TT> </TD> <TD> introduce new class <TT>foo</TT></TD>
<TR><TD> <TT>coinsert 'foo'</TT></TD> <TD> this class to be a child of <TT>foo</TT></TD>
<TR><TD> <TT>conew 'foo'</TT>   </TD> <TD> introduce a new object of class <TT>foo</TT></TD>
<TR><TD> <TT>conl 0</TT>        </TD> <TD> list locale names</TD>
<TR><TD> <TT>conl 1</TT>        </TD> <TD> list ids of object locales</TD>
<TR><TD> <TT>names_foo_ ''</TT> </TD> <TD> list the methods of class <TT>foo</TT></TD>
<TR><TD> <TT>copath <'foo'</TT> </TD> <TD> show path of class <TT>foo</TT></TD>
<TR><TD> <TT>coname ''</TT>     </TD> <TD> show name of current locale</TD>
</TABLE> 
<BR>
<p>
This brings us to the end of Chapter 25
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="26.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version 802 beta. 
 This chapter last updated 30 Jun 2014<BR> 
Copyright &copy; Roger Stokes 2014. 
 This material may be freely reproduced, 
provided that acknowledgement is made. 
</FONT> 
 <!--bottom jump start--><hr><a href="26.htm">&gt;&gt;</a>&nbsp;
<a href="24.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
