<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
    
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=UTF-8"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)"> 
  <META NAME="CREATED" CONTENT="20051014;16001218"> 
	<META NAME="CHANGED" CONTENT="20051014;16020434"> 
  <title>   Ch 27: Representations and Conversions</title> 
  <STYLE TYPE="text/css"> 
   <!-- 
    TT  {font-size: 11pt; COLOR: BLUE} 
    PRE {font-size: 11pt; COLOR: BLUE} 
   --> 
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="28.htm">&gt;&gt;</a>&nbsp;
<a href="26.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <H1>Chapter 27: Representations and Conversions</H1>
In this chapter we look at various transformations of functions and data.
<H2>27.1  Classes and Types</H2>
If we are transforming things into other things, it is useful to begin
with functions which tell us what sort of thing we are dealing with.
<A NAME="01"></A>
<H3>27.1.1  Classes</H3>
Given an assignment, <TT>name =: something</TT>,
then <TT>something</TT> is an expression denoting
a noun or a verb or an adverb or a conjunction. That is,
there are 4 classes to which <TT>something</TT> may belong.
<p>
There is a built-in verb <TT>4!:0</TT> which here we can call <TT>class</TT>.
<PRE>
   class =: 4!:0
</PRE>
We can discover the class of <TT>something</TT> by applying 
<TT>class</TT> to the argument <TT><'name'</TT>. For example,
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>n =: 6</TT></TD>
<TD><TT>class < 'n'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>6</TT></TD>
<TD><TT>0</TT></TD>
</TABLE>
<p>
The result of <TT>0</TT> for the class of <TT>n</TT> means that <TT>n</TT>
is a noun. The cases are:
<PRE>
          0  noun
</PRE>
<PRE>
          1  adverb
</PRE>
<PRE>
          2  conjunction
</PRE>
<PRE>
          3  verb
</PRE>
and two more cases: the string <TT>'n'</TT> is not a valid name,
or <TT>n</TT> is valid as a name but no value is assigned 
to <TT>n</TT>.
<PRE>
         _2  invalid
</PRE>
<PRE>
         _1  unassigned
</PRE>
For example:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>C =: &</TT></TD>
<TD><TT>class <'C'</TT></TD>
<TD><TT>class <'yup'</TT></TD>
<TD><TT>class  <'1+2'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>&</TT></TD>
<TD><TT>2</TT></TD>
<TD><TT>_1</TT></TD>
<TD><TT>_2</TT></TD>
</TABLE>
<p>
The argument of <TT>class</TT> 
identifies the object of interest by quoting its name 
to make a string, such as <TT>'C'</TT>.
<p>
Why is the argument not simply the object?  Because, by the very purpose 
of the
<TT>class</TT> function, the object may be a verb, noun, adverb or conjunction, and
an adverb or conjunction cannot be supplied as argument to any other 
function.
<p>
Why not? Suppose the object of interest is the 
conjunction <TT>C</TT>.  No matter how <TT>class</TT> is defined,
whether verb or adverb, any expression of the
form <TT>(class C)</TT> or <TT>(C class)</TT> is a bident
or a syntax error.  In no case is function <TT>class</TT> applied to argument <TT>C</TT>.
Hence the need to identify <TT>C</TT> by quoting its name.
<A NAME="02"></A>
<H3>27.1.2  Types</H3>
A noun may be an array of integers, or of floating-point
numbers or of characters, and so on. The type
of any array may be discovered by applying the built-in verb
<TT>3!:0</TT>
<PRE>
   type =: 3!:0
</PRE>
For example
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>type 0.1</TT></TD>
<TD><TT>type 'abc'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>8</TT></TD>
<TD><TT>2</TT></TD>
</TABLE>
<p>
The result of <TT>8</TT> means floating-point and the result <TT>2</TT>
means character.
Possible cases for the result are (amongst others):
<PRE>
               1  boolean
</PRE>
<PRE>
               2  character  (that is, 8-bit characters)
</PRE>
<PRE>
               4  integer
</PRE>
<PRE>
               8  floating point
</PRE>
<PRE>
              16  complex
</PRE>
<PRE>
              32  boxed
</PRE>
<PRE>
              64  extended integer
</PRE>
<PRE>
             128  rational
</PRE>
<PRE>
           65536  symbol
</PRE>
<PRE>
          131072  wide character (16-bit)
</PRE>
<A NAME="03"></A>
<H2>27.2  Execute</H2>
There is a built-in verb <TT>".</TT> (doublequote dot, called
"Execute").  Its argument is a character-string
representing a valid J expression, and the result
is the value of that expression.
<PRE>
   ". '1+2'
3
</PRE>
The string can represent an assignment, and the assignment is
executed:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>". 'w =: 1 + 2'</TT></TD>
<TD><TT>w</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
If the string represents a verb or adverb or conjunction, 
 the result is null, 
because Execute is itself a verb and therefore
its results must be nouns. However we
can successfully Execute assignments to get functions.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>". '+'</TT></TD>
<TD><TT> ". 'f =: +'</TT></TD>
<TD><TT>f</TT></TD>
<TR VALIGN=TOP>
<TD><TT>&nbsp;</TT></TD>
<TD><TT>&nbsp;</TT></TD>
<TD><TT>+</TT></TD>
</TABLE>
<p>
<A NAME="04"></A>
<H2>27.3  On-Screen Representations</H2>
When an expression is entered at the keyboard,
a value is computed and displayed on-screen.
Here we look at how values
are represented in on-screen displays. 
For example, if we define a function <TT>foo</TT>:
<PRE>
   foo =: +/ % #
</PRE>
and then view the definition of <TT>foo</TT>:
<PRE>
   foo
+-----+-+-+
|+-+-+|%|#|
||+|/|| | |
|+-+-+| | |
+-----+-+-+
</PRE>
<A NAME="05"></A>
we see on the screen some representation of <TT>foo</TT>.
What we see depends on which of several options is
 currently in effect for representing functions on-screen.  
<p>
By default
the current option is the "boxed representation",
so we see above <TT>foo</TT> depicted graphically as a structure
of boxes.
Other options are available, described below. To select and make current
an option for representing functions on-screen,
enter one of the following expressions:
<PRE>
            (9!:3) 2  NB. boxed (default)
</PRE>
<PRE>
            (9!:3) 5  NB. linear
</PRE>
<PRE>
            (9!:3) 6  NB. parenthesized
</PRE>
<PRE>
            (9!:3) 4  NB. tree
</PRE>
<PRE>
            (9!:3) 1  NB. atomic
</PRE>
The current option remains in effect until we choose 
a different option. 
<A NAME="06"></A>
<H3>27.3.1  Linear Representation</H3>
If we choose the the linear representation,
and look at <TT>foo</TT> again:
<PRE>
   (9!:3) 5  NB. linear 

   foo
+/ % #
</PRE>
we see <TT>foo</TT> in a form in which
it could be typed in at the keyboard, that is, 
as an expression.
<p>
Notice that the linear form is equivalent to the original
definition, but not necessarily textually identical: 
it tends to minimize parentheses.
<PRE>
   bar =: (+/) % #
   
   bar
+/ % #
</PRE>
Functions, that is, verbs, adverbs and conjunctions,
 are shown in the current representation.
By contrast, nouns are always shown in the boxed representation,
regardless of the current option. Even though 
linear is current, we see:
<PRE>
   noun =: 'abc';'pqr'
   
   noun
+---+---+
|abc|pqr|
+---+---+
</PRE>
<A NAME="07"></A>
<H3>27.3.2  Parenthesized</H3>
The parenthesized representation is like linear
in showing a function as an expression. Unlike linear,
the parenthesized form helpfully adds parentheses
to make the logical structure of the expression
more evident. 
<PRE>
   (9!:3) 6  NB. parenthesized

   zot =: f @: g @: h
   
   zot
(f@:g)@:h
</PRE>
<A NAME="08"></A>
<H3>27.3.3  Tree Representation</H3>
Tree representation is another way of displaying 
structure graphically:
<PRE>
   (9!:3) 4  NB. tree

   zot
              +- f
       +- @: -+- g
-- @: -+- h       
   
</PRE>
<H3>27.3.4  Atomic Representation</H3>
See below
<p>
Before continuing, we return the current representation option to linear.
<PRE>
   (9!:3) 5

</PRE>
<A NAME="09"></A>
<H2>27.4  Representation Functions</H2>
Regardless of the current option for
showing representations on-screen,
any desired representation may be generated 
as a noun by
applying a suitable built-in verb. 
<p>
If <TT>y</TT> is a name with an assigned value,
then a representation of <TT>y</TT> is a noun produced by applying one of the 
following verbs to the argument <TT><'y'</TT>
<PRE>
   br =:  5!:2    NB. boxed 
   lr =:  5!:5    NB. linear
   pr =:  5!:6    NB. parenthesized
   tr =:  5!:4    NB. tree
   ar =:  5!:1    NB. atomic
</PRE>
For example, the boxed and parenthesized 
forms of <TT>zot</TT> are shown by:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>br  < 'zot'</TT></TD>
<TD><TT>pr < 'zot'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+--------+--+-+<BR>
|+-+--+-+|@:|h|<BR>
||f|@:|g||&nbsp;&nbsp;| |<BR>
|+-+--+-+|&nbsp;&nbsp;| |<BR>
+--------+--+-+</TT></TD>
<TD><TT>(f@:g)@:h</TT></TD>
</TABLE>
<p>
We can get various representations of a noun, for example
the boxed and the linear:
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>br <'noun'</TT></TD>
<TD><TT>lr <'noun'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+---+---+<BR>
|abc|pqr|<BR>
+---+---+</TT></TD>
<TD><TT><;._1 ' abc pqr'</TT></TD>
</TABLE>
<p>
Representations produced by <TT>5!:n</TT> are themselves nouns.
The linear form of verb <TT>foo</TT> is a character-string
of length 6.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>foo</TT></TD>
<TD><TT>s =: lr <'foo'</TT></TD>
<TD><TT>$ s</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+/ % #</TT></TD>
<TD><TT>+/ % #</TT></TD>
<TD><TT>6</TT></TD>
</TABLE>
<p>
The 6 characters of <TT>s</TT> represent an expression denoting a verb. 
To capture the verb expressed by string <TT>s</TT>,
we could prefix the string with characters to make an assignment,
and Execute the assignment.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>s</TT></TD>
<TD><TT>$ s</TT></TD>
<TD><TT>a =: 'f =: ' , s</TT></TD>
<TD><TT> ". a</TT></TD>
<TD><TT>f 1 2</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+/ % #</TT></TD>
<TD><TT>6</TT></TD>
<TD><TT>f =: +/ % #</TT></TD>
<TD><TT>&nbsp;</TT></TD>
<TD><TT>1.5</TT></TD>
</TABLE>
<p>
<A NAME="10"></A>
<H3>27.4.1  Atomic Representation</H3>
We saw in <A HREF="10.htm">Chapter 10</A> and <A HREF="14.htm">Chapter 14</A>,
that it is useful to be able to form sequences of functions.
By this we mean, not trains of verbs, but gerunds. 
A gerund, regarded as a sequence of verbs, can for example be indexed to 
find a verb
applicable in a particular case of the argument.
<p>
To be indexable, a sequence must be an array, a noun. Thus we are interested
in transforming a verb into a noun representing that verb, 
and vice versa. A gerund is a list of such nouns, containing atomic 
representations.
The atomic representation is suitable for this purpose 
because it has an inverse. None of the other representation functions
have true inverses.
<p>
The atomic representation of anything is a single box
with inner structure.  
For an example, suppose that <TT>h</TT> is a verb defined
as a hook. (A hook is about the simplest example
of a verb with non-trivial structure.) 
<PRE>
   h =: + %
</PRE>
compare the boxed and the atomic 
representations of <TT>h</TT>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>br <'h'</TT></TD>
<TD><TT>ar  < 'h'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-+-+<BR>
|+|%|<BR>
+-+-+</TT></TD>
<TD><TT>+---------+<BR>
|+-+-----+|<BR>
||2|+-+-+||<BR>
|| ||+|%|||<BR>
|| |+-+-+||<BR>
|+-+-----+|<BR>
+---------+</TT></TD>
</TABLE>
<p>
The inner structure is an encoding which allows the verb to be recovered 
from the noun efficiently
without reparsing the original definition. 
It mirrors the internal form in which a definition is stored.
It is NOT meant as yet another graphic display of structure. 
<p>
The encoding is described in the Dictionary. We will not go into much 
detail here. 
Very briefly, in this example we see that <TT>h</TT> is a hook 
 (because <TT>2</TT> is an encoding of "hook") 
where the first verb is <TT>+</TT> 
and the second is <TT>%</TT>. 
<p>
The next example shows that we can generate atomic representations of a 
noun, a verb, an adverb or a conjunction.
<PRE>
   N =: 6
   V =: h
   A =: /
   C =: &
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>ar <'N'</TT></TD>
<TD><TT>ar <'V'</TT></TD>
<TD><TT>ar <'A'</TT></TD>
<TD><TT>ar <'C'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+-----+<BR>
|+-+-+|<BR>
||0|6||<BR>
|+-+-+|<BR>
+-----+</TT></TD>
<TD><TT>+-+<BR>
|h|<BR>
+-+</TT></TD>
<TD><TT>+-+<BR>
|/|<BR>
+-+</TT></TD>
<TD><TT>+-+<BR>
|&|<BR>
+-+</TT></TD>
</TABLE>
<p>
<H3>27.4.2  Inverse of Atomic Representation</H3>
The inverse of representation is sometimes called "abstraction",  
(in the sense that for example a number is an abstract mathematical object 
represented by a numeral.)  The inverse of atomic representation is <TT>5!:0</TT> 
which we can call <TT>ab</TT>.  
<PRE>
   ab =: 5!:0
</PRE>
<TT>ab</TT> is an adverb, because it must be able to generate any of noun,
verb, adverb or conjunction. 
For example, we see that the abstraction of the 
atomic representation of <TT>h</TT> is equal to <TT>h</TT>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>h</TT></TD>
<TD><TT>r =: ar < 'h'</TT></TD>
<TD><TT>r ab</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+ %</TT></TD>
<TD><TT>+---------+<BR>
|+-+-----+|<BR>
||2|+-+-+||<BR>
|| ||+|%|||<BR>
|| |+-+-+||<BR>
|+-+-----+|<BR>
+---------+</TT></TD>
<TD><TT>+ %</TT></TD>
</TABLE>
<p>
and similarly for an argument of any type. For example
for noun <TT>N</TT> or conjunction <TT>C</TT>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>N</TT></TD>
<TD><TT>rN=: ar <'N'</TT></TD>
<TD><TT>rN ab</TT></TD>
<TD><TT>C</TT></TD>
<TD><TT>(ar <'C') ab</TT></TD>
<TR VALIGN=TOP>
<TD><TT>6</TT></TD>
<TD><TT>+-----+<BR>
|+-+-+|<BR>
||0|6||<BR>
|+-+-+|<BR>
+-----+</TT></TD>
<TD><TT>6</TT></TD>
<TD><TT>&</TT></TD>
<TD><TT>&</TT></TD>
</TABLE>
<p>
<H3>27.4.3  Execute Revisited</H3>
Here is another example of the use of atomic representations.
Recall that Execute evaluates strings expressing nouns but not verbs.
Since Execute is itself a verb it cannot
deliver verbs as its result.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>". '1+2'</TT></TD>
<TD><TT>". '+'</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3</TT></TD>
<TD><TT>&nbsp;</TT></TD>
</TABLE>
<p>
To evaluate strings expressing values of any class
we can define an adverb <TT>eval</TT> say, which delivers its result
by abstracting an atomic representation of it.
<PRE>
   eval =: 1 : 0
". 'w =. ' , u
(ar < 'w') ab
)
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>'1+2' eval</TT></TD>
<TD><TT>mean =:  '+/ % #' eval</TT></TD>
<TD><TT>mean 1 2</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3</TT></TD>
<TD><TT>+/ % #</TT></TD>
<TD><TT>1.5</TT></TD>
</TABLE>
<p>
<H3>27.4.4  The Tie Conjunction Revisited</H3>
Recall from <A HREF="14.htm">Chapter 14</A> that we form gerunds
with the Tie conjunction <TT>`</TT>. Its arguments can be two
verbs. 
<PRE>
   G =: (+ %) ` h  
</PRE>
Its result is a list of atomic representations.
To demonstrate, we choose one, say the first in the list, and abstract
the verb. 
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>G</TT></TD>
<TD><TT>r =: 0 { G</TT></TD>
<TD><TT>r ab</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+---------+-+<BR>
|+-+-----+|h|<BR>
||2|+-+-+|| |<BR>
|| ||+|%||| |<BR>
|| |+-+-+|| |<BR>
|+-+-----+| |<BR>
+---------+-+</TT></TD>
<TD><TT>+---------+<BR>
|+-+-----+|<BR>
||2|+-+-+||<BR>
|| ||+|%|||<BR>
|| |+-+-+||<BR>
|+-+-----+|<BR>
+---------+</TT></TD>
<TD><TT>+ %</TT></TD>
</TABLE>
<p>
The example shows that Tie can take arguments of
expressions denoting verbs. By contrast, the atomic representation
function (<TT>ar</TT> or <TT>5!:1</TT>) 
 must take a boxed name to identify its argument.
<p>
Here is a conjunction <TT>T</TT> which, like Tie,
can take verbs (not names) as arguments and produces atomic representations.
<PRE>
   T =: 2 : '(ar <''u.'') , (ar <''v.'')'
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>(+ %) T h</TT></TD>
<TD><TT>(+ %) ` h</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+---------+-+<BR>
|+-+-----+|h|<BR>
||2|+-+-+|| |<BR>
|| ||+|%||| |<BR>
|| |+-+-+|| |<BR>
|+-+-----+| |<BR>
+---------+-+</TT></TD>
<TD><TT>+---------+-+<BR>
|+-+-----+|h|<BR>
||2|+-+-+|| |<BR>
|| ||+|%||| |<BR>
|| |+-+-+|| |<BR>
|+-+-----+| |<BR>
+---------+-+</TT></TD>
</TABLE>
<p>
<A NAME="11"></A>
<A NAME="12"></A>
<H2>27.5  Conversions of Data</H2>
Consider a graphics file holding an image
in the "bitmap" format. Published descriptions
of the bitmap format are something like this:
<PRE>
         Offset  Size  ...   Description
</PRE>
<PRE>
       
</PRE>
<PRE>
          0       2          The characters BM for bitmap
</PRE>
<PRE>
          2       4          The total size of the file
</PRE>
<PRE>
                                   :
</PRE>
<PRE>
                                   :
</PRE>
<PRE>
         28       2          Color bits per pixel 1 4 8 or 24
</PRE>
We see here the layout of the first few bytes 
in the file, described as characters,
16-bit numbers or 32-bit numbers.  such descriptions are ultimately
descriptions, in terms independent of
any particular programming language, of how strings of bits 
are to be interpreted. Data described in this way
is called "binary" data. 
<p>
Now we look at functions for converting between
values in J arrays and binary forms of such values,
with a view to handling files with binary data.
Data files will be covered in <A HREF="28.htm">Chapter 28</A> .
<p>
(In the following it is asserted that
a character occupies one byte 
and a floating point number occupies 8. 
That is, we assume J version 4.05 or similar, 
running on a PC.)
<p>
A J array, of floating-point numbers for example,
is stored
in the memory of the computer. 
Storage is required
to hold information about the type, rank and shape of
the array, together with storage for each number
in the array. Each floating-point
number in the array needs 8 bytes of storage. 
<p>
There are built-in functions to convert 
a floating-point number to a character-string
of length 8, and vice versa.  
<p>
<PRE>
   cf8 =:   2 & (3!:5)   NB. float to 8 chars
   c8f =:  _2 & (3!:5)   NB. 8 chars to float 
</PRE>
In the following example, we see that 
the number <TT>n</TT> is floating-point, 
<TT>n</TT> is converted to give the string <TT>s</TT> which
is of length 8, and <TT>s</TT> is converted back
to give a floating-point number equal to <TT>n</TT>.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>n =: 0.1</TT></TD>
<TD><TT>$  s =: cf8 n</TT></TD>
<TD><TT>c8f s</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0.1</TT></TD>
<TD><TT>8</TT></TD>
<TD><TT>0.1</TT></TD>
</TABLE>
<p>
Characters in the result <TT>s</TT> are mostly non-printable.
We can inspect the characters by locating them
in the ASCII character-set:
<PRE>
   a. i. s 
154 153 153 153 153 153 185 63
</PRE>
Now consider converting arrays of numbers. A list
of numbers is converted to a single string, and vice versa::
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>a =: 0.1 0.1</TT></TD>
<TD><TT>$ s =: cf8 a</TT></TD>
<TD><TT>c8f s</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0.1 0.1</TT></TD>
<TD><TT>16</TT></TD>
<TD><TT>0.1 0.1</TT></TD>
</TABLE>
<p>
The monadic rank of <TT>cf8</TT> is infinite: <TT>cf8</TT> applies 
just once to its whole argument. 
<PRE>
   RANKS =: 1 : 'u b. 0'
   cf8 RANKS
_ _ _
   
</PRE>
but the argument
must be a scalar or list, or else an error results.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>b =: 2 2 $ a</TT></TD>
<TD><TT>$ w =: cf8 b</TT></TD>
<TD><TT>$ w =: cf8"1 b</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0.1 0.1<BR>
0.1 0.1</TT></TD>
<TD><TT>error</TT></TD>
<TD><TT>2 16</TT></TD>
</TABLE>
<p>
A floating-point number is convertible to 8 characters.
There is an option to convert a float to and from
a shorter 4-character string, sacrificing precision
for economy of storage. 
<PRE>
   cf4 =:  1 & (3!:5)   NB. float to 4 chars
   c4f =: _1 & (3!:5)   NB. 4 chars to float
   
</PRE>
As we might expect,
 converting a float
to 4 characters and back again can introduce a small
error.
<PRE>
   p =: 3.14159265358979323
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>p </TT></TD>
<TD><TT>$ z =: cf4 p</TT></TD>
<TD><TT>q =: c4f z</TT></TD>
<TD><TT>p - q</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3.14159</TT></TD>
<TD><TT>4</TT></TD>
<TD><TT>3.14159</TT></TD>
<TD><TT>_8.74228e_8</TT></TD>
</TABLE>
<p>
A J integer needs 4 bytes of storage.
There are functions to convert between
J integers and 4-character strings.
<PRE>
   ci4 =:  2 & (3!:4)  NB. integer to 4 char
   c4i =: _2 & (3!:4)  NB. 4 char  to integer
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>i =: 1 _100</TT></TD>
<TD><TT>$ s =: ci4 i</TT></TD>
<TD><TT>c4i s</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 _100</TT></TD>
<TD><TT>8</TT></TD>
<TD><TT>1 _100</TT></TD>
</TABLE>
<p>
We see that the length of <TT>s</TT> is 8 because
<TT>s</TT> represents two integers.
<p>
Suppose <TT>k</TT> is an integer and <TT>c</TT> is the conversion
of <TT>k</TT> to 4 characters. 
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>k =: 256+65</TT></TD>
<TD><TT>$ c =: ci4 k</TT></TD>
<TR VALIGN=TOP>
<TD><TT>321</TT></TD>
<TD><TT>4</TT></TD>
</TABLE>
<p>
Since characters in <TT>c</TT> are mostly non-printable,
we inspect them by viewing their locations in the ASCII alphabet.
We see that the characters are
the base-256 digits in the value of <TT>k</TT>,
stored in <TT>c</TT> in the order least-significant first (on a PC)..  
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>k</TT></TD>
<TD><TT>a. i. c </TT></TD>
<TD><TT>256 256 256 256 #: k</TT></TD>
<TR VALIGN=TOP>
<TD><TT>321</TT></TD>
<TD><TT>65 1 0 0</TT></TD>
<TD><TT>0 0 1 65</TT></TD>
</TABLE>
<p>
Integers in the range <TT>_32768</TT> to <TT>32767</TT>
can be converted to 2-character strings and vice
versa.
<PRE>
   ci2 =:  1 & (3!:4)  NB. integer to 2 char
   c2i =: _1 & (3!:4)  NB. 2 char  to int
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>i</TT></TD>
<TD><TT>$ s =: ci2 i</TT></TD>
<TD><TT>c2i s</TT></TD>
<TR VALIGN=TOP>
<TD><TT>1 _100</TT></TD>
<TD><TT>4</TT></TD>
<TD><TT>1 _100</TT></TD>
</TABLE>
<p>
Integers in the range <TT>0</TT> to <TT>65535</TT> 
can be converted to 2-character strings
and vice versa. 
Such strings are described as "16bit unsigned".
<PRE>
   ui2 =: ci2         NB. integer to 2-char,  unsigned  
   u2i =: 0 & (3!:4)  NB. 2 char  to integer, unsigned
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>m =: 65535</TT></TD>
<TD><TT>$ s =: ui2 m</TT></TD>
<TD><TT>u2i s</TT></TD>
<TR VALIGN=TOP>
<TD><TT>65535</TT></TD>
<TD><TT>2</TT></TD>
<TD><TT>65535</TT></TD>
</TABLE>
<p>
This is the end of Chapter 27
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="28.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version  j701/beta/2010-11-24/22:45. 
 This chapter last updated 08 Jan 2011<BR> 
Copyright &copy; Roger Stokes 2010. 
 This material may be freely reproduced, 
provided that this copyright notice is also reproduced. 
</FONT> 
 <!--bottom jump start--><hr><a href="28.htm">&gt;&gt;</a>&nbsp;
<a href="26.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
