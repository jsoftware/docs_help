<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
    
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=ISO-8859-1"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)"> 
  <META NAME="CREATED" CONTENT="20051014;16001218"> 
	<META NAME="CHANGED" CONTENT="20051014;16020434"> 
  <title>   Ch 29: Error Handling</title> 
  <STYLE TYPE="text/css"> 
   <!-- 
    TT  {font-size: 11pt; COLOR: BLUE} 
    PRE {font-size: 11pt; COLOR: BLUE} 
   --> 
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="91.htm">&gt;&gt;</a>&nbsp;
<a href="28.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <H1>Chapter 29: Error Handling</H1>
The plan for this chapter is to look at some of the J facilities for finding and 
dealing with programming errors. It is beyond the scope of this chapter
to consider debugging strategies, but (in my view) the use of assertions
is much to be recommended. We look at:
<UL>
<LI> Assertions</LI>
<LI> Continuing after failure </LI>
<LI> Suspended execution </LI>
<LI> Programmed error-handling </LI>
</UL>
<A NAME="01"></A>
<H2>29.1  Assertions</H2>
A program can be made self-checking 
to some degree.  
Here is an example of a verb which computes the price of an area of carpet,
given a list of three numbers: price per unit area, length and width.
<PRE>
   carpet =: 3 : 0
*/ y
)
   
   carpet 2 3 4
24
</PRE>
Assume for the sake of example that the computation <TT>*/y</TT> is large and problematic,
and we want some assurance that the result is correct. We can at least check 
that the result is reasonable; we expect the price of a carpet
to lie between, say, $10 and $10,000. 
<p>
We can redefine <TT>carpet</TT>, asserting that the result <TT>p</TT> must be 
between 10 and 10000:
<PRE>
   carpet =: 3 : 0
p =. */y
assert. p >: 10
assert. p <: 10000
p
)
</PRE>
If an assertion is evaluated as true (or "all true")
there is no other effect, and the computation proceeds. 
<PRE>
   carpet 2 3 4
24
</PRE>
If an assertion is evaluated as false, the computation is terminated 
and an indication given:
<PRE>
   carpet 0 3 4
|assertion failure: carpet
|   p>:10
</PRE>
Assertions can only be made inside
explicit definitions, because <TT>assert.</TT> is a "control word", that is, 
an element of syntax, not a function. 
<p>
It always a matter for judgement as to where an assertion can usefully be placed, 
and what can usefully be asserted. 
Assertions are best kept as simple as possible, since 
it is highly undesirable to make an error in an assertion itself.  
<p>
It is often useful to make assertions which check the correctness
of arguments of functions.
For example, we could assert that, for <TT>carpet</TT> the argument <TT>y</TT>
must be a list of 3 strictly positive numbers. 
<p>
The order of assertions may be important. For example,
 we should check that we have numbers
before checking the values of those numbers. The type of a noun is given by <TT>3!:0</TT>; 
here we want integers (type=4) or reals (type=8).
<PRE>
   carpet =: 3 : 0

assert. (3!:0 y) e. 4 8   NB. numeric 
assert. 1 = # $ y         NB. a list (rank = 1)
assert. 3 = # y           NB. of 3  items
assert. *. / y > 0        NB. all positive

p =. */y

assert. p >: 10
assert. p <: 10000

p
)
   
   carpet 2 3 4
24
   
   carpet 'hello'
|assertion failure: carpet
|   (3!:0 y)e.4 8
   
</PRE>
<H3>29.1.1  Enabling and Disabling Assertions</H3>
When we are confident of correctness, we can consider removing assertions
from a program, particularly if performance is an issue. Another possibility
is to leave the assertions in place, but to disable them. In this case, asserted 
expressions are not evaluated, and assertions always succeed. 
There is a built-in function
<TT>9!:35</TT> to enable or disable assertions.
For example:
<PRE>
   (9!:35) 0      NB. disable assertions
   carpet 0 3 4   NB. an error
0
   
   (9!:35) 1      NB. enable assertions
   carpet 0 3 4   NB. an error
|assertion failure: carpet
|   *./y>0
    
</PRE>
The built-in function <TT>9!:34</TT> tests whether assertions are enabled. 
Currently they are:
<PRE>
   9!:34 ''   NB. check that assertions are enabled
1
</PRE>
<H2>29.2  Continuing after Failure</H2>
There are several ways to continue after a failure. 
<A NAME="02"></A>
<H3>29.2.1  Nonstop Script</H3>
In testing a program, it may be useful to write a script for a series 
of tests.  Here is an example of a test-script.
<PRE>
   (0 : 0) (1!:2) <'test.ijs'   NB. create test-script

NB. test 1 
carpet 10  0 30       

NB. test 2
carpet 10 20 30       
)
</PRE>
A test may give the wrong result, or it may fail altogether,
that is, it may be terminated by the system.  We can 
 force the script to continue even though a test fails, by executing the script
with the built-in verb <TT>0!:10</TT> or <TT>0!:11</TT>
<PRE>
   0!:11 <'test.ijs'            NB. execute test-script 
   
   NB. test 1 
   carpet 10  0 30       
|assertion failure: carpet
|   *./y>0
   
   NB. test 2
   carpet 10 20 30       
6000
   
</PRE>
<A NAME="03"></A>
<H3>29.2.2  Try and Catch Control Structure</H3>
Here is an example of a verb which translates English words to French 
using word-lists.
<PRE>
   English =: 'one'; 'two';  'three'
   French  =: 'un';  'deux'; 'trois'
   
   ef =:  3 : '> (English i. < y) { French'
</PRE>
A word not in the list will produce an error.
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>ef 'two' </TT></TD>
<TD><TT>ef 'seven' </TT></TD>
<TR VALIGN=TOP>
<TD><TT>deux</TT></TD>
<TD><TT>error</TT></TD>
</TABLE>
<p>
This error can be handled with the <TT>try. catch. end.</TT> control structure. (<A HREF="12.htm">Chapter 12</A> 
introduces control structures)
<PRE>
   EF =: 3 : 'try. ef y catch. ''don''''t know'' end.'
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>EF 'two' </TT></TD>
<TD><TT>EF 'seven' </TT></TD>
<TR VALIGN=TOP>
<TD><TT>deux</TT></TD>
<TD><TT>don't know</TT></TD>
</TABLE>
<p>
The scheme is that
<PRE>
             try. B1 catch. B2 end.
</PRE>
means: execute block B1. If and only if B1 fails, execute block B2.
<A NAME="04"></A>
<H3>29.2.3  Adverse Conjunction</H3>
A tacit version of the last example can be written with the "Adverse" conjunction 
 <TT>::</TT> (colon colon).
<PRE>
   TEF =: ef :: ('don''t know' " _)
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1>
<TR  VALIGN=TOP>
<TD><TT>TEF 'two'</TT></TD>
<TD><TT> TEF 'seven' </TT></TD>
<TR VALIGN=TOP>
<TD><TT>deux</TT></TD>
<TD><TT>don't know</TT></TD>
</TABLE>
<p>
Notice that the left and right arguments of <TT>::</TT> are both verbs.
The scheme is:
<PRE>
           (f :: g) y 
</PRE>
means: evaluate <TT>f y</TT>.  If and only if <TT>f y</TT> fails, evaluate <TT>g y</TT>
<A NAME="05"></A>
<H2>29.3  Suspended Execution</H2>
Suppose we have, as an example of program to be
 debugged, a verb <TT>main</TT> which uses a supporting verb <TT>plus</TT> 
<PRE>
   main  =: 3 : 0
k =. 'hello'
z =. y plus k 
'result is'; z
)
   
   plus =: +
</PRE>
Clearly there is an error in <TT>main</TT>: the string <TT>k</TT> is inconsistent with the numeric argument
expected by <TT>plus</TT>. 
<p>
If we  type, for example,  <TT>main 1</TT> at the keyboard,
then when the error is detected the program terminates,  an error-report is 
displayed and the user is prompted for input from the keyboard.
<PRE>
   main 1
|domain error: plus
|   z=.y     plus k
</PRE>
To gather more information about the cause of the error, we can arrange that the 
program can be suspended rather than terminated when control returns to the keyboard. 
To enable suspension we use the command <TT>(13!:0) 1</TT> before running <TT>main</TT> again.
<PRE>
   (13!:0) 1
</PRE>
Now when <TT>main</TT> is re-run, we see 
a slightly different error message
<PRE>
   main 1
|domain error: plus
|plus[:0]

</PRE>
At this point execution is 
suspended. In the suspended state,
expressions can be typed in and evaluated.
Notice that the prompt is
6 spaces (rather than the usual 3)
to identify the suspended state.
<PRE>
      1+1
2

</PRE>
We can view the current state of the computation,
by entering at the keyboard this expression,
to show (selected columns of)
what is called the "execution stack".
<PRE>
      0 2 6 7 8 { " 1 (13!:13 '')
+----+-+---------+----------+-+
|plus|0|+-+-----+|          |*|
|    | ||1|hello||          | |
|    | |+-+-----+|          | |
+----+-+---------+----------+-+
|main|1|+-+      |+--+-----+| |
|    | ||1|      ||k |hello|| |
|    | |+-+      |+--+-----+| |
|    | |         ||y |1    || |
|    | |         |+--+-----+| |
+----+-+---------+----------+-+

</PRE>
The stack is a table, with a row for
each function currently executing.
We see that <TT>plus</TT> is the function
in which the error was detected, and <TT>plus</TT>
is called from <TT>main</TT>. 
<p>
The stack has 9 columns, of which
we selected only 5 for display (columns 0 2 6 7 8).
The columns are:
<p>
<TABLE  BORDER=1 CELLPADDING=6>
<TR><TD> 0 </TD><TD>
 Name of suspended function. Only
   named functions appear on the stack. </TD></TR>
<TR><TD>1</TD><TD>
(not shown above) error-number or 0 if not in error </TD></TR>
<TR><TD>2</TD><TD>
Line-number.  <TT>plus</TT> is suspended at line 0 and
   <TT>main</TT> is at line 1 </TD></TR>
<TR><TD>3</TD><TD>
 (not shown above) Name-class: 1 2 or 3 denoting
   adverb, conjunction or verb </TD></TR>
<TR><TD>4</TD><TD>
 (not shown above) Linear representation of suspended function </TD></TR>
<TR><TD>5</TD><TD>
(not shown above) name of script from which definitions were
   loaded </TD></TR>
<TR><TD>6</TD><TD>
Values of arguments.  <TT>plus</TT> was
   called with arguments <TT>1</TT> and <TT>'hello'</TT>  </TD></TR>
<TR><TD>7</TD><TD>
 Names and values of local variables. <TT>plus</TT> being a
   tacit verb has no local variables, while
   <TT>main</TT> has <TT>k</TT> and also <TT>y</TT>, since
   arguments of explicit functions are regarded as local variables. 
</TD></TR>
<TR><TD>8</TD><TD>
 An asterisk, or a blank. <TT>plus</TT> is asterisked to show
   it is the function
   in which suspension was caused.
   Normally this the top function on 
   the stack, (but not necessarily, 
   as we will see below). </TD></TR>
</TABLE>
<p>
<p>
While in the suspended state we can
inspect any global variables, by entering
the names in the usual way. In this simple example 
there are none. 
<p>
Finally, we can terminate the suspended 
execution, and escape from the 
suspended state,
by entering the expression:
<PRE>
   (13!:0) 1
</PRE>
<A NAME="06"></A>
<H2>29.4  Programmed Error Handling</H2>
By default, when suspension is enabled,
and an error is encountered,
the program suspends and awaits 
input from the keyboard.
<p>
We can arrange that instead of 
taking input from the keyboard,
when an error is encountered,
our own error-handling routine is automatically
entered.
<p>
Suppose we decide to handle errors by doing 
the following:
<p>
<UL>
<LI> display the error message generated by 
     the system </LI>
<LI> display (selected columns of) the stack </LI>
<LI> cut short the execution of the
     the suspended function, and cause it to
     return the value <TT>'error'</TT> instead of
     whatever it was intended to return. </LI>
<LI> resume executing the program. 
     (This may or may not  
     result in a cascade of further errors.)</LI>
</UL>
<p>
Here is a verb to perform this sequence of actions:
<PRE>
   handler =: 3 : 0
(1!:2&2) 13!:12 ''                  NB. display error message
(1!:2&2) 0 2 6 7 8 {" 1 (13!:13 '') NB. display stack 
13!:6 'error'                       NB. resume returning 'error'
)
</PRE>
The next step is to declare this verb 
as the error-handler.  To do this we set
an appropriate value for what is called
the "latent expression". The latent
expression is represented by a string which, if non-null, 
is executed automatically whenever 
the system is about to enter the suspended state.
The latent expression can be queried and set
with <TT>13!:14</TT> and <TT>13!:15</TT>.
What is the current value of the latent expression?
<PRE>
   13!:14 ''

</PRE>
A null string. We set the latent expression to 
be a string, representing an expression meaning
"execute the verb <TT>handler</TT>". 
<PRE>
   13!:15 'handler 0'
</PRE>
Now we make sure suspension is enabled:
<PRE>
   (13!:0) 1 NB. enable suspension
</PRE>
and try a debugging run on <TT>main</TT>
<PRE>
   main 1 
|domain error: plus
|plus[:0]

+-------+-+---------+---------+-+
|handler|1|+-+      |+-+-+    | |
|       | ||0|      ||y|0|    | |
|       | |+-+      |+-+-+    | |
+-------+-+---------+---------+-+
|plus   |0|+-+-----+|         |*|
|       | ||1|hello||         | |
|       | |+-+-----+|         | |
+-------+-+---------+---------+-+
|main   |1|+-+      |+-+-----+| |
|       | ||1|      ||k|hello|| |
|       | |+-+      |+-+-----+| |
|       | |         ||y|1    || |
|       | |         |+-+-----+| |
+-------+-+---------+---------+-+
+---------+-----+
|result is|error|
+---------+-----+
</PRE>
We see that the topmost stack-frame is for <TT>handler</TT>,
because we are in <TT>handler</TT> when the request to view the stack is issued.
The suspended function is <TT>plus</TT>.
<p>
The display <TT>result is error</TT> demonstrates that <TT>plus</TT>
returned the value (<TT>'error'</TT>) supplied by <TT>handler</TT>.
<p>
This is the end of Chapter 29.
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="30.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version  j701/beta/2010-11-24/22:45. 
 This chapter last updated 22 Dec 2010<BR> 
Copyright &copy; Roger Stokes 2010. 
 This material may be freely reproduced, 
provided that this copyright notice is also reproduced. 
</FONT> 
 <!--bottom jump start--><hr><a href="91.htm">&gt;&gt;</a>&nbsp;
<a href="28.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
