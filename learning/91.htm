<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
       
<HTML> 
<HEAD> 
  <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=UTF-8"> 
  <META NAME="GENERATOR" CONTENT="OpenOffice.org 1.9.118  (Win32)">   
  <TITLE>   Ap 1: Evaluating Expressions</TITLE> 
  <STYLE TYPE="text/css"> 
    TT  {font-size: 12pt; COLOR: BLUE} 
    PRE {font-size: 12pt; COLOR: BLUE} 
                                    
    table.jtable {                  
         border-width: thin;        
         border-spacing: 2px;       
         border-style: solid;       
         border-color: gray;        
         border-collapse: collapse; 
         background-color: white;   
     }                              
     table.jtable td {              
         border-width: 1px;         
         padding: 10px;             
         border-style: solid;       
         border-color: gray;        
         background-color: white;   
     }                              
  </STYLE>
</HEAD>
          
<BODY BGCOLOR=WHITE><!--top jump start--><a href="92.htm">&gt;&gt;</a>&nbsp;
<a href="32.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<hr><!--top jump end--> 
  <table border="0" cellpadding="5" cellspacing="0"  width="100%"> 
  <tr> <td valign="top" width="17%"> <p> </td> 
   <td valign="top" width="83%"> 
 <H1>Appendix 1: Evaluating Expressions</H1>
<H2>A1.1  Introduction</H2>
<font size = -1>
<p>
Here we look at the process of evaluating a J 
expression.
Evaluating a complete expression proceeds by a sequence 
of basic steps, 
such as obtaining the value assigned to a name,
or applying a function to its argument(s). For example, 
given 
<PRE>
<TT>   x =: 3</TT>
</PRE>
then the expression
<PRE>
<TT>   4+5*x</TT>
<TT>19</TT>
</PRE>
is (in outline) evaluated by the steps:
<OL>
<LI> obtain the value assigned to <TT>x</TT> giving <TT>3</TT>
<LI> compute <TT>5 * 3</TT> giving <TT>15</TT>
<LI> compute <TT>4 + 15</TT> giving <TT>19</TT>
</OL>
<p>
The sequence in which the steps take place is governed by 
the
grammatical (or "parsing") rules of the J language.  
The parsing rules have various consequences, or effects,
which can be stated informally, for example: 
<UL>
<LI> verbs have long right scope. For example, in the expression <TT>2 * 3 + 4</TT>
the right argument of <TT>*</TT> is <TT>3 + 4</TT> so that <TT>2 * 3 + 4</TT> means <TT> 2* (3 + 4)</TT>. 
This we earlier called the "rightmost-first" rule.
<LI> verbs have short left scope. For example in <TT>2 * 3 + 4</TT> the left argument
of <TT>+</TT> is <TT>3</TT>.
<LI> adverbs and conjunctions get applied before verbs. For example <TT>+ &amp; 1 % 2</TT>
means <TT>(+ &amp; 1 )% 2</TT>
<LI> adverbs and conjunctions have long left scope and 
short right scope
</UL>
These effects describe how an expression is implicitly parenthesized.
Of course, we can always produce desired effects by writing explicit parentheses,
even though they may not be needed.   Further effects are:
<UL> 
<LI> names denoting nouns are evaluated as soon as 
encountered
<LI> names denoting functions are not evaluated until the 
function is applied
<LI> names with no assigned values are assumed to denote 
verbs
<LI> long trains of verbs are resolved into trains of 
length 2 or 3
</UL>
and we will look at how the parsing rules give rise to 
these effects. 
To illustrate the process, we can use a function which 
models, 
or simulates, the evaluation process step by step, 
showing it at work in slow motion.  
This function, an adverb called <TT>EVM</TT>,is based on the 
description of the parsing
algorithm given in the J Dictionary, section IIE. It is 
defined in a  
<A HREF="91a.ijs">downloadable J script</A>.
<H2>A1.2  First Example</H2>
Evaluation of an expression such as <TT>2+3</TT> can be modelled 
by offering the 
argument <TT>'2+3'</TT> (a string, notice) to the modelling 
adverb <TT>EVM</TT>.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>2+3</TT></TD>
<TD><TT>'2+3' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>5</TT></TD>
<TD><TT>5</TT></TD>
</TABLE>
<p>
We see that <TT>'2+3' EVM</TT> computes the same value as <TT>2+3</TT>,
 but <TT>EVM</TT> also produces a step-by-step record, or history,
of the evaluation process. 
This history is displayed by entering the expression 
<TT>hist ''</TT>
<PRE>
<TT>   hist ''</TT>
<TT>                                              </TT>
<TT> Queue          Stack                  Rule   </TT>
<TT>                                              </TT>
<TT> +----------+   +------+---+---+---+   +----+ </TT>
<TT> |mark 2 + 3|   |      |   |   |   |   |    | </TT>
<TT> +----------+   +------+---+---+---+   +----+ </TT>
<TT> |mark 2 +  |   | 3    |   |   |   |   |    | </TT>
<TT> +----------+   +------+---+---+---+   +----+ </TT>
<TT> |mark 2    |   | +    | 3 |   |   |   |    | </TT>
<TT> +----------+   +------+---+---+---+   +----+ </TT>
<TT> |mark      |   | 2    | + | 3 |   |   |    | </TT>
<TT> +----------+   +------+---+---+---+   +----+ </TT>
<TT> |          |   | mark | 2 | + | 3 |   |dyad| </TT>
<TT> +----------+   +------+---+---+---+   +----+ </TT>
<TT> |          |   | mark | 5 |   |   |   |    | </TT>
<TT> +----------+   +------+---+---+---+   +----+ </TT>
<TT>                                              </TT>
</PRE>
We see successive stages of the process. In this example there are
six stages.  
Each stage is defined by the values of two
variables. 
Firstly there is a "queue", initially containing the 
expression being evaluated, 
divided into words and preceded by a symbol to mark the 
beginning. 
Secondly, there is a "stack",
initially empty.  The first stage  shows queue and stack at the 
outset.
<p>
At each stage the stack is inspected to see if anything 
can be done, that is, whether
the first few words in the stack form a pattern to which 
a rule applies.  There are 9 of these rules,
and each one is tried in turn. 
If no rule applies, then a word is transferred from the 
tail of the queue to the head of the stack,
and we go to the next stage and try again. This process 
takes us from the first stage to the fifth stage. 
<p>
At the fifth stage, we find that a rule is applicable. This rule 
is identified as <TT>dyad</TT> in the rightmost column. Informally, the <TT>dyad</TT>
rule is:  
<p>
if the first four items in the stack
are something, noun, verb, noun, 
then apply verb to noun and noun to get new-noun, 
and replace the first four items in the stack by two, 
namely original-something followed by new-noun.  
<p>
The sixth and last stage shows the results of applying the "dyad" rule   
recognized at the previous stage. 
The rules are tried again, with no result, and there are 
no more words in the queue, 
so we have finished.  The final result is the second item 
of the stack.
The history is maintained in 3 global variables, <TT>Qh</TT> 
<TT>Sh</TT> and <TT>Rh</TT>.  
The expression <TT>hist ''</TT> computes a formatted display from these variables.
<H2>A1.3  Parsing Rules</H2>
In this section an example is shown of 
 each of 
the 9  parsing rules.
Each rule looks for a pattern of items at the front of the
  stack, 
such as something verb noun verb.
<p>
Each item of the stack is classified as one of the 
following: 
verb, noun, adverb, conjunction, name, 
left-parenthesis, right-parenthesis, assignment-symbol 
(<TT>=.</TT> or <TT>=:</TT>) or
beginning-mark.
<p>
To aid in a compact statement of the 
rules, larger classes of items
can be formed. 
For example, an item is classified as an "EDGE" if it is 
a beginning-mark, an assignment-symbol or
a left-parenthesis. 
<p>
The rules are always tried in the same order,
the order in which they are presented below,
beginning with the 'monad rule' and ending with the
'parenthesis rule'.
<p>
<H3>A1.3.1  Monad Rule</H3>
If the first 3 items of the stack are an "EDGE"
followed by a verb followed by a noun, then the verb is
applied (monadically) to the noun to give a result-value
symbolized by <TT>Z</TT> say, and the value <TT>Z</TT> replaces the verb
  and noun in the stack.
The scheme for transforming the items of the stack is: 
<PRE>
<TT>          monad rule: EDGE VERB NOUN etc  =>   EDGE Z etc</TT>
</PRE>
where <TT>Z</TT> is the result computed by applying <TT>VERB</TT> to 
<TT>NOUN</TT>.  For example:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>*: 4</TT></TD>
<TD><TT>'*: 4' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>16</TT></TD>
<TD><TT>16</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                           </TT>
<TT> Queue         Stack               Rule    </TT>
<TT>                                           </TT>
<TT> +---------+   +------+----+---+   +-----+ </TT>
<TT> |mark *: 4|   |      |    |   |   |     | </TT>
<TT> +---------+   +------+----+---+   +-----+ </TT>
<TT> |mark *:  |   | 4    |    |   |   |     | </TT>
<TT> +---------+   +------+----+---+   +-----+ </TT>
<TT> |mark     |   | *:   | 4  |   |   |     | </TT>
<TT> +---------+   +------+----+---+   +-----+ </TT>
<TT> |         |   | mark | *: | 4 |   |monad| </TT>
<TT> +---------+   +------+----+---+   +-----+ </TT>
<TT> |         |   | mark | 16 |   |   |     | </TT>
<TT> +---------+   +------+----+---+   +-----+ </TT>
<TT>                                           </TT>
</PRE>
<H3>A1.3.2  Second Monad Rule</H3>
An item in the stack is classified as "EAVN" if it
is an EDGE or an adverb or verb or noun. The scheme is:
<PRE>
<TT>        monad2 rule: EAVN VERB1 VERB2 NOUN etc => EAVN VERB1 Z  etc</TT>
</PRE>
where <TT>Z</TT> is <TT>VERB2</TT> monadically applied to NOUN.  For 
example: 
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> - *: 4</TT></TD>
<TD><TT>'- *: 4' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>_16</TT></TD>
<TD><TT>_16</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                    </TT>
<TT> Queue           Stack                     Rule     </TT>
<TT>                                                    </TT>
<TT> +-----------+   +------+-----+----+---+   +------+ </TT>
<TT> |mark - *: 4|   |      |     |    |   |   |      | </TT>
<TT> +-----------+   +------+-----+----+---+   +------+ </TT>
<TT> |mark - *:  |   | 4    |     |    |   |   |      | </TT>
<TT> +-----------+   +------+-----+----+---+   +------+ </TT>
<TT> |mark -     |   | *:   | 4   |    |   |   |      | </TT>
<TT> +-----------+   +------+-----+----+---+   +------+ </TT>
<TT> |mark       |   | -    | *:  | 4  |   |   |      | </TT>
<TT> +-----------+   +------+-----+----+---+   +------+ </TT>
<TT> |           |   | mark | -   | *: | 4 |   |monad2| </TT>
<TT> +-----------+   +------+-----+----+---+   +------+ </TT>
<TT> |           |   | mark | -   | 16 |   |   |monad | </TT>
<TT> +-----------+   +------+-----+----+---+   +------+ </TT>
<TT> |           |   | mark | _16 |    |   |   |      | </TT>
<TT> +-----------+   +------+-----+----+---+   +------+ </TT>
<TT>                                                    </TT>
</PRE>
<H3>A1.3.3  Dyad Rule</H3>
The scheme is 
<PRE>
<TT>          dyad rule:  EAVN NOUN1 VERB NOUN2 etc => EAVN Z etc</TT>
</PRE>
where <TT>Z</TT> is <TT>VERB</TT> applied dyadically to <TT>NOUN1</TT> and 
<TT>NOUN2</TT>.
For example.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> 3 * 4</TT></TD>
<TD><TT>'3 * 4' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>12</TT></TD>
<TD><TT>12</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                               </TT>
<TT> Queue          Stack                   Rule   </TT>
<TT>                                               </TT>
<TT> +----------+   +------+----+---+---+   +----+ </TT>
<TT> |mark 3 * 4|   |      |    |   |   |   |    | </TT>
<TT> +----------+   +------+----+---+---+   +----+ </TT>
<TT> |mark 3 *  |   | 4    |    |   |   |   |    | </TT>
<TT> +----------+   +------+----+---+---+   +----+ </TT>
<TT> |mark 3    |   | *    | 4  |   |   |   |    | </TT>
<TT> +----------+   +------+----+---+---+   +----+ </TT>
<TT> |mark      |   | 3    | *  | 4 |   |   |    | </TT>
<TT> +----------+   +------+----+---+---+   +----+ </TT>
<TT> |          |   | mark | 3  | * | 4 |   |dyad| </TT>
<TT> +----------+   +------+----+---+---+   +----+ </TT>
<TT> |          |   | mark | 12 |   |   |   |    | </TT>
<TT> +----------+   +------+----+---+---+   +----+ </TT>
<TT>                                               </TT>
</PRE>
<H3>A1.3.4  Adverb Rule</H3>
An item which is a verb or a noun is classified as a "VN"
The scheme is:
<PRE>
<TT>          adverb rule: EAVN VN ADVERB etc => EAVN Z etc</TT>
</PRE>
where <TT>Z</TT> is the result of applying <TT>ADVERB</TT> to <TT>VN</TT>.
For example:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>+ / 1 2 3</TT></TD>
<TD><TT>'+ / 1 2 3' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>6</TT></TD>
<TD><TT>6</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                                </TT>
<TT> Queue              Stack                               Rule    </TT>
<TT>                                                                </TT>
<TT> +--------------+   +-------+-------+-------+-------+   +-----+ </TT>
<TT> |mark + / 1 2 3|   |       |       |       |       |   |     | </TT>
<TT> +--------------+   +-------+-------+-------+-------+   +-----+ </TT>
<TT> |mark + /      |   | 1 2 3 |       |       |       |   |     | </TT>
<TT> +--------------+   +-------+-------+-------+-------+   +-----+ </TT>
<TT> |mark +        |   | /     | 1 2 3 |       |       |   |     | </TT>
<TT> +--------------+   +-------+-------+-------+-------+   +-----+ </TT>
<TT> |mark          |   | +     | /     | 1 2 3 |       |   |     | </TT>
<TT> +--------------+   +-------+-------+-------+-------+   +-----+ </TT>
<TT> |              |   | mark  | +     | /     | 1 2 3 |   |adv  | </TT>
<TT> +--------------+   +-------+-------+-------+-------+   +-----+ </TT>
<TT> |              |   | mark  | +/    | 1 2 3 |       |   |monad| </TT>
<TT> +--------------+   +-------+-------+-------+-------+   +-----+ </TT>
<TT> |              |   | mark  | 6     |       |       |   |     | </TT>
<TT> +--------------+   +-------+-------+-------+-------+   +-----+ </TT>
<TT>                                                                </TT>
</PRE>
<H3>A1.3.5  Conjunction Rule</H3>
The scheme is:
<PRE>
<TT>          conjunction  EAVN VN1 CONJ VN1 etc => EAVN Z etc</TT>
</PRE>
where <TT>Z</TT> is the result of applying conjunction <TT>CONJ</TT> to
arguments <TT>VN1</TT> and <TT>VN2</TT>.  For example:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>1 &amp; + 2</TT></TD>
<TD><TT>'1 &amp; + 2' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                       </TT>
<TT> Queue            Stack                        Rule    </TT>
<TT>                                                       </TT>
<TT> +------------+   +------+-----+---+---+---+   +-----+ </TT>
<TT> |mark 1 &amp; + 2|   |      |     |   |   |   |   |     | </TT>
<TT> +------------+   +------+-----+---+---+---+   +-----+ </TT>
<TT> |mark 1 &amp; +  |   | 2    |     |   |   |   |   |     | </TT>
<TT> +------------+   +------+-----+---+---+---+   +-----+ </TT>
<TT> |mark 1 &amp;    |   | +    | 2   |   |   |   |   |     | </TT>
<TT> +------------+   +------+-----+---+---+---+   +-----+ </TT>
<TT> |mark 1      |   | &amp;    | +   | 2 |   |   |   |     | </TT>
<TT> +------------+   +------+-----+---+---+---+   +-----+ </TT>
<TT> |mark        |   | 1    | &amp;   | + | 2 |   |   |     | </TT>
<TT> +------------+   +------+-----+---+---+---+   +-----+ </TT>
<TT> |            |   | mark | 1   | &amp; | + | 2 |   |conj | </TT>
<TT> +------------+   +------+-----+---+---+---+   +-----+ </TT>
<TT> |            |   | mark | 1&amp;+ | 2 |   |   |   |monad| </TT>
<TT> +------------+   +------+-----+---+---+---+   +-----+ </TT>
<TT> |            |   | mark | 3   |   |   |   |   |     | </TT>
<TT> +------------+   +------+-----+---+---+---+   +-----+ </TT>
<TT>                                                       </TT>
</PRE>
<H3>A1.3.6  Trident Rule</H3>
The scheme is:
<PRE>
<TT>          trident rule: EAVN VN1 VERB2 VERB3 etc => EAVN Z etc</TT>
</PRE>
and there are two cases: <TT>VN1</TT> may be a verb or a noun.
<p>
If <TT>VN1</TT> is the verb <TT>VERB1</TT> then 
<TT>Z</TT> is the single verb defined as the fork 
<TT>VERB1 VERB2 VERB3</TT>.
<p>
If <TT>VN1</TT> is the noun <TT>NOUN1</TT> then 
<TT>Z</TT> is the single verb defined as the abbreviation for a
fork <TT>NOUN1 VERB2 VERB3</TT>. 
Forks and abbreviations for forks are described in 
<A HREF="09.htm">Chapter 09</A>.
<p>
Here is an  example: <TT>1 + *:</TT> is an abbreviation for the fork
<TT>1: + *:</TT>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>(1: + *:) 2 3</TT></TD>
<TD><TT>(1 + *:)2 3</TT></TD>
<TD><TT>'(1 + *:) 2 3' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>5 10</TT></TD>
<TD><TT>5 10</TT></TD>
<TD><TT>5 10</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                                           </TT>
<TT> Queue                   Stack                                   Rule      </TT>
<TT>                                                                           </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT> |mark ( 1 + *: ) 2 3|   |       |       |    |    |    |    |   |       | </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT> |mark ( 1 + *: )    |   | 2 3   |       |    |    |    |    |   |       | </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT> |mark ( 1 + *:      |   | )     | 2 3   |    |    |    |    |   |       | </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT> |mark ( 1 +         |   | *:    | )     | 2 3|    |    |    |   |       | </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT> |mark ( 1           |   | +     | *:    | )  | 2 3|    |    |   |       | </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT> |mark (             |   | 1     | +     | *: | )  | 2 3|    |   |       | </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT> |mark               |   | (     | 1     | +  | *: | )  | 2 3|   |trident| </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT> |mark               |   | (     | 1 + *:| )  | 2 3|    |    |   |paren  | </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT> |mark               |   | 1 + *:| 2 3   |    |    |    |    |   |       | </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT> |                   |   | mark  | 1 + *:| 2 3|    |    |    |   |monad  | </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT> |                   |   | mark  | 5 10  |    |    |    |    |   |       | </TT>
<TT> +-------------------+   +-------+-------+----+----+----+----+   +-------+ </TT>
<TT>                                                                           </TT>
<TT>   </TT>
</PRE>
<H3>A1.3.7  Bident Rule</H3>
The scheme is:
<PRE>
<TT>          bident rule: EDGE CAVN1 CAVN2 etc => EDGE Z etc</TT>
</PRE>
and there are altogether these 6 cases for the bident rule:
<p>
<TABLE CELLPADDING=4 BORDER=1> 
<TR> <TD>  <TT>CAVN1</TT></TD>   <TD><TT>CAVN2</TT></TD>   <TD> <TT> Z</TT>   </TD> </TR>
<TR> <TD>  verb          </TD>   <TD>verb           </TD>  <TD> verb (a hook) </TD> </TR>
<TR> <TD>  adverb        </TD>   <TD>adverb         </TD>  <TD> adverb        </TD> </TR>
<TR> <TD>  conjunction   </TD>   <TD>verb           </TD>  <TD> adverb        </TD> </TR>
<TR> <TD>  conjunction   </TD>   <TD>noun           </TD>  <TD> adverb        </TD> </TR>
<TR> <TD>  noun          </TD>   <TD>conjunction    </TD>  <TD> adverb        </TD> </TR>
<TR> <TD>  verb          </TD>   <TD>conjunction    </TD>  <TD> adverb        </TD> </TR>
</TABLE>
<p>
The first case (the hook) is described in <A HREF="03.htm">Chapter 03</A> and
the remaining cases in the schemes for bidents in  <A HREF="15.htm">Chapter 15</A>.
<p>
In the following example
the expression <TT>(1 &amp;)</TT> is a bident of the form noun conjunction. 
Therefore it is an adverb.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT> + (1 &amp;) 2</TT></TD>
<TD><TT>'+ (1 &amp;) 2' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>3</TT></TD>
<TD><TT>3</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                             </TT>
<TT> Queue                Stack                         Rule     </TT>
<TT>                                                             </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |mark + ( 1 &amp; ) 2|   |      |     |    |   |   |   |      | </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |mark + ( 1 &amp; )  |   | 2    |     |    |   |   |   |      | </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |mark + ( 1 &amp;    |   | )    | 2   |    |   |   |   |      | </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |mark + ( 1      |   | &amp;    | )   | 2  |   |   |   |      | </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |mark + (        |   | 1    | &amp;   | )  | 2 |   |   |      | </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |mark +          |   | (    | 1   | &amp;  | ) | 2 |   |bident| </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |mark +          |   | (    | 1&amp;  | )  | 2 |   |   |paren | </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |mark +          |   | 1&amp;   | 2   |    |   |   |   |      | </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |mark            |   | +    | 1&amp;  | 2  |   |   |   |      | </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |                |   | mark | +   | 1&amp; | 2 |   |   |adv   | </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |                |   | mark | 1&amp;+ | 2  |   |   |   |monad | </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT> |                |   | mark | 3   |    |   |   |   |      | </TT>
<TT> +----------------+   +------+-----+----+---+---+   +------+ </TT>
<TT>                                                             </TT>
<TT>   </TT>
</PRE>
<H3>A1.3.8  Assignment Rule</H3>
We write <TT>NN</TT> to denote a noun or a name. 
and <TT>Asgn</TT> for the assignment symbol <TT>=:</TT> or <TT>=.</TT>.
The scheme is:
<PRE>
<TT>          assign rule: NN Asgn CAVN etc => Z etc</TT>
</PRE>
where <TT>Z</TT> is the value of <TT>CAVN</TT>.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>1 + x =: 6</TT></TD>
<TD><TT>'1 + x =: 6' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>7</TT></TD>
<TD><TT>7</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                      </TT>
<TT> Queue               Stack                   Rule     </TT>
<TT>                                                      </TT>
<TT> +---------------+   +------+----+---+---+   +------+ </TT>
<TT> |mark 1 + x =: 6|   |      |    |   |   |   |      | </TT>
<TT> +---------------+   +------+----+---+---+   +------+ </TT>
<TT> |mark 1 + x =:  |   | 6    |    |   |   |   |      | </TT>
<TT> +---------------+   +------+----+---+---+   +------+ </TT>
<TT> |mark 1 + x     |   | =:   | 6  |   |   |   |      | </TT>
<TT> +---------------+   +------+----+---+---+   +------+ </TT>
<TT> |mark 1 +       |   | x    | =: | 6 |   |   |assign| </TT>
<TT> +---------------+   +------+----+---+---+   +------+ </TT>
<TT> |mark 1 +       |   | 6    |    |   |   |   |      | </TT>
<TT> +---------------+   +------+----+---+---+   +------+ </TT>
<TT> |mark 1         |   | +    | 6  |   |   |   |      | </TT>
<TT> +---------------+   +------+----+---+---+   +------+ </TT>
<TT> |mark           |   | 1    | +  | 6 |   |   |      | </TT>
<TT> +---------------+   +------+----+---+---+   +------+ </TT>
<TT> |               |   | mark | 1  | + | 6 |   |dyad  | </TT>
<TT> +---------------+   +------+----+---+---+   +------+ </TT>
<TT> |               |   | mark | 7  |   |   |   |      | </TT>
<TT> +---------------+   +------+----+---+---+   +------+ </TT>
<TT>                                                      </TT>
</PRE>
<H3>A1.3.9  Parenthesis Rule</H3>
The scheme is:
<PRE>
<TT>         paren rule: ( CAVN ) etc => Z etc</TT>
</PRE>
where <TT>Z</TT> is the value of <TT>CAVN</TT>. For example:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>(1+2)*3</TT></TD>
<TD><TT>'(1+2)*3' EVM </TT></TD>
<TR VALIGN=TOP>
<TD><TT>9</TT></TD>
<TD><TT>9</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                                   </TT>
<TT> Queue                  Stack                              Rule    </TT>
<TT>                                                                   </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |mark ( 1 + 2 ) * 3|   |      |   |   |   |   |   |   |   |     | </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |mark ( 1 + 2 ) *  |   | 3    |   |   |   |   |   |   |   |     | </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |mark ( 1 + 2 )    |   | *    | 3 |   |   |   |   |   |   |     | </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |mark ( 1 + 2      |   | )    | * | 3 |   |   |   |   |   |     | </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |mark ( 1 +        |   | 2    | ) | * | 3 |   |   |   |   |     | </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |mark ( 1          |   | +    | 2 | ) | * | 3 |   |   |   |     | </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |mark (            |   | 1    | + | 2 | ) | * | 3 |   |   |     | </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |mark              |   | (    | 1 | + | 2 | ) | * | 3 |   |dyad | </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |mark              |   | (    | 3 | ) | * | 3 |   |   |   |paren| </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |mark              |   | 3    | * | 3 |   |   |   |   |   |     | </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |                  |   | mark | 3 | * | 3 |   |   |   |   |dyad | </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT> |                  |   | mark | 9 |   |   |   |   |   |   |     | </TT>
<TT> +------------------+   +------+---+---+---+---+---+---+   +-----+ </TT>
<TT>                                                                   </TT>
<TT>   </TT>
</PRE>
<H3>A1.3.10  Examples of Transfer</H3>
The following example shows that when a name is 
transferred from queue to stack, if the name
denotes a value which is a noun, then the value, not the 
name, moves to the queue.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>a =: 6</TT></TD>
<TD><TT>(a=:7) , a</TT></TD>
<TR VALIGN=TOP>
<TD><TT>6</TT></TD>
<TD><TT>7 6</TT></TD>
</TABLE>
<p>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>a=: 6</TT></TD>
<TD><TT> '(a =: 7) , a' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>6</TT></TD>
<TD><TT>7 6</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                                   </TT>
<TT> Queue                   Stack                            Rule     </TT>
<TT>                                                                   </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |mark ( a =: 7 ) , a|   |      |     |   |   |   |   |   |      | </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |mark ( a =: 7 ) ,  |   | 6    |     |   |   |   |   |   |      | </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |mark ( a =: 7 )    |   | ,    | 6   |   |   |   |   |   |      | </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |mark ( a =: 7      |   | )    | ,   | 6 |   |   |   |   |      | </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |mark ( a =:        |   | 7    | )   | , | 6 |   |   |   |      | </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |mark ( a           |   | =:   | 7   | ) | , | 6 |   |   |      | </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |mark (             |   | a    | =:  | 7 | ) | , | 6 |   |assign| </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |mark (             |   | 7    | )   | , | 6 |   |   |   |      | </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |mark               |   | (    | 7   | ) | , | 6 |   |   |paren | </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |mark               |   | 7    | ,   | 6 |   |   |   |   |      | </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |                   |   | mark | 7   | , | 6 |   |   |   |dyad  | </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT> |                   |   | mark | 7 6 |   |   |   |   |   |      | </TT>
<TT> +-------------------+   +------+-----+---+---+---+---+   +------+ </TT>
<TT>                                                                   </TT>
</PRE>
By contrast, if the name is that of a verb, then the name 
is transferred into the 
stack without evaluating it.  Hence a subsequent assignment
changes the verb applied.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>f=: +</TT></TD>
<TD><TT>((f=:-) , f) 4</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+</TT></TD>
<TD><TT>_4 _4</TT></TD>
</TABLE>
<p>
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>f =: +</TT></TD>
<TD><TT>'((f =: -),f) 4' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>+</TT></TD>
<TD><TT>_4 _4</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                                             </TT>
<TT> Queue                         Stack                               Rule      </TT>
<TT>                                                                             </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark ( ( f =: - ) , f ) 4|   |      |      |  |  |  |  |  |  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark ( ( f =: - ) , f )  |   | 4    |      |  |  |  |  |  |  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark ( ( f =: - ) , f    |   | )    | 4    |  |  |  |  |  |  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark ( ( f =: - ) ,      |   | f    | )    | 4|  |  |  |  |  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark ( ( f =: - )        |   | ,    | f    | )| 4|  |  |  |  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark ( ( f =: -          |   | )    | ,    | f| )| 4|  |  |  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark ( ( f =:            |   | -    | )    | ,| f| )| 4|  |  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark ( ( f               |   | =:   | -    | )| ,| f| )| 4|  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark ( (                 |   | f    | =:   | -| )| ,| f| )| 4|   |assign | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark ( (                 |   | -    | )    | ,| f| )| 4|  |  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark (                   |   | (    | -    | )| ,| f| )| 4|  |   |paren  | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark (                   |   | -    | ,    | f| )| 4|  |  |  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark                     |   | (    | -    | ,| f| )| 4|  |  |   |trident| </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark                     |   | (    | - , f| )| 4|  |  |  |  |   |paren  | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |mark                     |   | - , f| 4    |  |  |  |  |  |  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |                         |   | mark | - , f| 4|  |  |  |  |  |   |monad  | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT> |                         |   | mark | _4 _4|  |  |  |  |  |  |   |       | </TT>
<TT> +-------------------------+   +------+------+--+--+--+--+--+--+   +-------+ </TT>
<TT>                                                                             </TT>
</PRE>
<H3>A1.3.11  Review of Parsing Rules</H3>
<TABLE BORDER=1 CELLPADDING=2>
<TR>
<TD> rule </TD>
<TD> &nbsp;</TD>
<TD COLSPAN=4> stack before            </TD>
<TD> &nbsp;</TD>
<TD COLSPAN=3> stack after  </TD>
<TD> &nbsp;</TD>
<TD> where Z is ...</TD>
<TR>
<TD> monad </TD>
<TD> &nbsp;</TD>
<TD> EDGE </TD>
<TD> Verb </TD>
<TD> Noun </TD>
<TD> etc  </TD>
<TD> &nbsp;</TD>
<TD> EDGE</TD>
<TD> Z   </TD>
<TD> etc</TD>
<TD> &nbsp;</TD>
<TD> Verb applied to Noun</TD>
<TR>
<TD> monad2 </TD>
<TD> &nbsp;</TD>
<TD> EAVN </TD>
<TD> Verb1</TD>
<TD> Verb2 </TD>
<TD> Noun </TD>
<TD> &nbsp;</TD>
<TD> EAVN </TD>
<TD> Verb1</TD>
<TD> Z   </TD>
<TD> &nbsp;</TD>
<TD> Verb2 applied to Noun</TD>
<TR>
<TD> dyad  </TD>
<TD> &nbsp;</TD>
<TD> EAVN </TD>
<TD> Noun1</TD>
<TD> Verb  </TD>
<TD> Noun2 </TD>
<TD> &nbsp;</TD>
<TD> EAVN </TD>
<TD> Z    </TD>
<TD> etc  </TD>
<TD> &nbsp;</TD>
<TD> Verb applied to Noun1 and Noun2</TD>
<TR> 
<TD> adverb </TD>
<TD> &nbsp;</TD>
<TD> EAVN </TD>
<TD> VN </TD>
<TD> Adv  </TD>
<TD> etc </TD>
<TD> &nbsp; </TD>
<TD> EAVN </TD>
<TD> Z </TD>
<TD> etc </TD>
<TD> &nbsp; </TD>
<TD> Adv applied to VN</TD>
<TR>
<TD> conj   </TD>
<TD> &nbsp; </TD>
<TD> EAVN </TD>
<TD> VN1  </TD>
<TD> Conj  </TD>
<TD> VN2   </TD>
<TD> &nbsp; </TD>
<TD> EAVN </TD>
<TD> Z    </TD>
<TD> etc  </TD>
<TD> &nbsp; </TD>
<TD> Conj applied to VN1 and VN2</TD>
<TR> 
<TD> trident   </TD>
<TD> &nbsp; </TD>
<TD> EAVN </TD>
<TD> VN1</TD>
<TD> Verb2 </TD>
<TD> Verb3</TD>
<TD> &nbsp; </TD>
<TD> EAVN </TD>
<TD> Z    </TD>
<TD> etc  </TD>
<TD> &nbsp; </TD>
<TD> fork (VN1 Verb2 Verb3)</TD>
<p>
<TR>
<TD> bident </TD>
<TD> &nbsp; </TD>
<TD> EDGE </TD>
<TD> CAVN1</TD>
<TD> CAVN2 </TD>
<TD> etc   </TD>
<TD> &nbsp; </TD>
<TD> EDGE </TD>
<TD> Z    </TD>
<TD> etc  </TD>
<TD> &nbsp; </TD>
<TD> bident (CAVN1 CAVN2)</TD>
<TR> 
<TD> assign </TD>
<TD> &nbsp; </TD>
<TD> NN   </TD>
<TD> Asgn </TD>
<TD> CAVN  </TD>
<TD> etc  </TD>
<TD> &nbsp; </TD>
<TD> Z    </TD>
<TD> etc  </TD>
<TD> etc  </TD>
<TD> &nbsp; </TD>
<TD> CAVN</TD>
<TR> 
<TD> paren  </TD>
<TD> &nbsp; </TD>
<TD> (    </TD>
<TD> CAVN </TD>
<TD> )     </TD>
<TD> etc   </TD>
<TD> &nbsp; </TD>
<TD> Z    </TD>
<TD> etc  </TD>
<TD> etc  </TD>
<TD> &nbsp; </TD>
<TD> CAVN</TD>
</TABLE>
<H2>A1.4  Effects of Parsing Rules</H2>
Now we look at some of the effects,
 of the parsing rules.
In what follows, notice  
how the parsing rules in effect 
give rise to implicit parentheses.
<H3>A1.4.1  Dyad Has Long Right Scope</H3>
Consider the expression <TT>4+3-2</TT>, which means <TT>4+(3-2)</TT>.
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>4 + 3 - 2</TT></TD>
<TD><TT>4 + (3-2)</TT></TD>
<TD><TT> '4+3-2' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>5</TT></TD>
<TD><TT>5</TT></TD>
<TD><TT>5</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                  </TT>
<TT> Queue              Stack                  Rule   </TT>
<TT>                                                  </TT>
<TT> +--------------+   +------+---+---+---+   +----+ </TT>
<TT> |mark 4 + 3 - 2|   |      |   |   |   |   |    | </TT>
<TT> +--------------+   +------+---+---+---+   +----+ </TT>
<TT> |mark 4 + 3 -  |   | 2    |   |   |   |   |    | </TT>
<TT> +--------------+   +------+---+---+---+   +----+ </TT>
<TT> |mark 4 + 3    |   | -    | 2 |   |   |   |    | </TT>
<TT> +--------------+   +------+---+---+---+   +----+ </TT>
<TT> |mark 4 +      |   | 3    | - | 2 |   |   |    | </TT>
<TT> +--------------+   +------+---+---+---+   +----+ </TT>
<TT> |mark 4        |   | +    | 3 | - | 2 |   |dyad| </TT>
<TT> +--------------+   +------+---+---+---+   +----+ </TT>
<TT> |mark 4        |   | +    | 1 |   |   |   |    | </TT>
<TT> +--------------+   +------+---+---+---+   +----+ </TT>
<TT> |mark          |   | 4    | + | 1 |   |   |    | </TT>
<TT> +--------------+   +------+---+---+---+   +----+ </TT>
<TT> |              |   | mark | 4 | + | 1 |   |dyad| </TT>
<TT> +--------------+   +------+---+---+---+   +----+ </TT>
<TT> |              |   | mark | 5 |   |   |   |    | </TT>
<TT> +--------------+   +------+---+---+---+   +----+ </TT>
<TT>                                                  </TT>
</PRE>
Here we have an example of a general rule: a dyadic verb 
takes as its right argument
as much as possible, so in this example <TT>+</TT> is applied to 
<TT>3-2</TT>, not just <TT>3</TT>.
<p>
Further, a dyadic verb takes as left argument as little as
 possible. In this example
the left argument of <TT>-</TT> is just <TT>3</TT>, not <TT>4+3</TT>.  Hence a 
dyadic verb is said to have a 
"long right scope" and a "short left scope".
<H3>A1.4.2  Operators Before Verbs</H3>
Adverbs and conjunctions get applied first, and then the 
resulting verbs:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>* &amp; 1 % 2</TT></TD>
<TD><TT>(*&amp;1) % 2</TT></TD>
<TD><TT> '* &amp; 1 % 2' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>0.5</TT></TD>
<TD><TT>0.5</TT></TD>
<TD><TT>0.5</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                                </TT>
<TT> Queue              Stack                              Rule     </TT>
<TT>                                                                </TT>
<TT> +--------------+   +------+-----+-----+---+---+---+   +------+ </TT>
<TT> |mark * &amp; 1 % 2|   |      |     |     |   |   |   |   |      | </TT>
<TT> +--------------+   +------+-----+-----+---+---+---+   +------+ </TT>
<TT> |mark * &amp; 1 %  |   | 2    |     |     |   |   |   |   |      | </TT>
<TT> +--------------+   +------+-----+-----+---+---+---+   +------+ </TT>
<TT> |mark * &amp; 1    |   | %    | 2   |     |   |   |   |   |      | </TT>
<TT> +--------------+   +------+-----+-----+---+---+---+   +------+ </TT>
<TT> |mark * &amp;      |   | 1    | %   | 2   |   |   |   |   |      | </TT>
<TT> +--------------+   +------+-----+-----+---+---+---+   +------+ </TT>
<TT> |mark *        |   | &amp;    | 1   | %   | 2 |   |   |   |      | </TT>
<TT> +--------------+   +------+-----+-----+---+---+---+   +------+ </TT>
<TT> |mark          |   | *    | &amp;   | 1   | % | 2 |   |   |      | </TT>
<TT> +--------------+   +------+-----+-----+---+---+---+   +------+ </TT>
<TT> |              |   | mark | *   | &amp;   | 1 | % | 2 |   |conj  | </TT>
<TT> +--------------+   +------+-----+-----+---+---+---+   +------+ </TT>
<TT> |              |   | mark | *&amp;1 | %   | 2 |   |   |   |monad2| </TT>
<TT> +--------------+   +------+-----+-----+---+---+---+   +------+ </TT>
<TT> |              |   | mark | *&amp;1 | 0.5 |   |   |   |   |monad | </TT>
<TT> +--------------+   +------+-----+-----+---+---+---+   +------+ </TT>
<TT> |              |   | mark | 0.5 |     |   |   |   |   |      | </TT>
<TT> +--------------+   +------+-----+-----+---+---+---+   +------+ </TT>
<TT>                                                                </TT>
</PRE>
<H3>A1.4.3  Operators Have Long Left Scope</H3>
In the following examples, note that  
values of verbs are  shown in the "parenthesized representation" (see <A HREF="27.htm">Chapter 27</A>)
to show their structure. 
<p>
An adverb or a conjunction takes as its left argument as 
much as possible.
Look  at the structure of these verbs: 
evidently
the <TT>/</TT> adverb and the <TT>@</TT> conjunction take everything to 
their left:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>f @ g /</TT></TD>
<TD><TT>f &amp; g @ h</TT></TD>
<TD><TT>'f&amp;g@h' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>(f@g)/</TT></TD>
<TD><TT>(f&amp;g)@h</TT></TD>
<TD><TT>(f&amp;g)@h</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                                </TT>
<TT> Queue              Stack                                Rule   </TT>
<TT>                                                                </TT>
<TT> +--------------+   +------+---------+---+---+---+---+   +----+ </TT>
<TT> |mark f &amp; g @ h|   |      |         |   |   |   |   |   |    | </TT>
<TT> +--------------+   +------+---------+---+---+---+---+   +----+ </TT>
<TT> |mark f &amp; g @  |   | h    |         |   |   |   |   |   |    | </TT>
<TT> +--------------+   +------+---------+---+---+---+---+   +----+ </TT>
<TT> |mark f &amp; g    |   | @    | h       |   |   |   |   |   |    | </TT>
<TT> +--------------+   +------+---------+---+---+---+---+   +----+ </TT>
<TT> |mark f &amp;      |   | g    | @       | h |   |   |   |   |    | </TT>
<TT> +--------------+   +------+---------+---+---+---+---+   +----+ </TT>
<TT> |mark f        |   | &amp;    | g       | @ | h |   |   |   |    | </TT>
<TT> +--------------+   +------+---------+---+---+---+---+   +----+ </TT>
<TT> |mark          |   | f    | &amp;       | g | @ | h |   |   |    | </TT>
<TT> +--------------+   +------+---------+---+---+---+---+   +----+ </TT>
<TT> |              |   | mark | f       | &amp; | g | @ | h |   |conj| </TT>
<TT> +--------------+   +------+---------+---+---+---+---+   +----+ </TT>
<TT> |              |   | mark | f&amp;g     | @ | h |   |   |   |conj| </TT>
<TT> +--------------+   +------+---------+---+---+---+---+   +----+ </TT>
<TT> |              |   | mark | (f&amp;g)@h |   |   |   |   |   |    | </TT>
<TT> +--------------+   +------+---------+---+---+---+---+   +----+ </TT>
<TT>                                                                </TT>
</PRE>
Thus operators are said to have a "long left scope". 
 In the example of
<TT>f&amp;g@h</TT> we see that the right argument of <TT>&amp;</TT> is just <TT>g</TT>,
 not <TT>g@h</TT> .
Thus conjunctions have "short right scope".
<H3>A1.4.4  Train on the Left</H3>
The long left scope of an adverb does
not extend through a train: parentheses
may be needed to get the desired effect.
Suppose <TT>f g h</TT> is intended as a train, then compare the 
following:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>(f g h) /</TT></TD>
<TD><TT>f g h /</TT></TD>
<TD><TT>'f g h / ' EVM </TT></TD>
<TR VALIGN=TOP>
<TD><TT>(f g h)/</TT></TD>
<TD><TT>f g (h/)</TT></TD>
<TD><TT>f g (h/)</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                            </TT>
<TT> Queue            Stack                           Rule      </TT>
<TT>                                                            </TT>
<TT> +------------+   +------+----------+----+----+   +-------+ </TT>
<TT> |mark f g h /|   |      |          |    |    |   |       | </TT>
<TT> +------------+   +------+----------+----+----+   +-------+ </TT>
<TT> |mark f g h  |   | /    |          |    |    |   |       | </TT>
<TT> +------------+   +------+----------+----+----+   +-------+ </TT>
<TT> |mark f g    |   | h    | /        |    |    |   |       | </TT>
<TT> +------------+   +------+----------+----+----+   +-------+ </TT>
<TT> |mark f      |   | g    | h        | /  |    |   |adv    | </TT>
<TT> +------------+   +------+----------+----+----+   +-------+ </TT>
<TT> |mark f      |   | g    | h/       |    |    |   |       | </TT>
<TT> +------------+   +------+----------+----+----+   +-------+ </TT>
<TT> |mark        |   | f    | g        | h/ |    |   |       | </TT>
<TT> +------------+   +------+----------+----+----+   +-------+ </TT>
<TT> |            |   | mark | f        | g  | h/ |   |trident| </TT>
<TT> +------------+   +------+----------+----+----+   +-------+ </TT>
<TT> |            |   | mark | f g (h/) |    |    |   |       | </TT>
<TT> +------------+   +------+----------+----+----+   +-------+ </TT>
<TT>                                                            </TT>
<TT>   </TT>
</PRE>
Similarly for a conjunction (with a right argument)
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>f g h @ +</TT></TD>
<TD><TT>'f g h @ +' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>f g (h@+)</TT></TD>
<TD><TT>f g (h@+)</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                                 </TT>
<TT> Queue              Stack                              Rule      </TT>
<TT>                                                                 </TT>
<TT> +--------------+   +------+-----------+-----+-----+   +-------+ </TT>
<TT> |mark f g h @ +|   |      |           |     |     |   |       | </TT>
<TT> +--------------+   +------+-----------+-----+-----+   +-------+ </TT>
<TT> |mark f g h @  |   | +    |           |     |     |   |       | </TT>
<TT> +--------------+   +------+-----------+-----+-----+   +-------+ </TT>
<TT> |mark f g h    |   | @    | +         |     |     |   |       | </TT>
<TT> +--------------+   +------+-----------+-----+-----+   +-------+ </TT>
<TT> |mark f g      |   | h    | @         | +   |     |   |       | </TT>
<TT> +--------------+   +------+-----------+-----+-----+   +-------+ </TT>
<TT> |mark f        |   | g    | h         | @   | +   |   |conj   | </TT>
<TT> +--------------+   +------+-----------+-----+-----+   +-------+ </TT>
<TT> |mark f        |   | g    | h@+       |     |     |   |       | </TT>
<TT> +--------------+   +------+-----------+-----+-----+   +-------+ </TT>
<TT> |mark          |   | f    | g         | h@+ |     |   |       | </TT>
<TT> +--------------+   +------+-----------+-----+-----+   +-------+ </TT>
<TT> |              |   | mark | f         | g   | h@+ |   |trident| </TT>
<TT> +--------------+   +------+-----------+-----+-----+   +-------+ </TT>
<TT> |              |   | mark | f g (h@+) |     |     |   |       | </TT>
<TT> +--------------+   +------+-----------+-----+-----+   +-------+ </TT>
<TT>                                                                 </TT>
</PRE>
However, for a conjunction with no right
argument, the left scope does extend through a train:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>f g h @</TT></TD>
<TD><TT>'f g h @' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>(f g h)@</TT></TD>
<TD><TT>(f g h)@</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                              </TT>
<TT> Queue            Stack                             Rule      </TT>
<TT>                                                              </TT>
<TT> +------------+   +------+----------+---+---+---+   +-------+ </TT>
<TT> |mark f g h @|   |      |          |   |   |   |   |       | </TT>
<TT> +------------+   +------+----------+---+---+---+   +-------+ </TT>
<TT> |mark f g h  |   | @    |          |   |   |   |   |       | </TT>
<TT> +------------+   +------+----------+---+---+---+   +-------+ </TT>
<TT> |mark f g    |   | h    | @        |   |   |   |   |       | </TT>
<TT> +------------+   +------+----------+---+---+---+   +-------+ </TT>
<TT> |mark f      |   | g    | h        | @ |   |   |   |       | </TT>
<TT> +------------+   +------+----------+---+---+---+   +-------+ </TT>
<TT> |mark        |   | f    | g        | h | @ |   |   |       | </TT>
<TT> +------------+   +------+----------+---+---+---+   +-------+ </TT>
<TT> |            |   | mark | f        | g | h | @ |   |trident| </TT>
<TT> +------------+   +------+----------+---+---+---+   +-------+ </TT>
<TT> |            |   | mark | f g h    | @ |   |   |   |bident | </TT>
<TT> +------------+   +------+----------+---+---+---+   +-------+ </TT>
<TT> |            |   | mark | (f g h)@ |   |   |   |   |       | </TT>
<TT> +------------+   +------+----------+---+---+---+   +-------+ </TT>
<TT>                                                              </TT>
</PRE>
By contrast, in the case of
of <TT>f @ g /</TT>, notice how the "conj" rule is applied 
before there is a chance to apply the "adverb" rule"
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>f @ g /</TT></TD>
<TD><TT>'f @ g / ' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>(f@g)/</TT></TD>
<TD><TT>(f@g)/</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                         </TT>
<TT> Queue            Stack                           Rule   </TT>
<TT>                                                         </TT>
<TT> +------------+   +------+--------+---+---+---+   +----+ </TT>
<TT> |mark f @ g /|   |      |        |   |   |   |   |    | </TT>
<TT> +------------+   +------+--------+---+---+---+   +----+ </TT>
<TT> |mark f @ g  |   | /    |        |   |   |   |   |    | </TT>
<TT> +------------+   +------+--------+---+---+---+   +----+ </TT>
<TT> |mark f @    |   | g    | /      |   |   |   |   |    | </TT>
<TT> +------------+   +------+--------+---+---+---+   +----+ </TT>
<TT> |mark f      |   | @    | g      | / |   |   |   |    | </TT>
<TT> +------------+   +------+--------+---+---+---+   +----+ </TT>
<TT> |mark        |   | f    | @      | g | / |   |   |    | </TT>
<TT> +------------+   +------+--------+---+---+---+   +----+ </TT>
<TT> |            |   | mark | f      | @ | g | / |   |conj| </TT>
<TT> +------------+   +------+--------+---+---+---+   +----+ </TT>
<TT> |            |   | mark | f@g    | / |   |   |   |adv | </TT>
<TT> +------------+   +------+--------+---+---+---+   +----+ </TT>
<TT> |            |   | mark | (f@g)/ |   |   |   |   |    | </TT>
<TT> +------------+   +------+--------+---+---+---+   +----+ </TT>
<TT>                                                         </TT>
</PRE>
<H3>A1.4.5  Presumption of Verb</H3>
A name with no value assigned is
presumed to be a verb. For example, 
in the following the two  names
make a hook:
<p>
<TABLE class=jtable>
<TR  VALIGN=TOP>
<TD><TT>Blue Skies</TT></TD>
<TD><TT>'Blue Skies' EVM</TT></TD>
<TR VALIGN=TOP>
<TD><TT>Blue Skies</TT></TD>
<TD><TT>Blue Skies</TT></TD>
</TABLE>
<p>
<PRE>
<TT>   hist ''</TT>
<TT>                                                               </TT>
<TT> Queue               Stack                            Rule     </TT>
<TT>                                                               </TT>
<TT> +---------------+   +-------+------------+-------+   +------+ </TT>
<TT> |mark Blue Skies|   |       |            |       |   |      | </TT>
<TT> +---------------+   +-------+------------+-------+   +------+ </TT>
<TT> |mark Blue      |   | Skies |            |       |   |      | </TT>
<TT> +---------------+   +-------+------------+-------+   +------+ </TT>
<TT> |mark           |   | Blue  | Skies      |       |   |      | </TT>
<TT> +---------------+   +-------+------------+-------+   +------+ </TT>
<TT> |               |   | mark  | Blue       | Skies |   |bident| </TT>
<TT> +---------------+   +-------+------------+-------+   +------+ </TT>
<TT> |               |   | mark  | Blue Skies |       |   |      | </TT>
<TT> +---------------+   +-------+------------+-------+   +------+ </TT>
<TT>                                                               </TT>
<TT>   </TT>
</PRE>
This is the end of Appendix 1.
</font>
  </tr> </table> 
<HR>  
 <p ALIGN=CENTER> 
 <A HREF="92.htm"> NEXT </A> <BR> 
 <A HREF="contents.htm#toc"> Table of Contents </A> <BR> 
<A HREF="kwic.htm"> Index </A> 
<HR> 
<P ALIGN=CENTER> 
<FONT SIZE=-1>The examples in this chapter 
were executed using J version 701. 
 This chapter last updated 29 Jul 2012<BR> 
Copyright &copy; Roger Stokes 2012. 
 This material may be freely reproduced, 
provided that this copyright notice is also reproduced. 
</FONT> 
 <!--bottom jump start--><hr><a href="92.htm">&gt;&gt;</a>&nbsp;
<a href="32.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Learning J<!--bottom jump end--></BODY> 
 </HTML> 
 
