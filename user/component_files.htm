<html>
<head><link rel=stylesheet href="../jdoc.css" type="text/css">
<title>Component Files</title>

</head><body><!--top jump start--><a href="keyed_files.htm">&gt;&gt;</a>&nbsp;
<a href="files.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
User<hr><!--top jump end-->

<TR valign="baseline"><TD><H1>Component Files (jfiles)</h1>
<TR><TD colspan="2"> 

<P>
Jfiles are component <code>files</code> for J data. A jfile can 
be thought of as a boxed list which is stored on file. 
An element of the boxed list is referred to as a component, 
and can store a noun of any type, shape or size. File components 
are numbered sequentially from 0 upwards.</P>
<P>
To access the system (assuming you are using the standard profile):</P>

<pre>
   load 'jfiles'
</pre>

<P>
This populates a locale <code>jfiles</code> with utility functions, and defines the following verbs in the <code>z</code> locale:</P>

<pre>
   jcreate
   jerase
   jappend
   jread
   jreplace
   jdup
   jsize
</pre>

<P>
You create a file using <code>jcreate</code>.

<P>
<code>jappend</code> adds new items to the file. Each item added to the file is stored in a new component. Several items can be added to the file at a time.</P>

<P>
<code>jread</code> reads items from file, and <code>jreplace</code> replaces items on file.</P>

<P>
<code>jdup</code> duplicates a file, and <code>jsize</code> returns its size.</P>

<P>
You can refer to a file either by its file name, or by its file handle. The default file extension is .ijf - this is used if no file extension is given.</P>

<P>
You cannot delete components once created. If you need to reclaim space no longer required, either replace the components with empties, or else duplicate the file, copying only the components required.</P>

<P>
<I>Create file</I><br>
jcreate<br>
create a file. The right argument is the filename. Any existing file is overwritten. The result is 1 if successful, else 0. For example:</P>

<pre>
   jcreate 'mydata'
1
</pre>

<P>
Note that since the file extension was not specified, this actually creates a file named mydata.ijf.</P>

<P>
<I>Read and write file</I><br>
jappend<br>
append to file. The left argument is a boxed list, with each item in the list stored in a new file component. An open noun is treated as a single boxed item. The right argument is the filename. The result is the new component numbers created. For example:</P>

<pre>
   'header' jappend 'mydata'
0

   ('rec1';'rec2') jappend 'mydata'
1 2

   (&lt; &lt;\1 2 3) jappend 'mydata'
3

   (2 2$10 20 30 40) jappend 'mydata'
4
</pre>

<P>
jread<br>
read file. The right argument is the filename, linked with one or more component numbers. The result has the same shape as the component numbers. For example:</P>

<pre>
   &gt; jread 'mydata';4
10 20
30 40
</pre>

<pre>
   jread 'mydata';i.5
+------+----+----+-------------+-----+
|header|rec1|rec2|+-+---+-----+|10 20|
|      |    |    ||1|1 2|1 2 3||30 40|
|      |    |    |+-+---+-----+|     |
+------+----+----+-------------+-----+

   jread 'mydata';i.2 2
+------+-------------+
|header|rec1         |
+------+-------------+
|rec2  |+-+---+-----+|
|      ||1|1 2|1 2 3||
|      |+-+---+-----+|
+------+-------------+
</pre>

<P>
jreplace<br>
replace in file. The result is the components replaced. For example:</P>

<pre>
   (1000;'abcde') jreplace 'mydata';1 2
1 2

   jread 'mydata';i.3
+------+----+-----+
|header|1000|abcde|
+------+----+-----+
</pre>

<P>
The left argument is reshaped if necessary to match the components in the right argument. For example, the following replaces components 1-3, each with the word <code>'reserved'</code>:</P>

<pre>
   'reserved' jreplace 'mydata';1 2 3
1 2 3
</pre>

<P>
<I>Utilities</I><br>
jdup<br>
duplicate file. The left argument is the new filename; if elided, the file is duplicated in place. The right argument is the source filename, optionally linked with one or more component numbers to be copied to the new file, in the order given. By default, the entire file is duplicated. The result is the number of components written. For example:</P>

<pre>
   'newdata' jdup 'mydata'
5
  
   'newdata' jdup 'mydata';2 0 1
3
</pre>


<p>jsize<br>
size of file, as 4 numbers:
<p>
starting component number (0)<br>
number of components<br>
length of file in bytes (same as result of <code>1!:4</code>)<br>
amount of free space that could be recovered by duplicating the file</P>

<P>
For example:</P>

<pre>
   jsize 'newdata'
0 5 1312 0
</pre>

<P>
jerase<br>
erase file, for example:</P>

<pre>
   jerase 'newdata'
1
</pre>

<P>
<I>File handles</I><br>
You can refer to a file either by its filename, or by its file handle if you have already opened the file. For most purposes we recommend using the filename. However, if you have a great deal of file activity, you may find it faster to open the file first, then use the file handle; this means the system does not have to open and close the file each time it is accessed. The utilities <code>jopen</code> and <code>jclose</code> in the jfiles locale can be used for this purpose. For example:</P>

<pre>
   h=. jopen_files_ 'mydata'
</pre>

<P>
... process file using handle <code>h...</code>

<pre>
   jclose_files_ h
1
</pre>

<p><I>File structure</I><br>
Each file is structured as a header record, followed by data. The header record is as
follows:</P>
<p>
[0]   version<br>
[1]   starting component<br>
[2]   number of components<br>
[3]   file length<br>
[4]   directory pointer<br>
[5]   freelist pointer<br>
[6]   sequence number</P>
<p>
<I>Freelist</I><br>
Each component is stored in its 3!:1 representation in a space that is a power of 2. This means that on average, the representation fills 75% of the space allocated, and allows some space for growing replaces. If the space required on replacement is less than half the space allocated, then the balance is freed up. </P>

<P>
If you replace a component with a noun of smaller size, then this may result in some unused space. The system keeps track of this in the freelist, and attempts to reuse it where possible. The total free space available is given in the fourth element of the result of <code>jsize</code>, and this is the space that would be freed by duplicating the file using <code>jdup</code>.</P>
</TD>
  </tr>
<TR><TD>
<!--bottom jump start--><hr><a href="keyed_files.htm">&gt;&gt;</a>&nbsp;
<a href="files.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
User<!--bottom jump end--></td></tr></table></body>
</html>
