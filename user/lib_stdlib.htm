<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>stdlib.ijs</title>
  <style type="text/css">code{white-space: pre;}</style>
  <link rel="stylesheet" href="../jdoc.css" type="text/css" />
</head>
<body><!--top jump start--><a href="lib_strings.htm">&gt;&gt;</a>&nbsp;<a href="lib_jal.htm">&lt;&lt;</a>&nbsp;<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;User
<hr><!--top jump end-->
<div id="header">
<h1 class="title">stdlib.ijs</h1>
</div>
<p>This script defines core utilities for the J standard library. Definitions are loaded into the z locale.</p>
<h2>Definitions</h2>
<table>
<tbody>
<tr class="odd">
<td align="left">A</td>
<td align="left"><a href="#adverb">adverb</a>, <a href="#alpha17">alpha17</a>, <a href="#alpha27">alpha27</a>, <a href="#apply">apply</a>, <a href="#assert">assert</a></td>
</tr>
<tr class="even">
<td align="left">B</td>
<td align="left"><a href="#bind">bind</a>, <a href="#boxopen">boxopen</a>, <a href="#boxxopen">boxxopen</a>, <a href="#bx">bx</a></td>
</tr>
<tr class="odd">
<td align="left">C</td>
<td align="left"><a href="#clear">clear</a>, <a href="#conjunction">conjunction</a>, <a href="#CR">CR</a>, <a href="#CRLF">CRLF</a>, <a href="#cutLF">cutLF</a>, <a href="#cutopen">cutopen</a></td>
</tr>
<tr class="even">
<td align="left">D</td>
<td align="left"><a href="#datatype">datatype</a>, <a href="#Debug">Debug</a>, <a href="#def">def</a>, <a href="#define">define</a>, <a href="#DEL">DEL</a>, <a href="#dfh">dfh</a>, <a href="#do">do</a>, <a href="#drop">drop</a>, <a href="#dyad">dyad</a></td>
</tr>
<tr class="odd">
<td align="left">E</td>
<td align="left"><a href="#each">each</a>, <a href="#EAV">EAV</a>, <a href="#echo">echo</a>, <a href="#EMPTY">EMPTY</a>, <a href="#empty">empty</a>, <a href="#erase">erase</a>, <a href="#every">every</a>, <a href="#evtloop">evtloop</a>, <a href="#exit">exit</a>, <a href="#expand">expand</a></td>
</tr>
<tr class="even">
<td align="left">F</td>
<td align="left"><a href="#fetch">fetch</a>, <a href="#FF">FF</a>, <a href="#file2url">file2url</a>, <a href="#fixdotdot">fixdotdot</a>, <a href="#fliprgb">fliprgb</a></td>
</tr>
<tr class="odd">
<td align="left">G</td>
<td align="left"><a href="#getargs">getargs</a>, <a href="#getenv">getenv</a></td>
</tr>
<tr class="even">
<td align="left">H</td>
<td align="left"><a href="#hfd">hfd</a></td>
</tr>
<tr class="odd">
<td align="left">I</td>
<td align="left"><a href="#inv">inv</a>, <a href="#inverse">inverse</a>, <a href="#iospath">iospath</a>, <a href="#isatty">isatty</a>, <a href="#isutf8">isutf8</a>, <a href="#items">items</a></td>
</tr>
<tr class="even">
<td align="left">L</td>
<td align="left"><a href="#leaf">leaf</a>, <a href="#LF">LF</a>, <a href="#LF2">LF2</a>, <a href="#list">list</a></td>
</tr>
<tr class="odd">
<td align="left">M</td>
<td align="left"><a href="#monad">monad</a></td>
</tr>
<tr class="even">
<td align="left">N</td>
<td align="left"><a href="#nameclass">nameclass</a>, <a href="#namelist">namelist</a>, <a href="#names">names</a>, <a href="#nc">nc</a>, <a href="#nl">nl</a>, <a href="#Note">Note</a>, <a href="#noun">noun</a></td>
</tr>
<tr class="odd">
<td align="left">O</td>
<td align="left"><a href="#on">on</a></td>
</tr>
<tr class="even">
<td align="left">P</td>
<td align="left"><a href="#pick">pick</a></td>
</tr>
<tr class="odd">
<td align="left">R</td>
<td align="left"><a href="#rows">rows</a></td>
</tr>
<tr class="even">
<td align="left">S</td>
<td align="left"><a href="#script">script</a>, <a href="#scriptd">scriptd</a>, <a href="#sign">sign</a>, <a href="#sminfo">sminfo</a>, <a href="#smoutput">smoutput</a>, <a href="#sort">sort</a>, <a href="#split">split</a>, <a href="#stderr">stderr</a>, <a href="#stdin">stdin</a>, <a href="#stdout">stdout</a></td>
</tr>
<tr class="odd">
<td align="left">T</td>
<td align="left"><a href="#TAB">TAB</a>, <a href="#table">table</a>, <a href="#take">take</a>, <a href="#timespacex">timespacex</a>, <a href="#timex">timex</a>, <a href="#tmoutput">tmoutput</a>, <a href="#toCRLF">toCRLF</a>, <a href="#toHOST">toHOST</a>, <a href="#toJ">toJ</a>, <a href="#tolower">tolower</a>, <a href="#toupper">toupper</a>, <a href="#type">type</a></td>
</tr>
<tr class="even">
<td align="left">U</td>
<td align="left"><a href="#ucp">ucp</a>, <a href="#ucpcount">ucpcount</a>, <a href="#usleep">usleep</a>, <a href="#utf8">utf8</a>, <a href="#uucp">uucp</a></td>
</tr>
<tr class="odd">
<td align="left">V</td>
<td align="left"><a href="#verb">verb</a></td>
</tr>
</tbody>
</table>
<h2>Nouns</h2>
<table class="noun"><tr><td class="nounid">
adverb
</td><td class="noun">
integer 1
</td></tr>
<tr><td class="nounid">
conjunction
</td><td class="noun">
integer 2
</td></tr>
<tr><td class="nounid">
CR
</td><td class="noun">
carriage return character
</td></tr>
<tr><td class="nounid">
CRLF
</td><td class="noun">
CR,LF pair
</td></tr>
<tr><td class="nounid">
Debug
</td><td class="noun">
debug flag, initialized to 0
</td></tr>
<tr><td class="nounid">
DEL
</td><td class="noun">
ascii 127 character
</td></tr>
<tr><td class="nounid">
dyad
</td><td class="noun">
integer 4
</td></tr>
<tr><td class="nounid">
EAV
</td><td class="noun">
ascii 255 character
</td></tr>
<tr><td class="nounid">
EMPTY
</td><td class="noun">
empty matrix (i.0 0)
</td></tr>
<tr><td class="nounid">
FF
</td><td class="noun">
formfeed character
</td></tr>
<tr><td class="nounid">
LF
</td><td class="noun">
linefeed character
</td></tr>
<tr><td class="nounid">
LF2
</td><td class="noun">
LF,LF pair
</td></tr>
<tr><td class="nounid">
monad
</td><td class="noun">
integer 3
</td></tr>
<tr><td class="nounid">
noun
</td><td class="noun">
integer 0
</td></tr>
<tr><td class="nounid">
TAB
</td><td class="noun">
tab character
</td></tr>
<tr><td class="nounid">
verb
</td><td class="noun">
integer 3
</td></tr>
</table>

<h2 id="alpha17" class="hdef">alpha17 (verb)</h2>
<p>Remove alpha channel.</p>
<h2 id="alpha27" class="hdef">alpha27 (verb)</h2>
<p>Add alpha channel.</p>
<h2 id="apply" class="hdef">apply (verb)</h2>
<p>Apply verb x to y.</p>
<h2 id="assert" class="hdef">assert (verb)</h2>
<p>assertion failure if 0 e. y e.g. 'invalid age' assert 0 &lt;: age</p>
<h2 id="bind" class="hdef">bind (conjunction)</h2>
<p>binds monadic verb to an argument creating a new verb that ignores its argument. e.g. fini=: mbinfo bind 'finished...'</p>
<h2 id="boxopen" class="hdef">boxopen (verb)</h2>
<p>Box argument if open.</p>
<p>e.g. if script=: 0!:0 @ boxopen, then either<br />  script 'work.ijs' or script &lt;'work.ijs'</p>
<p>See also <a href="boxxopen">boxxopen</a>.</p>
<p>Use <a href="#cutopen">cutopen</a> to allow multiple arguments.</p>
<h2 id="boxxopen" class="hdef">boxxopen (verb)</h2>
<p>Box argument if open and not empty.</p>
<p>See also <a href="boxxopen">boxxopen</a>.</p>
<h2 id="bx" class="hdef">bx (verb)</h2>
<p>Indices of 1's in boolean (same as I.).</p>
<h2 id="clear" class="hdef">clear (verb)</h2>
<p>Clear all names in locale, returns any names not erased.</p>
<h3>Example</h3>
<pre><code>clear &#39;myloc&#39;</code></pre>
<h2 id="cutLF" class="hdef">cutLF (verb)</h2>
<p>Cut text on LF, removing empties.</p>
<h2 id="cutopen" class="hdef">cutopen (verb)</h2>
<p>Cut argument if open. This allows an open argument to be given where a boxed list is required.</p>
<p>Most common situations are handled. it is similar to boxopen, except allowing multiple arguments in the character string.</p>
<p>x is optional delimiters, default LF if in y, else blank<br />y is boxed or an open character array.</p>
<p>if y is boxed it is returned unchanged, otherwise:<br />if y has rank 2 or more, the boxed major cells are returned<br />if y has rank 0 or 1, it is cut on delimiters in given in x, or<br />  if x not given, LF if in y else blank. Empty items are deleted.</p>
<p>e.g. if script=: 0!:0 @ cutopen, then</p>
<pre><code>   script &#39;work.ijs util.ijs&#39;</code></pre>
<h2 id="datatype" class="hdef">datatype (verb)</h2>
<p>Noun datatype.</p>
<h2 id="def" class="hdef">def (conjunction)</h2>
<p>: (explicit definition).</p>
<h2 id="define" class="hdef">define (adverb)</h2>
<p>: 0 (explicit definition script form).</p>
<h2 id="dfh" class="hdef">dfh (verb)</h2>
<p>Decimal from hex.</p>
<h2 id="do" class="hdef">do (verb)</h2>
<p>Name for &quot;.</p>
<h2 id="drop" class="hdef">drop (verb)</h2>
<p>Name for }.</p>
<h2 id="each" class="hdef">each (adverb)</h2>
<p>Each (&amp;.&gt;).</p>
<h2 id="echo" class="hdef">echo (verb)</h2>
<p>Write argument to session.</p>
<h2 id="empty" class="hdef">empty (verb)</h2>
<p>Return empty result (i.0 0).</p>
<h2 id="erase" class="hdef">erase (verb)</h2>
<p>Erase namelist.</p>
<h2 id="every" class="hdef">every (adverb)</h2>
<p>Every (&amp;&gt;).</p>
<h2 id="evtloop" class="hdef">evtloop (verb)</h2>
<p>Initialize event loop.</p>
<h2 id="exit" class="hdef">exit (verb)</h2>
<p>Name for 2!:55 (exit).</p>
<h2 id="expand" class="hdef">expand (verb)</h2>
<p>form: boolean expand data</p>
<h2 id="fetch" class="hdef">fetch (verb)</h2>
<p>Name for {::.</p>
<h2 id="file2url" class="hdef">file2url (verb)</h2>
<p>Convert to file:// format.</p>
<h2 id="fixdotdot" class="hdef">fixdotdot (verb)</h2>
<p>Fix up a/b/c/d/../../e/../f to a/b/f.</p>
<h2 id="fliprgb" class="hdef">fliprgb (verb)</h2>
<p>Flip between argb and abgr byte order.</p>
<h2 id="getargs" class="hdef">getargs (verb)</h2>
<p>Get args.</p>
<h2 id="getenv" class="hdef">getenv (verb)</h2>
<p>Cover for get environment variable, 2!:5.</p>
<h2 id="hfd" class="hdef">hfd (verb)</h2>
<p>Hex from decimal.</p>
<h2 id="inv" class="hdef">inv (adverb)</h2>
<p>Inverse (^:_1).</p>
<h2 id="inverse" class="hdef">inverse (adverb)</h2>
<p>Inverse (^:_1).</p>
<h2 id="iospath" class="hdef">iospath (verb)</h2>
<p>IOS file system path.</p>
<h2 id="isatty" class="hdef">isatty (verb)</h2>
<p>Test whether a file descriptor refers to a terminal</p>
<p>FILE_TYPE_CHAR=: 2<br />STD_INPUT_HANDLE=: _10<br />STD_OUTPUT_HANDLE=: _11<br />STD_ERROR_HANDLE=: _12</p>
<h2 id="isutf8" class="hdef">isutf8 (verb)</h2>
<p>If character string is valid utf8.</p>
<h2 id="items" class="hdef">items (adverb)</h2>
<p>Name for (&quot;_1).</p>
<h2 id="leaf" class="hdef">leaf (adverb)</h2>
<p>Leaf (L:0).</p>
<h2 id="list" class="hdef">list (verb)</h2>
<p>syntax: {width} list data accepts data as one of:</p>
<p> boxed list<br /> character vector, delimited by CR, LF or CRLF; or by ' '<br /> character matrix</p>
<p>formats in given width, default screenwidth</p>
<h2 id="nameclass" class="hdef">nameclass (verb)</h2>
<p>Name for 4!:0.</p>
<h2 id="namelist" class="hdef">namelist (verb)</h2>
<p>Name for 4!:1.</p>
<h2 id="names" class="hdef">names (verb)</h2>
<p>Formatted namelist.</p>
<h2 id="nc" class="hdef">nc (verb)</h2>
<p>Name for 4!:0.</p>
<h2 id="nl" class="hdef">nl (verb)</h2>
<p>Selective namelist.</p>
<h3>Syntax</h3>
<pre><code>[mp] nl sel</code></pre>
<p> sel: one or more integer name classes, or a name list.<br />       if empty use: 0 1 2 3.<br /> mp: optional matching pattern. If mp contains '*', list names<br />       containing mp, otherwise list names starting mp. If mp<br />       contains '~', list names that do not match.</p>
<p>e.g. 'f' nl 3 - list verbs that begin with 'f'<br />     '*com nl '' - list names containing 'com'</p>
<h2 id="Note" class="hdef">Note (verb)</h2>
<p><em>Monadic form:</em></p>
<p>This enables multi line comments without repeated NB.-and requires a right parenthesis in the first column of a line to close. The right argument may be empty, numeric, text, or any noun. Reads and displays the comment text but always returns an empty character string so the comment is not duplicated on screen.</p>
<p>The right argument can number or describe the notes, e.g.</p>
<pre><code>  Note 1     Note 2.2   or    Note &#39;The special case&#39; etc.</code></pre>
<p><em>Dyadic form:</em></p>
<p>This permits a single consist form of comment for any lines which are not tacit definitions. The left argument must be a noun. The function code displays the right argument and returns the left argument.</p>
<h3>Example</h3>
<pre><code>Note 1
... note text
)</code></pre>
<h2 id="on" class="hdef">on (conjunction)</h2>
<p>Name for @:.</p>
<h2 id="pick" class="hdef">pick (verb)</h2>
<p>Pick (&gt;@{).</p>
<h2 id="rows" class="hdef">rows (adverb)</h2>
<p>Rows (&quot;1).</p>
<h2 id="script" class="hdef">script (verb)</h2>
<p>Load script, cover for 0!:0.</p>
<h2 id="scriptd" class="hdef">scriptd (verb)</h2>
<p>Load script with display, cover for 0!:1.</p>
<h2 id="sign" class="hdef">sign (verb)</h2>
<p>Sign (*).</p>
<h2 id="sminfo" class="hdef">sminfo (verb)</h2>
<p>Info box or output to session.</p>
<h2 id="smoutput" class="hdef">smoutput (verb)</h2>
<p>Output to session.</p>
<h2 id="sort" class="hdef">sort (verb)</h2>
<p>Sort up.</p>
<h2 id="split" class="hdef">split (verb)</h2>
<p>Split head from tail.</p>
<h3>Example</h3>
<pre><code>   split &#39;abcde&#39;
┌─┬────┐
│a│bcde│
└─┴────┘
   2 split &#39;abcde&#39;
┌──┬───┐
│ab│cde│
└──┴───┘</code></pre>
<h2 id="stderr" class="hdef">stderr (verb)</h2>
<p>Name for 1!:2&amp;5.</p>
<h2 id="stdin" class="hdef">stdin (verb)</h2>
<p>Name for 1!:1&amp;3 with obverse stdout.</p>
<h2 id="stdout" class="hdef">stdout (verb)</h2>
<p>Name for 1!:2&amp;4.</p>
<h2 id="table" class="hdef">table (adverb)</h2>
<p>table - function table (adverb)</p>
<h3>Example</h3>
<pre><code>   1 2 3 * table 10 11 12 13
┌─┬───────────┐
│*│10 11 12 13│
├─┼───────────┤
│1│10 11 12 13│
│2│20 22 24 26│
│3│30 33 36 39│
└─┴───────────┘</code></pre>
<h2 id="take" class="hdef">take (verb)</h2>
<p>Name for {.</p>
<h2 id="timespacex" class="hdef">timespacex (verb)</h2>
<p>Time and space for expressions.</p>
<h3>Syntax</h3>
<pre><code>[repetitions] timespacex &#39;expression&#39;</code></pre>
<h3>Example</h3>
<pre><code>   10 timespacex &amp;&gt; &#39;q:123456787&#39;;&#39;3^10000x&#39;
0.005 58432
0.061 52352</code></pre>
<p>See also <a href="#timex">timex</a>.</p>
<h2 id="timex" class="hdef">timex (verb)</h2>
<p>Time expressions.</p>
<h3>Syntax</h3>
<pre><code>[repetitions] timex &#39;expression&#39;</code></pre>
<p>See also <a href="#timespacex">timespacex</a>.</p>
<h2 id="tmoutput" class="hdef">tmoutput (verb)</h2>
<p>Output to stdout.</p>
<h2 id="toCRLF" class="hdef">toCRLF (verb)</h2>
<p>Converts character strings to CRLF delimiter.</p>
<h2 id="toHOST" class="hdef">toHOST (verb)</h2>
<p>Converts character strings to Host delimiter.</p>
<h2 id="toJ" class="hdef">toJ (verb)</h2>
<p>Converts character strings to J delimiter (linefeed).</p>
<h2 id="tolower" class="hdef">tolower (verb)</h2>
<p>Convert text to lower case.</p>
<h2 id="toupper" class="hdef">toupper (verb)</h2>
<p>Convert text to upper case.</p>
<h2 id="type" class="hdef">type (verb)</h2>
<p>Object type.</p>
<h2 id="ucp" class="hdef">ucp (verb)</h2>
<p>This is 7-bit ascii (if possible) or utf16 (compare <a href="#uucp">uucp</a>).</p>
<p>inverse is <a href="#utf8">utf8</a>.</p>
<h2 id="ucpcount" class="hdef">ucpcount (verb)</h2>
<p>Counts number of unicode code points (glyphs) in a string.</p>
<p>A unicode character has one code point, even though it may have several bytes in its representation.</p>
<h2 id="usleep" class="hdef">usleep (verb)</h2>
<p>linux max value around 33 minutes<br />windows minimum resolution in milliseconds.</p>
<h2 id="utf8" class="hdef">utf8 (verb)</h2>
<p>Convert string to utf8.</p>
<p>Inverse of <a href="#ucp">ucp</a>.</p>
<h2 id="uucp" class="hdef">uucp (verb)</h2>
<p>Convert text to unicode code point.</p>
<p>This is always utf16 (compare <a href="#ucp">ucp</a>)</p>
<!--bottom jump start--><a href="lib_strings.htm">&gt;&gt;</a>&nbsp;<a href="lib_jal.htm">&lt;&lt;</a>&nbsp;<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;User
<!--bottom jump end--></body>
</html>
