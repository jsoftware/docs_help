<html>
<head><link rel=stylesheet href="../jdoc.css" type="text/css">
<title>Socket Utilities</title>

</head><body><!--top jump start--><a href="jserver.htm">&gt;&gt;</a>&nbsp;
<a href="socket_driver.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
User<hr><!--top jump end-->




<TR valign="baseline"><TD><H1>Socket Utilities</h1>
<TR><TD colspan="2"> 


<P>
Script system\main\socket.ijs has definitions for working with sockets.

<P>
The first element of the result of all socket verbs is a result code. It is 0 if there was no error, or it is an error number. Utility <code>sderror</code> returns the text name of the error number.

<P>
Some socket verbs take integer constants as arguments and some of these constants have been given names in socket.ijs. For example <code>SOCK_STREAM</code> is 1.

<P>
A socket can be blocking or non-blocking. A verb such as <code>sdrecv</code> will hang on a blocking socket until it can complete. On a non-blocking socket, the <code>sdrecv</code> returns immediately with a result code of <code>EWOULDBLOCK 10035</code>. In Windows the use of non-blocking sockets is recommend.

<P>
A socket created with <code>sdsocket</code> is a blocking socket. The verb <code>sdioctl</code> can make it non-blocking.

<P>
Verb <code>sdselect</code> returns information about the state of a socket and indicates if it has data to read, is ready for writing, or has had an error.

<P>
Addresses used with sockets consist of 3 parts: family, address, port. The first is an integer which indicates the type of address. Currently this is always <code>AF_INET</code> (address family internet). The second part is a string that is a series of 1 to 4 numbers separated by dots. The third part is an integer port.
<p>

<table>
<TR><TD VALIGN="TOP" WIDTH=300>
<pre>
sdsocket  family , type , protocol
sdsocket  ''
</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Creates a new socket. A socket is identified by an integer. The family must be <code>AF_INET</code> as defined in sockets.ijs. The type can be any of the <code>SOCK_</code> values, but is usually <code>SOCK_STREAM</code>. The protocol must be <code>0</code>. The result is a socket number that can be used as the socket argument to other verbs. The '' argument is equivalent to <code>AF_INET,SOCK_STREAM,0</code>

<pre>sdrecv  socket , count , flags</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Receives data from a socket. The count is the maximum amount of data that will be received. The flags are from the <code>MSG_</code> values and is usually <code>0</code>. The result is a boxed list. The first element is the result code and the second is the data. There may be less data received than in count.

<P>
If the socket is blocking and there is no data, the verb will hang until there is data.

<P>
If the socket is non-blocking and there is no data, it immediately returns result code <code>EWOULDBLOCK 10035</code>.

<P>
<code>sdioctl</code> can be used to see how much data is available for a socket.

<P>
If the socket at the other end is closed, then the socket will be in the <code>sdselect</code> ready-to-read list and an <code>sdrecv</code> will immediately receive 0 characters with no error.

<P>
If <code>sdasync</code> has been done for a socket, then the <code>socket_handler''</code> is run whenever new data is available.

<pre>sdrecv sk , 1000 , 0</pre>

</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>data  sdsend  socket , flags</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
The left argument is the data to send. The flags are from the <code>MSG_</code> values and is usually 0.

<P>
Blocking and non-blocking sockets work with sdsend in a similar manner to <code>sdrecv</code>.

<P>
The second element of the result indicates how many characters were actually sent. This may be less than was requested and you need to call <code>sdsend</code> again to send the remaining data.

<pre>'testing 1 2 3' sdsend sk , 0</pre>

</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>sdrecvfrom  socket , count , flags</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Similar to <code>sdrecv</code> except it is used with a <code>SOCK_DGRAM</code> socket. The result has additional elements that give the address of the data source.
<br><br>

</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>data  sdsendto  socket ; flags ; family ; address ; port</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Similar to sdsend except it is typically used with a <code>SOCK_DGRAM</code> socket and the argument includes the address to send the data to.

<pre>'test' sdsend sk ; 0 ; AF_INET ; '127.0.0.1' ; 800</pre>

</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>sdclose  socket</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Close a socket.
<br><br>

</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>sdconnect  socket , family , address , port</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Connect the socket to the socket indicated by the address.

<P>
An <code>sdconnect</code> on a blocking socket will hang until it completes and will either return a 0 result code indicating success, or an error code.

<P>
An <code>sdconnect</code> on a non-blocking socket returns immediately with <code>EWOULDBLOCK 10035</code>. The system will try to complete the connection asynchronously. If it is successful, the socket will be marked ready for writing in <code>sdselect</code>. If the connection fails the socket will be marked in error in <code>sdselect</code>.

<pre>sdconnect sk ; AF_INET ; '127.0.0.1' ; 800</pre>

</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>sdbind  socket , family , address , port</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Bind a socket to an address. The address can be ''  if the socket will be used to listen for connects to any address on the machine. If the port number is 0, the system will assign a port (which can be queried with <code>sdgetsockname</code>).

<P>
A bind is usually done with a socket that will listen for connections.

<pre>sdbind sk ; AF_INET ; '' ; 800  NB. any connections to 800</pre>

</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>sdlisten socket , number</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Set the socket to listen for connections. A bind must have been done. The number is the limit to queued connections. The host typically forces this limit to be between 1 and 5.

<P>
When a connection is made the socket is marked in <code>sdselect</code> as ready for reading. When it is ready <code>sdaccept</code> should be done.
<p>
</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>sdaccept socket</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
When a listening socket is marked as ready for reading in <code>sdselect</code>, then an accept can be done to create a new socket for this end of the channel. The new socket is a clone of the listening socket and has all its attributes. In particular, if the listening socket is non-blocking or has been marked with <code>sdasync</code>, then the new socket is as well. The result is the result code and the new socket.
<p>
</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>
sdselect  read ; write ; error ; timeout
sdselect  ''</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
The argument is a 4 element list. The first is a list of sockets to check for ready-to-read, the second is a list to check for ready-to-write, and the third is a list to check for errors. The last element is a timeout value in milliseconds. If it is 0, the select is non-blocking and returns immediately. If the timeout is not 0, it will return as soon as there is a socket to report on, but will not wait longer than the timeout value.

<P>
An empty argument checks all sockets for all conditions with a timeout of 0.

<P>
The result has a result code and 3 socket lists. The first is the list of ready-to-read sockets. The second is a list of ready-to-write sockets. The last is a list of sockets that had an error.

<P>
Ready-to-read sockets are sockets with data available for an <code>sdrecv</code> or listening sockets with an incoming connection
<p>
</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>sdgetsockopt  socket , option_level , option_name</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Returns the value of a socket option.

<pre>sdgetsockopt sk , SOL_SOCKET , SO_DEBUG
sdgetsockopt sk , SOL_SOCKET , SO_LINGER</pre>

</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>sdsetsockopt  socket , option_level, option_name , value... </PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Set the value of a socket option.

<pre>
sdsetsockopt sk , SOL_SOCKET , SO_DEBUG , 1
sdsetsockopt sk , SOL_SOCKET , SO_LINGER , 1 , 66</pre>

</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>sdioctl  socket , option , value</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Read or write socket control information.

<pre>
sdioctl sk , FIONBIO , 0  NB. set blocking
sdioctl sk , FIONBIO , 1  NB. set non-blocking
sdioctl sk , FIONREAD, 0  NB. count of data ready to read</pre>

</TR><TR>
<TD VALIGN="TOP" WIDTH=300>
<pre>sdgethostname  ''</PRE>
</TR><TR>
<TD VALIGN="top" WIDTH=650>
Returns host name.
<p>
</TR><TR><TD VALIGN="TOP" WIDTH=300>
<pre>sdgetpeername  socket</PRE>
</TR><TR><TD VALIGN="top" WIDTH=650>
Returns address of socket this socket is connected to.
<p>
</TR><TR><TD VALIGN="TOP" WIDTH=300>
<pre>sdgetsockname  socket</PRE>
</TR><TR><TD VALIGN="top" WIDTH=650>
Return address of this socket.
<p>
</TR><TR><TD VALIGN="TOP" WIDTH=300>
<pre>sdgethostbyname name</PRE>
</TR><TR><TD VALIGN="top" WIDTH=650>
Returns an address from a name.

<pre>
   sdgethostbyname 'localhost'
+-+-+---------+
|0|2|127.0.0.1|
+-+-+---------+
   sdgethostbyname &gt;1{sdgethostname ''
+-+-+-------------+
|0|2|204.92.48.126|
+-+-+-------------+
   sdgethostbyname 'www.jsoftware.com'
+-+-+--------------+
|0|2|198.53.145.167|
+-+-+--------------+</pre>

</TR><TR><TD VALIGN="TOP" WIDTH=300>
<pre>sdgethostbyaddr  AF_INET , address_name</PRE>
</TR><TR><TD VALIGN="top" WIDTH=650>
Returns a name from an address.
<p>
<pre>   sdgethostbyaddr 2 ; '127.0.0.1'
+-+---------+
|0|localhost|
+-+---------+
</pre>

</TR><TR><TD VALIGN="TOP" WIDTH=300>
<pre>sdgetsockets  ''</PRE>
</TR><TR><TD VALIGN="top" WIDTH=650>
Return result code and all socket numbers.
<p>
</TR><TR><TD VALIGN="TOP" WIDTH=300>
<pre>sdwsaasync  socket</PRE>
</TR><TR><TD VALIGN="top" WIDTH=650>
Make a socket non-blocking and cause the system to run sentence  socket_handler'' whenever the state of the socket has changed.
<p>
</TR><TR><TD VALIGN="TOP" WIDTH=300>
<pre>sdcleanup ''</PRE>
</TR><TR><TD VALIGN="top" WIDTH=650>
Close all sockets and release all socket resources.
</tr></table>


</TD>
  </tr>
<TR><TD>
<!--bottom jump start--><hr><a href="jserver.htm">&gt;&gt;</a>&nbsp;
<a href="socket_driver.htm">&lt;&lt;</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../jforc/contents.htm">JfC</a>&nbsp;
<a href="../learning/contents.htm">LJ</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
User<!--bottom jump end--></td></tr></table></body>
</html>
